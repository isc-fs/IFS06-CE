
VCU IFS06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c030  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  0800c300  0800c300  0000d300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c650  0800c650  0000d650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c658  0800c658  0000d658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c65c  0800c65c  0000d65c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  24000000  0800c660  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000690  24000070  0800c6d0  0000e070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000700  0800c6d0  0000e700  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ed5e  00000000  00000000  0000e09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c92  00000000  00000000  0002cdfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001848  00000000  00000000  0002fa90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001307  00000000  00000000  000312d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036e2e  00000000  00000000  000325df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001cd31  00000000  00000000  0006940d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001710ff  00000000  00000000  0008613e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f723d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007074  00000000  00000000  001f7280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000052  00000000  00000000  001fe2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000070 	.word	0x24000070
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c2e8 	.word	0x0800c2e8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000074 	.word	0x24000074
 800030c:	0800c2e8 	.word	0x0800c2e8

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b6:	f001 fc81 	bl	8001fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ba:	f000 fa15 	bl	8000ae8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006be:	f000 fa81 	bl	8000bc4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c2:	f000 fdff 	bl	80012c4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006c6:	f000 faad 	bl	8000c24 <MX_ADC1_Init>
  MX_ADC2_Init();
 80006ca:	f000 fb23 	bl	8000d14 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 80006ce:	f000 fb85 	bl	8000ddc <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80006d2:	f000 fc01 	bl	8000ed8 <MX_FDCAN2_Init>
  MX_TIM1_Init();
 80006d6:	f000 fc7d 	bl	8000fd4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80006da:	f000 fda7 	bl	800122c <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80006de:	f000 fd31 	bl	8001144 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 80006e2:	f000 fd57 	bl	8001194 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //Inicialización de buses CAN

  //Inversor
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK){
 80006e6:	4889      	ldr	r0, [pc, #548]	@ (800090c <main+0x25c>)
 80006e8:	f004 f842 	bl	8004770 <HAL_FDCAN_Start>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d002      	beq.n	80006f8 <main+0x48>
#if DEBUG
print("Error al inicializar CAN_INV");
 80006f2:	4887      	ldr	r0, [pc, #540]	@ (8000910 <main+0x260>)
 80006f4:	f000 feba 	bl	800146c <print>
#endif
  }

  //Acumulador
  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK){
 80006f8:	4886      	ldr	r0, [pc, #536]	@ (8000914 <main+0x264>)
 80006fa:	f004 f839 	bl	8004770 <HAL_FDCAN_Start>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d002      	beq.n	800070a <main+0x5a>
#if DEBUG
print("Error al inicializar CAN_ACU");
 8000704:	4884      	ldr	r0, [pc, #528]	@ (8000918 <main+0x268>)
 8000706:	f000 feb1 	bl	800146c <print>
#endif
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800070a:	2200      	movs	r2, #0
 800070c:	2101      	movs	r1, #1
 800070e:	4881      	ldr	r0, [pc, #516]	@ (8000914 <main+0x264>)
 8000710:	f004 fa20 	bl	8004b54 <HAL_FDCAN_ActivateNotification>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d01f      	beq.n	800075a <main+0xaa>
  {
#if DEBUG
print("Error al activar NOTIFICATION CAN_ACU");
 800071a:	4880      	ldr	r0, [pc, #512]	@ (800091c <main+0x26c>)
 800071c:	f000 fea6 	bl	800146c <print>


  //---------- SECUENCIA DE ARRANQUE ----------

  //Espera ACK inversor (DC bus)
  while (config_inv_lectura_v == 0){
 8000720:	e01b      	b.n	800075a <main+0xaa>
#if(DEBUG)
print("Solicitar tensión inversor");
 8000722:	487f      	ldr	r0, [pc, #508]	@ (8000920 <main+0x270>)
 8000724:	f000 fea2 	bl	800146c <print>
#endif
	if(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv, RxData_Inv) == HAL_OK){
 8000728:	4b7e      	ldr	r3, [pc, #504]	@ (8000924 <main+0x274>)
 800072a:	4a7f      	ldr	r2, [pc, #508]	@ (8000928 <main+0x278>)
 800072c:	2140      	movs	r1, #64	@ 0x40
 800072e:	4877      	ldr	r0, [pc, #476]	@ (800090c <main+0x25c>)
 8000730:	f004 f8a4 	bl	800487c <HAL_FDCAN_GetRxMessage>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d10f      	bne.n	800075a <main+0xaa>
		if(RxHeader_Inv.Identifier == TX_STATE_7 && RxHeader_Inv.DataLength == 6){
 800073a:	4b7b      	ldr	r3, [pc, #492]	@ (8000928 <main+0x278>)
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	4b7b      	ldr	r3, [pc, #492]	@ (800092c <main+0x27c>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	429a      	cmp	r2, r3
 8000744:	d109      	bne.n	800075a <main+0xaa>
 8000746:	4b78      	ldr	r3, [pc, #480]	@ (8000928 <main+0x278>)
 8000748:	68db      	ldr	r3, [r3, #12]
 800074a:	2b06      	cmp	r3, #6
 800074c:	d105      	bne.n	800075a <main+0xaa>
			config_inv_lectura_v = 1; //Sale del bucle
 800074e:	4b78      	ldr	r3, [pc, #480]	@ (8000930 <main+0x280>)
 8000750:	2201      	movs	r2, #1
 8000752:	601a      	str	r2, [r3, #0]
#if DEBUG
print("CAN_INV: Lectura de DC_BUS_VOLTAGE correctamente");
 8000754:	4877      	ldr	r0, [pc, #476]	@ (8000934 <main+0x284>)
 8000756:	f000 fe89 	bl	800146c <print>
  while (config_inv_lectura_v == 0){
 800075a:	4b75      	ldr	r3, [pc, #468]	@ (8000930 <main+0x280>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d0df      	beq.n	8000722 <main+0x72>
		}
	}
  }

  //Estado STAND BY inversor
  while(state!=3){
 8000762:	e011      	b.n	8000788 <main+0xd8>
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv, RxData_Inv);
 8000764:	4b6f      	ldr	r3, [pc, #444]	@ (8000924 <main+0x274>)
 8000766:	4a70      	ldr	r2, [pc, #448]	@ (8000928 <main+0x278>)
 8000768:	2140      	movs	r1, #64	@ 0x40
 800076a:	4868      	ldr	r0, [pc, #416]	@ (800090c <main+0x25c>)
 800076c:	f004 f886 	bl	800487c <HAL_FDCAN_GetRxMessage>
	if(RxHeader_Inv.Identifier == TX_STATE_3){
 8000770:	4b6d      	ldr	r3, [pc, #436]	@ (8000928 <main+0x278>)
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	4b70      	ldr	r3, [pc, #448]	@ (8000938 <main+0x288>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	429a      	cmp	r2, r3
 800077a:	d105      	bne.n	8000788 <main+0xd8>
		state = RxData_Inv[2]>>0x1;
 800077c:	4b69      	ldr	r3, [pc, #420]	@ (8000924 <main+0x274>)
 800077e:	789b      	ldrb	r3, [r3, #2]
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	b2da      	uxtb	r2, r3
 8000784:	4b6d      	ldr	r3, [pc, #436]	@ (800093c <main+0x28c>)
 8000786:	701a      	strb	r2, [r3, #0]
  while(state!=3){
 8000788:	4b6c      	ldr	r3, [pc, #432]	@ (800093c <main+0x28c>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b03      	cmp	r3, #3
 800078e:	d1e9      	bne.n	8000764 <main+0xb4>
	}
  }

	//PRE-CHARGE
  while(precarga_inv == 0){
 8000790:	e04f      	b.n	8000832 <main+0x182>
#if DEBUG
print("Precarga");
 8000792:	486b      	ldr	r0, [pc, #428]	@ (8000940 <main+0x290>)
 8000794:	f000 fe6a 	bl	800146c <print>
#endif
	//Lectura DC_BUS_VOLTAGE del CAN_INV
	if(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv, RxData_Inv) == HAL_OK){
 8000798:	4b62      	ldr	r3, [pc, #392]	@ (8000924 <main+0x274>)
 800079a:	4a63      	ldr	r2, [pc, #396]	@ (8000928 <main+0x278>)
 800079c:	2140      	movs	r1, #64	@ 0x40
 800079e:	485b      	ldr	r0, [pc, #364]	@ (800090c <main+0x25c>)
 80007a0:	f004 f86c 	bl	800487c <HAL_FDCAN_GetRxMessage>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d143      	bne.n	8000832 <main+0x182>
		if(RxHeader_Inv.Identifier == TX_STATE_7 && RxHeader_Inv.DataLength == 6){
 80007aa:	4b5f      	ldr	r3, [pc, #380]	@ (8000928 <main+0x278>)
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	4b5f      	ldr	r3, [pc, #380]	@ (800092c <main+0x27c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d13d      	bne.n	8000832 <main+0x182>
 80007b6:	4b5c      	ldr	r3, [pc, #368]	@ (8000928 <main+0x278>)
 80007b8:	68db      	ldr	r3, [r3, #12]
 80007ba:	2b06      	cmp	r3, #6
 80007bc:	d139      	bne.n	8000832 <main+0x182>
			uint8_t byte0 = RxData_Inv[0];
 80007be:	4b59      	ldr	r3, [pc, #356]	@ (8000924 <main+0x274>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
			uint8_t byte1 = RxData_Inv[1];
 80007c4:	4b57      	ldr	r3, [pc, #348]	@ (8000924 <main+0x274>)
 80007c6:	785b      	ldrb	r3, [r3, #1]
 80007c8:	71bb      	strb	r3, [r7, #6]
			printHex(byte0);
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 fe89 	bl	80014e4 <printHex>
			printHex(byte1);
 80007d2:	79bb      	ldrb	r3, [r7, #6]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 fe85 	bl	80014e4 <printHex>
			//inv_dc_bus_voltage = (int)((byte1<<8)|byte0);
#if DEBUG
print("DC_BUS_VOLTAGE (V):");
 80007da:	485a      	ldr	r0, [pc, #360]	@ (8000944 <main+0x294>)
 80007dc:	f000 fe46 	bl	800146c <print>
printValue((int)((byte1<<8)|byte0));
 80007e0:	79bb      	ldrb	r3, [r7, #6]
 80007e2:	021a      	lsls	r2, r3, #8
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	4313      	orrs	r3, r2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fe5d 	bl	80014a8 <printValue>
#endif

			//Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
			TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 80007ee:	4b56      	ldr	r3, [pc, #344]	@ (8000948 <main+0x298>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a56      	ldr	r2, [pc, #344]	@ (800094c <main+0x29c>)
 80007f4:	6013      	str	r3, [r2, #0]
			TxHeader_Acu.DataLength = 2;
 80007f6:	4b55      	ldr	r3, [pc, #340]	@ (800094c <main+0x29c>)
 80007f8:	2202      	movs	r2, #2
 80007fa:	60da      	str	r2, [r3, #12]
			TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 80007fc:	4b53      	ldr	r3, [pc, #332]	@ (800094c <main+0x29c>)
 80007fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000802:	605a      	str	r2, [r3, #4]
			TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8000804:	4b51      	ldr	r3, [pc, #324]	@ (800094c <main+0x29c>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
			TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 800080a:	4b50      	ldr	r3, [pc, #320]	@ (800094c <main+0x29c>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]

			TxData_Acu[0] = byte0;
 8000810:	4a4f      	ldr	r2, [pc, #316]	@ (8000950 <main+0x2a0>)
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	7013      	strb	r3, [r2, #0]
			TxData_Acu[1] = byte1;
 8000816:	4a4e      	ldr	r2, [pc, #312]	@ (8000950 <main+0x2a0>)
 8000818:	79bb      	ldrb	r3, [r7, #6]
 800081a:	7053      	strb	r3, [r2, #1]
			if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK){
 800081c:	4a4c      	ldr	r2, [pc, #304]	@ (8000950 <main+0x2a0>)
 800081e:	494b      	ldr	r1, [pc, #300]	@ (800094c <main+0x29c>)
 8000820:	483c      	ldr	r0, [pc, #240]	@ (8000914 <main+0x264>)
 8000822:	f003 ffd0 	bl	80047c6 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d102      	bne.n	8000832 <main+0x182>
#if DEBUG
print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
 800082c:	4849      	ldr	r0, [pc, #292]	@ (8000954 <main+0x2a4>)
 800082e:	f000 fe1d 	bl	800146c <print>
  while(precarga_inv == 0){
 8000832:	4b49      	ldr	r3, [pc, #292]	@ (8000958 <main+0x2a8>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d0ab      	beq.n	8000792 <main+0xe2>
	    }
	}
  }

#if DEBUG
print("state : stand by");
 800083a:	4848      	ldr	r0, [pc, #288]	@ (800095c <main+0x2ac>)
 800083c:	f000 fe16 	bl	800146c <print>
 * TIM16 -> APB2 => 264MHzw
 * 10 ms interruption => 10ms * 264MHz = 2640000
 * prescalado 264 (por ejemplo)
 * timer count = 2640000 / 264 = 10000
 */
  HAL_TIM_Base_Start_IT(&htim16);
 8000840:	4847      	ldr	r0, [pc, #284]	@ (8000960 <main+0x2b0>)
 8000842:	f008 fcb5 	bl	80091b0 <HAL_TIM_Base_Start_IT>


  //Estado READY inversor
  TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8000846:	4b47      	ldr	r3, [pc, #284]	@ (8000964 <main+0x2b4>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a47      	ldr	r2, [pc, #284]	@ (8000968 <main+0x2b8>)
 800084c:	6013      	str	r3, [r2, #0]
  TxHeader_Inv.DataLength = 3;
 800084e:	4b46      	ldr	r3, [pc, #280]	@ (8000968 <main+0x2b8>)
 8000850:	2203      	movs	r2, #3
 8000852:	60da      	str	r2, [r3, #12]
  TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8000854:	4b44      	ldr	r3, [pc, #272]	@ (8000968 <main+0x2b8>)
 8000856:	2200      	movs	r2, #0
 8000858:	605a      	str	r2, [r3, #4]

  TxData_Inv[0] = 0x0;
 800085a:	4b44      	ldr	r3, [pc, #272]	@ (800096c <main+0x2bc>)
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]
  TxData_Inv[1] = 0x0;
 8000860:	4b42      	ldr	r3, [pc, #264]	@ (800096c <main+0x2bc>)
 8000862:	2200      	movs	r2, #0
 8000864:	705a      	strb	r2, [r3, #1]
  TxData_Inv[2] = 0x4;
 8000866:	4b41      	ldr	r3, [pc, #260]	@ (800096c <main+0x2bc>)
 8000868:	2204      	movs	r2, #4
 800086a:	709a      	strb	r2, [r3, #2]
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 800086c:	4a3f      	ldr	r2, [pc, #252]	@ (800096c <main+0x2bc>)
 800086e:	493e      	ldr	r1, [pc, #248]	@ (8000968 <main+0x2b8>)
 8000870:	4826      	ldr	r0, [pc, #152]	@ (800090c <main+0x25c>)
 8000872:	f003 ffa8 	bl	80047c6 <HAL_FDCAN_AddMessageToTxFifoQ>
  while(state!=4){
 8000876:	e011      	b.n	800089c <main+0x1ec>
	  HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv, RxData_Inv);
 8000878:	4b2a      	ldr	r3, [pc, #168]	@ (8000924 <main+0x274>)
 800087a:	4a2b      	ldr	r2, [pc, #172]	@ (8000928 <main+0x278>)
 800087c:	2140      	movs	r1, #64	@ 0x40
 800087e:	4823      	ldr	r0, [pc, #140]	@ (800090c <main+0x25c>)
 8000880:	f003 fffc 	bl	800487c <HAL_FDCAN_GetRxMessage>
	  if(RxHeader_Inv.Identifier == TX_STATE_3){
 8000884:	4b28      	ldr	r3, [pc, #160]	@ (8000928 <main+0x278>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4b2b      	ldr	r3, [pc, #172]	@ (8000938 <main+0x288>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	429a      	cmp	r2, r3
 800088e:	d105      	bne.n	800089c <main+0x1ec>
		  state = RxData_Inv[2]>>0x1;
 8000890:	4b24      	ldr	r3, [pc, #144]	@ (8000924 <main+0x274>)
 8000892:	789b      	ldrb	r3, [r3, #2]
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	b2da      	uxtb	r2, r3
 8000898:	4b28      	ldr	r3, [pc, #160]	@ (800093c <main+0x28c>)
 800089a:	701a      	strb	r2, [r3, #0]
  while(state!=4){
 800089c:	4b27      	ldr	r3, [pc, #156]	@ (800093c <main+0x28c>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	d1e9      	bne.n	8000878 <main+0x1c8>
	  }
  }
#if DEBUG
print("state: ready");
 80008a4:	4832      	ldr	r0, [pc, #200]	@ (8000970 <main+0x2c0>)
 80008a6:	f000 fde1 	bl	800146c <print>
#endif


  //Estado TORQUE inversor
  TxHeader_Inv.Identifier = RX_SETPOINT_1;
 80008aa:	4b2e      	ldr	r3, [pc, #184]	@ (8000964 <main+0x2b4>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a2e      	ldr	r2, [pc, #184]	@ (8000968 <main+0x2b8>)
 80008b0:	6013      	str	r3, [r2, #0]
  TxHeader_Inv.DataLength = 3;
 80008b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000968 <main+0x2b8>)
 80008b4:	2203      	movs	r2, #3
 80008b6:	60da      	str	r2, [r3, #12]
  TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 80008b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000968 <main+0x2b8>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	605a      	str	r2, [r3, #4]


  TxData_Inv[0] = 0x0;
 80008be:	4b2b      	ldr	r3, [pc, #172]	@ (800096c <main+0x2bc>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
  TxData_Inv[1] = 0x0;
 80008c4:	4b29      	ldr	r3, [pc, #164]	@ (800096c <main+0x2bc>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	705a      	strb	r2, [r3, #1]
  TxData_Inv[2] = 0x6;
 80008ca:	4b28      	ldr	r3, [pc, #160]	@ (800096c <main+0x2bc>)
 80008cc:	2206      	movs	r2, #6
 80008ce:	709a      	strb	r2, [r3, #2]
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 80008d0:	4a26      	ldr	r2, [pc, #152]	@ (800096c <main+0x2bc>)
 80008d2:	4925      	ldr	r1, [pc, #148]	@ (8000968 <main+0x2b8>)
 80008d4:	480d      	ldr	r0, [pc, #52]	@ (800090c <main+0x25c>)
 80008d6:	f003 ff76 	bl	80047c6 <HAL_FDCAN_AddMessageToTxFifoQ>
  while(state!=6){
 80008da:	e011      	b.n	8000900 <main+0x250>
	  HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv, RxData_Inv);
 80008dc:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <main+0x274>)
 80008de:	4a12      	ldr	r2, [pc, #72]	@ (8000928 <main+0x278>)
 80008e0:	2140      	movs	r1, #64	@ 0x40
 80008e2:	480a      	ldr	r0, [pc, #40]	@ (800090c <main+0x25c>)
 80008e4:	f003 ffca 	bl	800487c <HAL_FDCAN_GetRxMessage>
	  if(RxHeader_Inv.Identifier == TX_STATE_3){
 80008e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000928 <main+0x278>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <main+0x288>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d105      	bne.n	8000900 <main+0x250>
		  state = RxData_Inv[2]>>0x1;
 80008f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000924 <main+0x274>)
 80008f6:	789b      	ldrb	r3, [r3, #2]
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <main+0x28c>)
 80008fe:	701a      	strb	r2, [r3, #0]
  while(state!=6){
 8000900:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <main+0x28c>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b06      	cmp	r3, #6
 8000906:	d1e9      	bne.n	80008dc <main+0x22c>
	  }
  }


  //Espera a que se pulse el botón de arranque mientras se pisa el freno
  while(boton_arranque == 0){
 8000908:	e073      	b.n	80009f2 <main+0x342>
 800090a:	bf00      	nop
 800090c:	24000178 	.word	0x24000178
 8000910:	0800c300 	.word	0x0800c300
 8000914:	24000218 	.word	0x24000218
 8000918:	0800c320 	.word	0x0800c320
 800091c:	0800c340 	.word	0x0800c340
 8000920:	0800c368 	.word	0x0800c368
 8000924:	24000518 	.word	0x24000518
 8000928:	2400049c 	.word	0x2400049c
 800092c:	24000004 	.word	0x24000004
 8000930:	24000090 	.word	0x24000090
 8000934:	0800c384 	.word	0x0800c384
 8000938:	24000000 	.word	0x24000000
 800093c:	2400053e 	.word	0x2400053e
 8000940:	0800c3b8 	.word	0x0800c3b8
 8000944:	0800c3c4 	.word	0x0800c3c4
 8000948:	2400000c 	.word	0x2400000c
 800094c:	240004c4 	.word	0x240004c4
 8000950:	24000520 	.word	0x24000520
 8000954:	0800c3d8 	.word	0x0800c3d8
 8000958:	2400008c 	.word	0x2400008c
 800095c:	0800c400 	.word	0x0800c400
 8000960:	24000304 	.word	0x24000304
 8000964:	24000008 	.word	0x24000008
 8000968:	24000478 	.word	0x24000478
 800096c:	24000510 	.word	0x24000510
 8000970:	0800c414 	.word	0x0800c414
	  //Enciende el LED del boton para avisar al piloto
	  HAL_GPIO_WritePin(START_BUTTON_LED_GPIO_Port, START_BUTTON_LED_Pin, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	2101      	movs	r1, #1
 8000978:	4846      	ldr	r0, [pc, #280]	@ (8000a94 <main+0x3e4>)
 800097a:	f005 f821 	bl	80059c0 <HAL_GPIO_WritePin>

	  start_button_act = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port, START_BUTTON_Pin);
 800097e:	2180      	movs	r1, #128	@ 0x80
 8000980:	4845      	ldr	r0, [pc, #276]	@ (8000a98 <main+0x3e8>)
 8000982:	f005 f805 	bl	8005990 <HAL_GPIO_ReadPin>
 8000986:	4603      	mov	r3, r0
 8000988:	461a      	mov	r2, r3
 800098a:	4b44      	ldr	r3, [pc, #272]	@ (8000a9c <main+0x3ec>)
 800098c:	601a      	str	r2, [r3, #0]
	  if(start_button_act == 1 && start_button_ant == 0){
 800098e:	4b43      	ldr	r3, [pc, #268]	@ (8000a9c <main+0x3ec>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d12d      	bne.n	80009f2 <main+0x342>
 8000996:	4b42      	ldr	r3, [pc, #264]	@ (8000aa0 <main+0x3f0>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d129      	bne.n	80009f2 <main+0x342>
		  ADC1_Select_SF();
 800099e:	f000 fdc1 	bl	8001524 <ADC1_Select_SF>
		  HAL_ADC_Start(&hadc1);
 80009a2:	4840      	ldr	r0, [pc, #256]	@ (8000aa4 <main+0x3f4>)
 80009a4:	f002 f8b4 	bl	8002b10 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80009a8:	f04f 31ff 	mov.w	r1, #4294967295
 80009ac:	483d      	ldr	r0, [pc, #244]	@ (8000aa4 <main+0x3f4>)
 80009ae:	f002 f9ad 	bl	8002d0c <HAL_ADC_PollForConversion>
		  s_freno= HAL_ADC_GetValue(&hadc1);
 80009b2:	483c      	ldr	r0, [pc, #240]	@ (8000aa4 <main+0x3f4>)
 80009b4:	f002 fa9e 	bl	8002ef4 <HAL_ADC_GetValue>
 80009b8:	4603      	mov	r3, r0
 80009ba:	461a      	mov	r2, r3
 80009bc:	4b3a      	ldr	r3, [pc, #232]	@ (8000aa8 <main+0x3f8>)
 80009be:	601a      	str	r2, [r3, #0]
		  HAL_ADC_Stop(&hadc1);
 80009c0:	4838      	ldr	r0, [pc, #224]	@ (8000aa4 <main+0x3f4>)
 80009c2:	f002 f96f 	bl	8002ca4 <HAL_ADC_Stop>
#if DEBUG
print("Botón Start + Freno:");
 80009c6:	4839      	ldr	r0, [pc, #228]	@ (8000aac <main+0x3fc>)
 80009c8:	f000 fd50 	bl	800146c <print>
printValue(s_freno);
 80009cc:	4b36      	ldr	r3, [pc, #216]	@ (8000aa8 <main+0x3f8>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 fd69 	bl	80014a8 <printValue>
#endif
		  if(s_freno>UMBRAL_FRENO){
 80009d6:	4b34      	ldr	r3, [pc, #208]	@ (8000aa8 <main+0x3f8>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2bd2      	cmp	r3, #210	@ 0xd2
 80009dc:	dd06      	ble.n	80009ec <main+0x33c>
			  boton_arranque = 1;
 80009de:	4b34      	ldr	r3, [pc, #208]	@ (8000ab0 <main+0x400>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	601a      	str	r2, [r3, #0]
#if DEBUG
print("Coche arrancado correctamente");
 80009e4:	4833      	ldr	r0, [pc, #204]	@ (8000ab4 <main+0x404>)
 80009e6:	f000 fd41 	bl	800146c <print>
 80009ea:	e002      	b.n	80009f2 <main+0x342>
#endif
		  }
		  else{
#if DEBUG
print("Pulsar freno para arrancar");
 80009ec:	4832      	ldr	r0, [pc, #200]	@ (8000ab8 <main+0x408>)
 80009ee:	f000 fd3d 	bl	800146c <print>
  while(boton_arranque == 0){
 80009f2:	4b2f      	ldr	r3, [pc, #188]	@ (8000ab0 <main+0x400>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d0bc      	beq.n	8000974 <main+0x2c4>
  }


  // Activar READY-TO-DRIVE-SOUND (RTDS) durante 2s
#if DEBUG
print("RTDS sonando");
 80009fa:	4830      	ldr	r0, [pc, #192]	@ (8000abc <main+0x40c>)
 80009fc:	f000 fd36 	bl	800146c <print>
#endif
  HAL_GPIO_WritePin(START_BUTTON_LED_GPIO_Port, START_BUTTON_LED_Pin, GPIO_PIN_SET); //Apaga LED botón
 8000a00:	2201      	movs	r2, #1
 8000a02:	2101      	movs	r1, #1
 8000a04:	4823      	ldr	r0, [pc, #140]	@ (8000a94 <main+0x3e4>)
 8000a06:	f004 ffdb 	bl	80059c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_SET); //Enciende RTDS
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	4821      	ldr	r0, [pc, #132]	@ (8000a94 <main+0x3e4>)
 8000a10:	f004 ffd6 	bl	80059c0 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000a14:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a18:	f001 fb62 	bl	80020e0 <HAL_Delay>
  HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_RESET); //Apaga RTDS
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2102      	movs	r1, #2
 8000a20:	481c      	ldr	r0, [pc, #112]	@ (8000a94 <main+0x3e4>)
 8000a22:	f004 ffcd 	bl	80059c0 <HAL_GPIO_WritePin>
#if DEBUG
  print("RTDS apagado");
 8000a26:	4826      	ldr	r0, [pc, #152]	@ (8000ac0 <main+0x410>)
 8000a28:	f000 fd20 	bl	800146c <print>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		//Estado TORQUE inversor
		TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8000a2c:	4b25      	ldr	r3, [pc, #148]	@ (8000ac4 <main+0x414>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a25      	ldr	r2, [pc, #148]	@ (8000ac8 <main+0x418>)
 8000a32:	6013      	str	r3, [r2, #0]
		TxHeader_Inv.DataLength = 3;
 8000a34:	4b24      	ldr	r3, [pc, #144]	@ (8000ac8 <main+0x418>)
 8000a36:	2203      	movs	r2, #3
 8000a38:	60da      	str	r2, [r3, #12]
		TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8000a3a:	4b23      	ldr	r3, [pc, #140]	@ (8000ac8 <main+0x418>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	605a      	str	r2, [r3, #4]


		TxData_Inv[0] = 0x0;
 8000a40:	4b22      	ldr	r3, [pc, #136]	@ (8000acc <main+0x41c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 8000a46:	4b21      	ldr	r3, [pc, #132]	@ (8000acc <main+0x41c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = 0x6;
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000acc <main+0x41c>)
 8000a4e:	2206      	movs	r2, #6
 8000a50:	709a      	strb	r2, [r3, #2]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8000a52:	4a1e      	ldr	r2, [pc, #120]	@ (8000acc <main+0x41c>)
 8000a54:	491c      	ldr	r1, [pc, #112]	@ (8000ac8 <main+0x418>)
 8000a56:	481e      	ldr	r0, [pc, #120]	@ (8000ad0 <main+0x420>)
 8000a58:	f003 feb5 	bl	80047c6 <HAL_FDCAN_AddMessageToTxFifoQ>

		HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv, RxData_Inv);
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad4 <main+0x424>)
 8000a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ad8 <main+0x428>)
 8000a60:	2140      	movs	r1, #64	@ 0x40
 8000a62:	481b      	ldr	r0, [pc, #108]	@ (8000ad0 <main+0x420>)
 8000a64:	f003 ff0a 	bl	800487c <HAL_FDCAN_GetRxMessage>
		if(RxHeader_Inv.Identifier == TX_STATE_3){
 8000a68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <main+0x428>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <main+0x42c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d1db      	bne.n	8000a2c <main+0x37c>
			state = RxData_Inv[2]>>0x1;
 8000a74:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <main+0x424>)
 8000a76:	789b      	ldrb	r3, [r3, #2]
 8000a78:	085b      	lsrs	r3, r3, #1
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ae0 <main+0x430>)
 8000a7e:	701a      	strb	r2, [r3, #0]
			if(state == 10){
 8000a80:	4b17      	ldr	r3, [pc, #92]	@ (8000ae0 <main+0x430>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b0a      	cmp	r3, #10
 8000a86:	d1d1      	bne.n	8000a2c <main+0x37c>
				error = RxData_Inv[0];
 8000a88:	4b12      	ldr	r3, [pc, #72]	@ (8000ad4 <main+0x424>)
 8000a8a:	781a      	ldrb	r2, [r3, #0]
 8000a8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <main+0x434>)
 8000a8e:	701a      	strb	r2, [r3, #0]
		TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8000a90:	e7cc      	b.n	8000a2c <main+0x37c>
 8000a92:	bf00      	nop
 8000a94:	58020800 	.word	0x58020800
 8000a98:	58021800 	.word	0x58021800
 8000a9c:	24000530 	.word	0x24000530
 8000aa0:	24000534 	.word	0x24000534
 8000aa4:	24000098 	.word	0x24000098
 8000aa8:	24000538 	.word	0x24000538
 8000aac:	0800c424 	.word	0x0800c424
 8000ab0:	24000094 	.word	0x24000094
 8000ab4:	0800c43c 	.word	0x0800c43c
 8000ab8:	0800c45c 	.word	0x0800c45c
 8000abc:	0800c478 	.word	0x0800c478
 8000ac0:	0800c488 	.word	0x0800c488
 8000ac4:	24000008 	.word	0x24000008
 8000ac8:	24000478 	.word	0x24000478
 8000acc:	24000510 	.word	0x24000510
 8000ad0:	24000178 	.word	0x24000178
 8000ad4:	24000518 	.word	0x24000518
 8000ad8:	2400049c 	.word	0x2400049c
 8000adc:	24000000 	.word	0x24000000
 8000ae0:	2400053e 	.word	0x2400053e
 8000ae4:	240005a4 	.word	0x240005a4

08000ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b09c      	sub	sp, #112	@ 0x70
 8000aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af2:	224c      	movs	r2, #76	@ 0x4c
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f00a ff76 	bl	800b9e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2220      	movs	r2, #32
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f00a ff70 	bl	800b9e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b08:	2002      	movs	r0, #2
 8000b0a:	f004 ff73 	bl	80059f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	4b2b      	ldr	r3, [pc, #172]	@ (8000bc0 <SystemClock_Config+0xd8>)
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	4a2a      	ldr	r2, [pc, #168]	@ (8000bc0 <SystemClock_Config+0xd8>)
 8000b18:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b1c:	6193      	str	r3, [r2, #24]
 8000b1e:	4b28      	ldr	r3, [pc, #160]	@ (8000bc0 <SystemClock_Config+0xd8>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b2a:	bf00      	nop
 8000b2c:	4b24      	ldr	r3, [pc, #144]	@ (8000bc0 <SystemClock_Config+0xd8>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b38:	d1f8      	bne.n	8000b2c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b42:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b44:	2302      	movs	r3, #2
 8000b46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000b50:	232c      	movs	r3, #44	@ 0x2c
 8000b52:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b54:	2301      	movs	r3, #1
 8000b56:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b58:	2304      	movs	r3, #4
 8000b5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b60:	230c      	movs	r3, #12
 8000b62:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b70:	4618      	mov	r0, r3
 8000b72:	f004 ff79 	bl	8005a68 <HAL_RCC_OscConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b7c:	f000 fdb6 	bl	80016ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b80:	233f      	movs	r3, #63	@ 0x3f
 8000b82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b84:	2303      	movs	r3, #3
 8000b86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b8c:	2308      	movs	r3, #8
 8000b8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b90:	2340      	movs	r3, #64	@ 0x40
 8000b92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b94:	2340      	movs	r3, #64	@ 0x40
 8000b96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b9c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b9e:	2340      	movs	r3, #64	@ 0x40
 8000ba0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2103      	movs	r1, #3
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f005 fb38 	bl	800621c <HAL_RCC_ClockConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000bb2:	f000 fd9b 	bl	80016ec <Error_Handler>
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	3770      	adds	r7, #112	@ 0x70
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	58024800 	.word	0x58024800

08000bc4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b0ae      	sub	sp, #184	@ 0xb8
 8000bc8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bca:	463b      	mov	r3, r7
 8000bcc:	22b8      	movs	r2, #184	@ 0xb8
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f00a ff09 	bl	800b9e8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bd6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000bda:	f04f 0300 	mov.w	r3, #0
 8000bde:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000be2:	2302      	movs	r3, #2
 8000be4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000be6:	2310      	movs	r3, #16
 8000be8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000bea:	2302      	movs	r3, #2
 8000bec:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000bf6:	23c0      	movs	r3, #192	@ 0xc0
 8000bf8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 8000bfe:	f640 3386 	movw	r3, #2950	@ 0xb86
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f005 fe91 	bl	8006934 <HAL_RCCEx_PeriphCLKConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000c18:	f000 fd68 	bl	80016ec <Error_Handler>
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	37b8      	adds	r7, #184	@ 0xb8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08c      	sub	sp, #48	@ 0x30
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c36:	463b      	mov	r3, r7
 8000c38:	2224      	movs	r2, #36	@ 0x24
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f00a fed3 	bl	800b9e8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c42:	4b31      	ldr	r3, [pc, #196]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c44:	4a31      	ldr	r2, [pc, #196]	@ (8000d0c <MX_ADC1_Init+0xe8>)
 8000c46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c48:	4b2f      	ldr	r3, [pc, #188]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000c4e:	4b2e      	ldr	r3, [pc, #184]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c50:	220c      	movs	r2, #12
 8000c52:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c54:	4b2c      	ldr	r3, [pc, #176]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c5a:	4b2b      	ldr	r3, [pc, #172]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c5c:	2204      	movs	r2, #4
 8000c5e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c60:	4b29      	ldr	r3, [pc, #164]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c66:	4b28      	ldr	r3, [pc, #160]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c6c:	4b26      	ldr	r3, [pc, #152]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c72:	4b25      	ldr	r3, [pc, #148]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c7a:	4b23      	ldr	r3, [pc, #140]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c80:	4b21      	ldr	r3, [pc, #132]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c86:	4b20      	ldr	r3, [pc, #128]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c92:	4b1d      	ldr	r3, [pc, #116]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000c98:	4b1b      	ldr	r3, [pc, #108]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ca0:	4819      	ldr	r0, [pc, #100]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000ca2:	f001 fd2d 	bl	8002700 <HAL_ADC_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000cac:	f000 fd1e 	bl	80016ec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4813      	ldr	r0, [pc, #76]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000cbc:	f003 f912 	bl	8003ee4 <HAL_ADCEx_MultiModeConfigChannel>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000cc6:	f000 fd11 	bl	80016ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cca:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <MX_ADC1_Init+0xec>)
 8000ccc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cce:	2306      	movs	r3, #6
 8000cd0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cd6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000cda:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cdc:	2304      	movs	r3, #4
 8000cde:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cea:	463b      	mov	r3, r7
 8000cec:	4619      	mov	r1, r3
 8000cee:	4806      	ldr	r0, [pc, #24]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000cf0:	f002 f90e 	bl	8002f10 <HAL_ADC_ConfigChannel>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000cfa:	f000 fcf7 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	3730      	adds	r7, #48	@ 0x30
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	24000098 	.word	0x24000098
 8000d0c:	40022000 	.word	0x40022000
 8000d10:	08600004 	.word	0x08600004

08000d14 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	@ 0x28
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2224      	movs	r2, #36	@ 0x24
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f00a fe61 	bl	800b9e8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d26:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d28:	4a2a      	ldr	r2, [pc, #168]	@ (8000dd4 <MX_ADC2_Init+0xc0>)
 8000d2a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d2c:	4b28      	ldr	r3, [pc, #160]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000d32:	4b27      	ldr	r3, [pc, #156]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d38:	4b25      	ldr	r3, [pc, #148]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d3e:	4b24      	ldr	r3, [pc, #144]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d40:	2204      	movs	r2, #4
 8000d42:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d44:	4b22      	ldr	r3, [pc, #136]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d56:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d70:	4b17      	ldr	r3, [pc, #92]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d76:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000d7c:	4b14      	ldr	r3, [pc, #80]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d84:	4812      	ldr	r0, [pc, #72]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d86:	f001 fcbb 	bl	8002700 <HAL_ADC_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000d90:	f000 fcac 	bl	80016ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d94:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <MX_ADC2_Init+0xc4>)
 8000d96:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d98:	2306      	movs	r3, #6
 8000d9a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000da0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000da4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000da6:	2304      	movs	r3, #4
 8000da8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000dba:	f002 f8a9 	bl	8002f10 <HAL_ADC_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000dc4:	f000 fc92 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	3728      	adds	r7, #40	@ 0x28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	24000108 	.word	0x24000108
 8000dd4:	40022100 	.word	0x40022100
 8000dd8:	25b00200 	.word	0x25b00200

08000ddc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000de2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000de4:	4a3b      	ldr	r2, [pc, #236]	@ (8000ed4 <MX_FDCAN1_Init+0xf8>)
 8000de6:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000de8:	4b39      	ldr	r3, [pc, #228]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000dee:	4b38      	ldr	r3, [pc, #224]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000df4:	4b36      	ldr	r3, [pc, #216]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000dfa:	4b35      	ldr	r3, [pc, #212]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e00:	4b33      	ldr	r3, [pc, #204]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 8000e06:	4b32      	ldr	r3, [pc, #200]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e08:	2206      	movs	r2, #6
 8000e0a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e0c:	4b30      	ldr	r3, [pc, #192]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000e12:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e14:	2202      	movs	r2, #2
 8000e16:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8000e18:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e1a:	2205      	movs	r2, #5
 8000e1c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e24:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e2a:	4b29      	ldr	r3, [pc, #164]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e30:	4b27      	ldr	r3, [pc, #156]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000e36:	4b26      	ldr	r3, [pc, #152]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000e3c:	4b24      	ldr	r3, [pc, #144]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000e42:	4b23      	ldr	r3, [pc, #140]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000e48:	4b21      	ldr	r3, [pc, #132]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e4a:	2220      	movs	r2, #32
 8000e4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e4e:	4b20      	ldr	r3, [pc, #128]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e50:	2204      	movs	r2, #4
 8000e52:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8000e54:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e56:	2220      	movs	r2, #32
 8000e58:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e5c:	2204      	movs	r2, #4
 8000e5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000e60:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e66:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e68:	2204      	movs	r2, #4
 8000e6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000e6c:	4b18      	ldr	r3, [pc, #96]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000e72:	4b17      	ldr	r3, [pc, #92]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000e78:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e7a:	2220      	movs	r2, #32
 8000e7c:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e7e:	4b14      	ldr	r3, [pc, #80]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e84:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e86:	2204      	movs	r2, #4
 8000e88:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000e8a:	4811      	ldr	r0, [pc, #68]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e8c:	f003 fa1c 	bl	80042c8 <HAL_FDCAN_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000e96:	f000 fc29 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4806      	ldr	r0, [pc, #24]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000eb8:	f003 fbe4 	bl	8004684 <HAL_FDCAN_ConfigFilter>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_FDCAN1_Init+0xea>
  {
    Error_Handler();
 8000ec2:	f000 fc13 	bl	80016ec <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	3720      	adds	r7, #32
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	24000178 	.word	0x24000178
 8000ed4:	4000a000 	.word	0x4000a000

08000ed8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000ede:	4b3b      	ldr	r3, [pc, #236]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000ee0:	4a3b      	ldr	r2, [pc, #236]	@ (8000fd0 <MX_FDCAN2_Init+0xf8>)
 8000ee2:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ee4:	4b39      	ldr	r3, [pc, #228]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000eea:	4b38      	ldr	r3, [pc, #224]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000ef0:	4b36      	ldr	r3, [pc, #216]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000ef6:	4b35      	ldr	r3, [pc, #212]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000efc:	4b33      	ldr	r3, [pc, #204]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 8000f02:	4b32      	ldr	r3, [pc, #200]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f04:	2206      	movs	r2, #6
 8000f06:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000f08:	4b30      	ldr	r3, [pc, #192]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 10;
 8000f0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f10:	220a      	movs	r2, #10
 8000f12:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8000f14:	4b2d      	ldr	r3, [pc, #180]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f16:	2205      	movs	r2, #5
 8000f18:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000f20:	4b2a      	ldr	r3, [pc, #168]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000f26:	4b29      	ldr	r3, [pc, #164]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000f2c:	4b27      	ldr	r3, [pc, #156]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000f32:	4b26      	ldr	r3, [pc, #152]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 8000f38:	4b24      	ldr	r3, [pc, #144]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 1;
 8000f3e:	4b23      	ldr	r3, [pc, #140]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 16;
 8000f44:	4b21      	ldr	r3, [pc, #132]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f46:	2210      	movs	r2, #16
 8000f48:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f4a:	4b20      	ldr	r3, [pc, #128]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 16;
 8000f50:	4b1e      	ldr	r3, [pc, #120]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f52:	2210      	movs	r2, #16
 8000f54:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f56:	4b1d      	ldr	r3, [pc, #116]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f58:	2204      	movs	r2, #4
 8000f5a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f62:	4b1a      	ldr	r3, [pc, #104]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f64:	2204      	movs	r2, #4
 8000f66:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000f68:	4b18      	ldr	r3, [pc, #96]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000f6e:	4b17      	ldr	r3, [pc, #92]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 16;
 8000f74:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f76:	2210      	movs	r2, #16
 8000f78:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f7a:	4b14      	ldr	r3, [pc, #80]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000f80:	4b12      	ldr	r3, [pc, #72]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f82:	2204      	movs	r2, #4
 8000f84:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000f86:	4811      	ldr	r0, [pc, #68]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f88:	f003 f99e 	bl	80042c8 <HAL_FDCAN_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8000f92:	f000 fbab 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000f96:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f9a:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4805      	ldr	r0, [pc, #20]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000fb6:	f003 fb65 	bl	8004684 <HAL_FDCAN_ConfigFilter>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_FDCAN2_Init+0xec>
  {
    Error_Handler();
 8000fc0:	f000 fb94 	bl	80016ec <Error_Handler>
  }
  /* USER CODE END FDCAN2_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	3720      	adds	r7, #32
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	24000218 	.word	0x24000218
 8000fd0:	4000a400 	.word	0x4000a400

08000fd4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b09c      	sub	sp, #112	@ 0x70
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fda:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
 8001004:	615a      	str	r2, [r3, #20]
 8001006:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	2234      	movs	r2, #52	@ 0x34
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f00a fcea 	bl	800b9e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001014:	4b49      	ldr	r3, [pc, #292]	@ (800113c <MX_TIM1_Init+0x168>)
 8001016:	4a4a      	ldr	r2, [pc, #296]	@ (8001140 <MX_TIM1_Init+0x16c>)
 8001018:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800101a:	4b48      	ldr	r3, [pc, #288]	@ (800113c <MX_TIM1_Init+0x168>)
 800101c:	2200      	movs	r2, #0
 800101e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001020:	4b46      	ldr	r3, [pc, #280]	@ (800113c <MX_TIM1_Init+0x168>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001026:	4b45      	ldr	r3, [pc, #276]	@ (800113c <MX_TIM1_Init+0x168>)
 8001028:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800102c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102e:	4b43      	ldr	r3, [pc, #268]	@ (800113c <MX_TIM1_Init+0x168>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001034:	4b41      	ldr	r3, [pc, #260]	@ (800113c <MX_TIM1_Init+0x168>)
 8001036:	2200      	movs	r2, #0
 8001038:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800103a:	4b40      	ldr	r3, [pc, #256]	@ (800113c <MX_TIM1_Init+0x168>)
 800103c:	2280      	movs	r2, #128	@ 0x80
 800103e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001040:	483e      	ldr	r0, [pc, #248]	@ (800113c <MX_TIM1_Init+0x168>)
 8001042:	f008 f85d 	bl	8009100 <HAL_TIM_Base_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800104c:	f000 fb4e 	bl	80016ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001050:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001054:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001056:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800105a:	4619      	mov	r1, r3
 800105c:	4837      	ldr	r0, [pc, #220]	@ (800113c <MX_TIM1_Init+0x168>)
 800105e:	f008 fba9 	bl	80097b4 <HAL_TIM_ConfigClockSource>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001068:	f000 fb40 	bl	80016ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800106c:	4833      	ldr	r0, [pc, #204]	@ (800113c <MX_TIM1_Init+0x168>)
 800106e:	f008 f925 	bl	80092bc <HAL_TIM_PWM_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001078:	f000 fb38 	bl	80016ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800107c:	2300      	movs	r3, #0
 800107e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001080:	2300      	movs	r3, #0
 8001082:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001088:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800108c:	4619      	mov	r1, r3
 800108e:	482b      	ldr	r0, [pc, #172]	@ (800113c <MX_TIM1_Init+0x168>)
 8001090:	f009 f8d6 	bl	800a240 <HAL_TIMEx_MasterConfigSynchronization>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800109a:	f000 fb27 	bl	80016ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800109e:	2360      	movs	r3, #96	@ 0x60
 80010a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a6:	2300      	movs	r3, #0
 80010a8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010aa:	2300      	movs	r3, #0
 80010ac:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010b2:	2300      	movs	r3, #0
 80010b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010b6:	2300      	movs	r3, #0
 80010b8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010be:	2200      	movs	r2, #0
 80010c0:	4619      	mov	r1, r3
 80010c2:	481e      	ldr	r0, [pc, #120]	@ (800113c <MX_TIM1_Init+0x168>)
 80010c4:	f008 fa62 	bl	800958c <HAL_TIM_PWM_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80010ce:	f000 fb0d 	bl	80016ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010d6:	2204      	movs	r2, #4
 80010d8:	4619      	mov	r1, r3
 80010da:	4818      	ldr	r0, [pc, #96]	@ (800113c <MX_TIM1_Init+0x168>)
 80010dc:	f008 fa56 	bl	800958c <HAL_TIM_PWM_ConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80010e6:	f000 fb01 	bl	80016ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001102:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800110c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001110:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	4619      	mov	r1, r3
 800111e:	4807      	ldr	r0, [pc, #28]	@ (800113c <MX_TIM1_Init+0x168>)
 8001120:	f009 f92a 	bl	800a378 <HAL_TIMEx_ConfigBreakDeadTime>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800112a:	f000 fadf 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800112e:	4803      	ldr	r0, [pc, #12]	@ (800113c <MX_TIM1_Init+0x168>)
 8001130:	f000 fd20 	bl	8001b74 <HAL_TIM_MspPostInit>

}
 8001134:	bf00      	nop
 8001136:	3770      	adds	r7, #112	@ 0x70
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	240002b8 	.word	0x240002b8
 8001140:	40010000 	.word	0x40010000

08001144 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001148:	4b10      	ldr	r3, [pc, #64]	@ (800118c <MX_TIM16_Init+0x48>)
 800114a:	4a11      	ldr	r2, [pc, #68]	@ (8001190 <MX_TIM16_Init+0x4c>)
 800114c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2640- 1;
 800114e:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <MX_TIM16_Init+0x48>)
 8001150:	f640 224f 	movw	r2, #2639	@ 0xa4f
 8001154:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001156:	4b0d      	ldr	r3, [pc, #52]	@ (800118c <MX_TIM16_Init+0x48>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 - 1;
 800115c:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <MX_TIM16_Init+0x48>)
 800115e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001162:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001164:	4b09      	ldr	r3, [pc, #36]	@ (800118c <MX_TIM16_Init+0x48>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800116a:	4b08      	ldr	r3, [pc, #32]	@ (800118c <MX_TIM16_Init+0x48>)
 800116c:	2200      	movs	r2, #0
 800116e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001170:	4b06      	ldr	r3, [pc, #24]	@ (800118c <MX_TIM16_Init+0x48>)
 8001172:	2200      	movs	r2, #0
 8001174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	@ (800118c <MX_TIM16_Init+0x48>)
 8001178:	f007 ffc2 	bl	8009100 <HAL_TIM_Base_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001182:	f000 fab3 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	24000304 	.word	0x24000304
 8001190:	40014400 	.word	0x40014400

08001194 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001198:	4b22      	ldr	r3, [pc, #136]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 800119a:	4a23      	ldr	r2, [pc, #140]	@ (8001228 <MX_USART1_UART_Init+0x94>)
 800119c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800119e:	4b21      	ldr	r3, [pc, #132]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 80011a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 80011ba:	220c      	movs	r2, #12
 80011bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011be:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c4:	4b17      	ldr	r3, [pc, #92]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ca:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011d0:	4b14      	ldr	r3, [pc, #80]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011d6:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 80011d8:	2200      	movs	r2, #0
 80011da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011dc:	4811      	ldr	r0, [pc, #68]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 80011de:	f009 f975 	bl	800a4cc <HAL_UART_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80011e8:	f000 fa80 	bl	80016ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ec:	2100      	movs	r1, #0
 80011ee:	480d      	ldr	r0, [pc, #52]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 80011f0:	f00a fb0f 	bl	800b812 <HAL_UARTEx_SetTxFifoThreshold>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80011fa:	f000 fa77 	bl	80016ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011fe:	2100      	movs	r1, #0
 8001200:	4808      	ldr	r0, [pc, #32]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 8001202:	f00a fb44 	bl	800b88e <HAL_UARTEx_SetRxFifoThreshold>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800120c:	f000 fa6e 	bl	80016ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001210:	4804      	ldr	r0, [pc, #16]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 8001212:	f00a fac5 	bl	800b7a0 <HAL_UARTEx_DisableFifoMode>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800121c:	f000 fa66 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	24000350 	.word	0x24000350
 8001228:	40011000 	.word	0x40011000

0800122c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001230:	4b22      	ldr	r3, [pc, #136]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 8001232:	4a23      	ldr	r2, [pc, #140]	@ (80012c0 <MX_USART2_UART_Init+0x94>)
 8001234:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001236:	4b21      	ldr	r3, [pc, #132]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 8001238:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800123c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800123e:	4b1f      	ldr	r3, [pc, #124]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001244:	4b1d      	ldr	r3, [pc, #116]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800124a:	4b1c      	ldr	r3, [pc, #112]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001250:	4b1a      	ldr	r3, [pc, #104]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 8001252:	220c      	movs	r2, #12
 8001254:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001256:	4b19      	ldr	r3, [pc, #100]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800125c:	4b17      	ldr	r3, [pc, #92]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001262:	4b16      	ldr	r3, [pc, #88]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 8001264:	2200      	movs	r2, #0
 8001266:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001268:	4b14      	ldr	r3, [pc, #80]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 800126a:	2200      	movs	r2, #0
 800126c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800126e:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 8001270:	2200      	movs	r2, #0
 8001272:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001274:	4811      	ldr	r0, [pc, #68]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 8001276:	f009 f929 	bl	800a4cc <HAL_UART_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001280:	f000 fa34 	bl	80016ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001284:	2100      	movs	r1, #0
 8001286:	480d      	ldr	r0, [pc, #52]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 8001288:	f00a fac3 	bl	800b812 <HAL_UARTEx_SetTxFifoThreshold>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001292:	f000 fa2b 	bl	80016ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001296:	2100      	movs	r1, #0
 8001298:	4808      	ldr	r0, [pc, #32]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 800129a:	f00a faf8 	bl	800b88e <HAL_UARTEx_SetRxFifoThreshold>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80012a4:	f000 fa22 	bl	80016ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80012a8:	4804      	ldr	r0, [pc, #16]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 80012aa:	f00a fa79 	bl	800b7a0 <HAL_UARTEx_DisableFifoMode>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80012b4:	f000 fa1a 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	240003e4 	.word	0x240003e4
 80012c0:	40004400 	.word	0x40004400

080012c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08e      	sub	sp, #56	@ 0x38
 80012c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012da:	4b60      	ldr	r3, [pc, #384]	@ (800145c <MX_GPIO_Init+0x198>)
 80012dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e0:	4a5e      	ldr	r2, [pc, #376]	@ (800145c <MX_GPIO_Init+0x198>)
 80012e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ea:	4b5c      	ldr	r3, [pc, #368]	@ (800145c <MX_GPIO_Init+0x198>)
 80012ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012f4:	623b      	str	r3, [r7, #32]
 80012f6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f8:	4b58      	ldr	r3, [pc, #352]	@ (800145c <MX_GPIO_Init+0x198>)
 80012fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fe:	4a57      	ldr	r2, [pc, #348]	@ (800145c <MX_GPIO_Init+0x198>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001308:	4b54      	ldr	r3, [pc, #336]	@ (800145c <MX_GPIO_Init+0x198>)
 800130a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	61fb      	str	r3, [r7, #28]
 8001314:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	4b51      	ldr	r3, [pc, #324]	@ (800145c <MX_GPIO_Init+0x198>)
 8001318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131c:	4a4f      	ldr	r2, [pc, #316]	@ (800145c <MX_GPIO_Init+0x198>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001326:	4b4d      	ldr	r3, [pc, #308]	@ (800145c <MX_GPIO_Init+0x198>)
 8001328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	61bb      	str	r3, [r7, #24]
 8001332:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001334:	4b49      	ldr	r3, [pc, #292]	@ (800145c <MX_GPIO_Init+0x198>)
 8001336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800133a:	4a48      	ldr	r2, [pc, #288]	@ (800145c <MX_GPIO_Init+0x198>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001344:	4b45      	ldr	r3, [pc, #276]	@ (800145c <MX_GPIO_Init+0x198>)
 8001346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001352:	4b42      	ldr	r3, [pc, #264]	@ (800145c <MX_GPIO_Init+0x198>)
 8001354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001358:	4a40      	ldr	r2, [pc, #256]	@ (800145c <MX_GPIO_Init+0x198>)
 800135a:	f043 0320 	orr.w	r3, r3, #32
 800135e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001362:	4b3e      	ldr	r3, [pc, #248]	@ (800145c <MX_GPIO_Init+0x198>)
 8001364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001368:	f003 0320 	and.w	r3, r3, #32
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001370:	4b3a      	ldr	r3, [pc, #232]	@ (800145c <MX_GPIO_Init+0x198>)
 8001372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001376:	4a39      	ldr	r2, [pc, #228]	@ (800145c <MX_GPIO_Init+0x198>)
 8001378:	f043 0310 	orr.w	r3, r3, #16
 800137c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001380:	4b36      	ldr	r3, [pc, #216]	@ (800145c <MX_GPIO_Init+0x198>)
 8001382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001386:	f003 0310 	and.w	r3, r3, #16
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800138e:	4b33      	ldr	r3, [pc, #204]	@ (800145c <MX_GPIO_Init+0x198>)
 8001390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001394:	4a31      	ldr	r2, [pc, #196]	@ (800145c <MX_GPIO_Init+0x198>)
 8001396:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800139a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800139e:	4b2f      	ldr	r3, [pc, #188]	@ (800145c <MX_GPIO_Init+0x198>)
 80013a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ac:	4b2b      	ldr	r3, [pc, #172]	@ (800145c <MX_GPIO_Init+0x198>)
 80013ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b2:	4a2a      	ldr	r2, [pc, #168]	@ (800145c <MX_GPIO_Init+0x198>)
 80013b4:	f043 0308 	orr.w	r3, r3, #8
 80013b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013bc:	4b27      	ldr	r3, [pc, #156]	@ (800145c <MX_GPIO_Init+0x198>)
 80013be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, START_BUTTON_LED_Pin|RTDS_Pin, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2103      	movs	r1, #3
 80013ce:	4824      	ldr	r0, [pc, #144]	@ (8001460 <MX_GPIO_Init+0x19c>)
 80013d0:	f004 faf6 	bl	80059c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_Data_GPIO_Port, DS18B20_Data_Pin, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013da:	4822      	ldr	r0, [pc, #136]	@ (8001464 <MX_GPIO_Init+0x1a0>)
 80013dc:	f004 faf0 	bl	80059c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_BUTTON_LED_Pin RTDS_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_LED_Pin|RTDS_Pin;
 80013e0:	2303      	movs	r3, #3
 80013e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f4:	4619      	mov	r1, r3
 80013f6:	481a      	ldr	r0, [pc, #104]	@ (8001460 <MX_GPIO_Init+0x19c>)
 80013f8:	f004 f922 	bl	8005640 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_Data_Pin */
  GPIO_InitStruct.Pin = DS18B20_Data_Pin;
 80013fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001400:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001402:	2301      	movs	r3, #1
 8001404:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DS18B20_Data_GPIO_Port, &GPIO_InitStruct);
 800140e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001412:	4619      	mov	r1, r3
 8001414:	4813      	ldr	r0, [pc, #76]	@ (8001464 <MX_GPIO_Init+0x1a0>)
 8001416:	f004 f913 	bl	8005640 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141e:	2300      	movs	r3, #0
 8001420:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800142a:	4619      	mov	r1, r3
 800142c:	480e      	ldr	r0, [pc, #56]	@ (8001468 <MX_GPIO_Init+0x1a4>)
 800142e:	f004 f907 	bl	8005640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001432:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001436:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8001444:	2302      	movs	r3, #2
 8001446:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001448:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800144c:	4619      	mov	r1, r3
 800144e:	4806      	ldr	r0, [pc, #24]	@ (8001468 <MX_GPIO_Init+0x1a4>)
 8001450:	f004 f8f6 	bl	8005640 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001454:	bf00      	nop
 8001456:	3738      	adds	r7, #56	@ 0x38
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	58024400 	.word	0x58024400
 8001460:	58020800 	.word	0x58020800
 8001464:	58021000 	.word	0x58021000
 8001468:	58021800 	.word	0x58021800

0800146c <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[]){
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	4909      	ldr	r1, [pc, #36]	@ (800149c <print+0x30>)
 8001478:	4809      	ldr	r0, [pc, #36]	@ (80014a0 <print+0x34>)
 800147a:	f00a fa95 	bl	800b9a8 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 800147e:	4808      	ldr	r0, [pc, #32]	@ (80014a0 <print+0x34>)
 8001480:	f7fe ff46 	bl	8000310 <strlen>
 8001484:	4603      	mov	r3, r0
 8001486:	b29a      	uxth	r2, r3
 8001488:	f04f 33ff 	mov.w	r3, #4294967295
 800148c:	4904      	ldr	r1, [pc, #16]	@ (80014a0 <print+0x34>)
 800148e:	4805      	ldr	r0, [pc, #20]	@ (80014a4 <print+0x38>)
 8001490:	f009 f86c 	bl	800a56c <HAL_UART_Transmit>

}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	0800c498 	.word	0x0800c498
 80014a0:	24000540 	.word	0x24000540
 80014a4:	240003e4 	.word	0x240003e4

080014a8 <printValue>:

void printValue(int value){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	4909      	ldr	r1, [pc, #36]	@ (80014d8 <printValue+0x30>)
 80014b4:	4809      	ldr	r0, [pc, #36]	@ (80014dc <printValue+0x34>)
 80014b6:	f00a fa77 	bl	800b9a8 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 80014ba:	4808      	ldr	r0, [pc, #32]	@ (80014dc <printValue+0x34>)
 80014bc:	f7fe ff28 	bl	8000310 <strlen>
 80014c0:	4603      	mov	r3, r0
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	f04f 33ff 	mov.w	r3, #4294967295
 80014c8:	4904      	ldr	r1, [pc, #16]	@ (80014dc <printValue+0x34>)
 80014ca:	4805      	ldr	r0, [pc, #20]	@ (80014e0 <printValue+0x38>)
 80014cc:	f009 f84e 	bl	800a56c <HAL_UART_Transmit>

}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	0800c4a0 	.word	0x0800c4a0
 80014dc:	24000540 	.word	0x24000540
 80014e0:	240003e4 	.word	0x240003e4

080014e4 <printHex>:

void printHex(uint8_t value){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
	sprintf(uart_msg, "%02X \n\r", value);
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4909      	ldr	r1, [pc, #36]	@ (8001518 <printHex+0x34>)
 80014f4:	4809      	ldr	r0, [pc, #36]	@ (800151c <printHex+0x38>)
 80014f6:	f00a fa57 	bl	800b9a8 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 80014fa:	4808      	ldr	r0, [pc, #32]	@ (800151c <printHex+0x38>)
 80014fc:	f7fe ff08 	bl	8000310 <strlen>
 8001500:	4603      	mov	r3, r0
 8001502:	b29a      	uxth	r2, r3
 8001504:	f04f 33ff 	mov.w	r3, #4294967295
 8001508:	4904      	ldr	r1, [pc, #16]	@ (800151c <printHex+0x38>)
 800150a:	4805      	ldr	r0, [pc, #20]	@ (8001520 <printHex+0x3c>)
 800150c:	f009 f82e 	bl	800a56c <HAL_UART_Transmit>
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	0800c4a8 	.word	0x0800c4a8
 800151c:	24000540 	.word	0x24000540
 8001520:	240003e4 	.word	0x240003e4

08001524 <ADC1_Select_SF>:
	{
	  Error_Handler();
	}
}

void ADC1_Select_SF (void){
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	@ 0x28
 8001528:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	2224      	movs	r2, #36	@ 0x24
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f00a fa59 	bl	800b9e8 <memset>
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	sConfig.Channel = ADC_CHANNEL_2;
 8001536:	4b0d      	ldr	r3, [pc, #52]	@ (800156c <ADC1_Select_SF+0x48>)
 8001538:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800153a:	2306      	movs	r3, #6
 800153c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLE_5;
 800153e:	2301      	movs	r3, #1
 8001540:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001542:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001546:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001548:	2304      	movs	r3, #4
 800154a:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	4619      	mov	r1, r3
 8001554:	4806      	ldr	r0, [pc, #24]	@ (8001570 <ADC1_Select_SF+0x4c>)
 8001556:	f001 fcdb 	bl	8002f10 <HAL_ADC_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <ADC1_Select_SF+0x40>
	{
	  Error_Handler();
 8001560:	f000 f8c4 	bl	80016ec <Error_Handler>
	}
}
 8001564:	bf00      	nop
 8001566:	3728      	adds	r7, #40	@ 0x28
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	08600004 	.word	0x08600004
 8001570:	24000098 	.word	0x24000098

08001574 <HAL_FDCAN_RxFifo0Callback>:
	  Error_Handler();
	}
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d021      	beq.n	80015cc <HAL_FDCAN_RxFifo0Callback+0x58>
  {
    /* Retreive Rx messages from RX FIFO1 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Acu, RxData_Acu) == HAL_OK)
 8001588:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <HAL_FDCAN_RxFifo0Callback+0x60>)
 800158a:	4a13      	ldr	r2, [pc, #76]	@ (80015d8 <HAL_FDCAN_RxFifo0Callback+0x64>)
 800158c:	2140      	movs	r1, #64	@ 0x40
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f003 f974 	bl	800487c <HAL_FDCAN_GetRxMessage>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10e      	bne.n	80015b8 <HAL_FDCAN_RxFifo0Callback+0x44>
    {
		switch (RxHeader_Acu.Identifier){
 800159a:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <HAL_FDCAN_RxFifo0Callback+0x64>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b20      	cmp	r3, #32
 80015a0:	d10a      	bne.n	80015b8 <HAL_FDCAN_RxFifo0Callback+0x44>
			case 0x20://ID_ack_precarga:
				if(RxData_Acu[0] == 0){
 80015a2:	4b0c      	ldr	r3, [pc, #48]	@ (80015d4 <HAL_FDCAN_RxFifo0Callback+0x60>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d105      	bne.n	80015b6 <HAL_FDCAN_RxFifo0Callback+0x42>
					precarga_inv = 1;
 80015aa:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <HAL_FDCAN_RxFifo0Callback+0x68>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	601a      	str	r2, [r3, #0]
					#if DEBUG
					print("CAN_ACU: Precarga correcta");
 80015b0:	480b      	ldr	r0, [pc, #44]	@ (80015e0 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 80015b2:	f7ff ff5b 	bl	800146c <print>
					#endif
				}
				break;
 80015b6:	bf00      	nop
		}

    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80015b8:	2200      	movs	r2, #0
 80015ba:	2101      	movs	r1, #1
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f003 fac9 	bl	8004b54 <HAL_FDCAN_ActivateNotification>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <HAL_FDCAN_RxFifo0Callback+0x58>
    {
      /* Notification Error */
      Error_Handler();
 80015c8:	f000 f890 	bl	80016ec <Error_Handler>
    }
  }
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	24000528 	.word	0x24000528
 80015d8:	240004e8 	.word	0x240004e8
 80015dc:	2400008c 	.word	0x2400008c
 80015e0:	0800c4b0 	.word	0x0800c4b0

080015e4 <HAL_TIM_PeriodElapsedCallback>:
	return torque_real;
}



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	if(htim == &htim16){
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a35      	ldr	r2, [pc, #212]	@ (80016c4 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d163      	bne.n	80016bc <HAL_TIM_PeriodElapsedCallback+0xd8>
		 // ---------- CONTROL DEL INVERSOR ----------
		if(state == 4){
 80015f4:	4b34      	ldr	r3, [pc, #208]	@ (80016c8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	d11c      	bne.n	8001636 <HAL_TIM_PeriodElapsedCallback+0x52>
			TxHeader_Inv.Identifier = 0x362;
 80015fc:	4b33      	ldr	r3, [pc, #204]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80015fe:	f240 3262 	movw	r2, #866	@ 0x362
 8001602:	601a      	str	r2, [r3, #0]
			TxHeader_Inv.DataLength = 4;
 8001604:	4b31      	ldr	r3, [pc, #196]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001606:	2204      	movs	r2, #4
 8001608:	60da      	str	r2, [r3, #12]

			real_torque = 0;
 800160a:	4b31      	ldr	r3, [pc, #196]	@ (80016d0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800160c:	2200      	movs	r2, #0
 800160e:	801a      	strh	r2, [r3, #0]

			TxData_Inv[0] = 0x0;
 8001610:	4b30      	ldr	r3, [pc, #192]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001616:	4b2f      	ldr	r3, [pc, #188]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001618:	2200      	movs	r2, #0
 800161a:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = real_torque;
 800161c:	4b2c      	ldr	r3, [pc, #176]	@ (80016d0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4b2c      	ldr	r3, [pc, #176]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001624:	709a      	strb	r2, [r3, #2]
			TxData_Inv[3] = 0x0;
 8001626:	4b2b      	ldr	r3, [pc, #172]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001628:	2200      	movs	r2, #0
 800162a:	70da      	strb	r2, [r3, #3]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 800162c:	4a29      	ldr	r2, [pc, #164]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800162e:	4927      	ldr	r1, [pc, #156]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001630:	4829      	ldr	r0, [pc, #164]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001632:	f003 f8c8 	bl	80047c6 <HAL_FDCAN_AddMessageToTxFifoQ>
		}
		if(state == 6){
 8001636:	4b24      	ldr	r3, [pc, #144]	@ (80016c8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b06      	cmp	r3, #6
 800163c:	d132      	bne.n	80016a4 <HAL_TIM_PeriodElapsedCallback+0xc0>
			print("state: torque");
 800163e:	4827      	ldr	r0, [pc, #156]	@ (80016dc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001640:	f7ff ff14 	bl	800146c <print>

			//Estado TORQUE inversor
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001644:	4b26      	ldr	r3, [pc, #152]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a20      	ldr	r2, [pc, #128]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800164a:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 800164c:	4b1f      	ldr	r3, [pc, #124]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800164e:	2203      	movs	r2, #3
 8001650:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001652:	4b1e      	ldr	r3, [pc, #120]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001654:	2200      	movs	r2, #0
 8001656:	605a      	str	r2, [r3, #4]


			TxData_Inv[0] = 0x0;
 8001658:	4b1e      	ldr	r3, [pc, #120]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 800165e:	4b1d      	ldr	r3, [pc, #116]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001660:	2200      	movs	r2, #0
 8001662:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x6;
 8001664:	4b1b      	ldr	r3, [pc, #108]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001666:	2206      	movs	r2, #6
 8001668:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 800166a:	4a1a      	ldr	r2, [pc, #104]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800166c:	4917      	ldr	r1, [pc, #92]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800166e:	481a      	ldr	r0, [pc, #104]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001670:	f003 f8a9 	bl	80047c6 <HAL_FDCAN_AddMessageToTxFifoQ>

			//Request TORQUE inversor
			TxHeader_Inv.Identifier = 0x362;
 8001674:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001676:	f240 3262 	movw	r2, #866	@ 0x362
 800167a:	601a      	str	r2, [r3, #0]
			TxHeader_Inv.DataLength = 4;
 800167c:	4b13      	ldr	r3, [pc, #76]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800167e:	2204      	movs	r2, #4
 8001680:	60da      	str	r2, [r3, #12]

			//real_torque = setTorque();

			TxData_Inv[0] = 0x0;
 8001682:	4b14      	ldr	r3, [pc, #80]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001688:	4b12      	ldr	r3, [pc, #72]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800168a:	2200      	movs	r2, #0
 800168c:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0xFF; //torque 0 - 240
 800168e:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001690:	22ff      	movs	r2, #255	@ 0xff
 8001692:	709a      	strb	r2, [r3, #2]
			TxData_Inv[3] = 0xFF; //negative torque
 8001694:	4b0f      	ldr	r3, [pc, #60]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001696:	22ff      	movs	r2, #255	@ 0xff
 8001698:	70da      	strb	r2, [r3, #3]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 800169a:	4a0e      	ldr	r2, [pc, #56]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800169c:	490b      	ldr	r1, [pc, #44]	@ (80016cc <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800169e:	480e      	ldr	r0, [pc, #56]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80016a0:	f003 f891 	bl	80047c6 <HAL_FDCAN_AddMessageToTxFifoQ>
		}
		if(state == 10){
 80016a4:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b0a      	cmp	r3, #10
 80016aa:	d107      	bne.n	80016bc <HAL_TIM_PeriodElapsedCallback+0xd8>
			print("state: soft fault");
 80016ac:	480d      	ldr	r0, [pc, #52]	@ (80016e4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80016ae:	f7ff fedd 	bl	800146c <print>
			printValue(error);
 80016b2:	4b0d      	ldr	r3, [pc, #52]	@ (80016e8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fef6 	bl	80014a8 <printValue>
		}


	}
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	24000304 	.word	0x24000304
 80016c8:	2400053e 	.word	0x2400053e
 80016cc:	24000478 	.word	0x24000478
 80016d0:	2400053c 	.word	0x2400053c
 80016d4:	24000510 	.word	0x24000510
 80016d8:	24000178 	.word	0x24000178
 80016dc:	0800c564 	.word	0x0800c564
 80016e0:	24000008 	.word	0x24000008
 80016e4:	0800c574 	.word	0x0800c574
 80016e8:	240005a4 	.word	0x240005a4

080016ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f0:	b672      	cpsid	i
}
 80016f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <Error_Handler+0x8>

080016f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001728 <HAL_MspInit+0x30>)
 8001700:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001704:	4a08      	ldr	r2, [pc, #32]	@ (8001728 <HAL_MspInit+0x30>)
 8001706:	f043 0302 	orr.w	r3, r3, #2
 800170a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800170e:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <HAL_MspInit+0x30>)
 8001710:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	58024400 	.word	0x58024400

0800172c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b090      	sub	sp, #64	@ 0x40
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a70      	ldr	r2, [pc, #448]	@ (800190c <HAL_ADC_MspInit+0x1e0>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d16a      	bne.n	8001824 <HAL_ADC_MspInit+0xf8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800174e:	4b70      	ldr	r3, [pc, #448]	@ (8001910 <HAL_ADC_MspInit+0x1e4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	3301      	adds	r3, #1
 8001754:	4a6e      	ldr	r2, [pc, #440]	@ (8001910 <HAL_ADC_MspInit+0x1e4>)
 8001756:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001758:	4b6d      	ldr	r3, [pc, #436]	@ (8001910 <HAL_ADC_MspInit+0x1e4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d10e      	bne.n	800177e <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001760:	4b6c      	ldr	r3, [pc, #432]	@ (8001914 <HAL_ADC_MspInit+0x1e8>)
 8001762:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001766:	4a6b      	ldr	r2, [pc, #428]	@ (8001914 <HAL_ADC_MspInit+0x1e8>)
 8001768:	f043 0320 	orr.w	r3, r3, #32
 800176c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001770:	4b68      	ldr	r3, [pc, #416]	@ (8001914 <HAL_ADC_MspInit+0x1e8>)
 8001772:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001776:	f003 0320 	and.w	r3, r3, #32
 800177a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800177c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800177e:	4b65      	ldr	r3, [pc, #404]	@ (8001914 <HAL_ADC_MspInit+0x1e8>)
 8001780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001784:	4a63      	ldr	r2, [pc, #396]	@ (8001914 <HAL_ADC_MspInit+0x1e8>)
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800178e:	4b61      	ldr	r3, [pc, #388]	@ (8001914 <HAL_ADC_MspInit+0x1e8>)
 8001790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	627b      	str	r3, [r7, #36]	@ 0x24
 800179a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800179c:	4b5d      	ldr	r3, [pc, #372]	@ (8001914 <HAL_ADC_MspInit+0x1e8>)
 800179e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a2:	4a5c      	ldr	r2, [pc, #368]	@ (8001914 <HAL_ADC_MspInit+0x1e8>)
 80017a4:	f043 0302 	orr.w	r3, r3, #2
 80017a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ac:	4b59      	ldr	r3, [pc, #356]	@ (8001914 <HAL_ADC_MspInit+0x1e8>)
 80017ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	623b      	str	r3, [r7, #32]
 80017b8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ba:	4b56      	ldr	r3, [pc, #344]	@ (8001914 <HAL_ADC_MspInit+0x1e8>)
 80017bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017c0:	4a54      	ldr	r2, [pc, #336]	@ (8001914 <HAL_ADC_MspInit+0x1e8>)
 80017c2:	f043 0320 	orr.w	r3, r3, #32
 80017c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ca:	4b52      	ldr	r3, [pc, #328]	@ (8001914 <HAL_ADC_MspInit+0x1e8>)
 80017cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017d0:	f003 0320 	and.w	r3, r3, #32
 80017d4:	61fb      	str	r3, [r7, #28]
 80017d6:	69fb      	ldr	r3, [r7, #28]
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = S_APPS_1_Pin|SUSPENSION_RL_Pin;
 80017d8:	2330      	movs	r3, #48	@ 0x30
 80017da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017dc:	2303      	movs	r3, #3
 80017de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017e8:	4619      	mov	r1, r3
 80017ea:	484b      	ldr	r0, [pc, #300]	@ (8001918 <HAL_ADC_MspInit+0x1ec>)
 80017ec:	f003 ff28 	bl	8005640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin|S_APPS_2_Pin;
 80017f0:	2303      	movs	r3, #3
 80017f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f4:	2303      	movs	r3, #3
 80017f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001800:	4619      	mov	r1, r3
 8001802:	4846      	ldr	r0, [pc, #280]	@ (800191c <HAL_ADC_MspInit+0x1f0>)
 8001804:	f003 ff1c 	bl	8005640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_FRENO_Pin;
 8001808:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800180c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800180e:	2303      	movs	r3, #3
 8001810:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(S_FRENO_GPIO_Port, &GPIO_InitStruct);
 8001816:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800181a:	4619      	mov	r1, r3
 800181c:	4840      	ldr	r0, [pc, #256]	@ (8001920 <HAL_ADC_MspInit+0x1f4>)
 800181e:	f003 ff0f 	bl	8005640 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001822:	e06e      	b.n	8001902 <HAL_ADC_MspInit+0x1d6>
  else if(hadc->Instance==ADC2)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a3e      	ldr	r2, [pc, #248]	@ (8001924 <HAL_ADC_MspInit+0x1f8>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d169      	bne.n	8001902 <HAL_ADC_MspInit+0x1d6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800182e:	4b38      	ldr	r3, [pc, #224]	@ (8001910 <HAL_ADC_MspInit+0x1e4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	3301      	adds	r3, #1
 8001834:	4a36      	ldr	r2, [pc, #216]	@ (8001910 <HAL_ADC_MspInit+0x1e4>)
 8001836:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001838:	4b35      	ldr	r3, [pc, #212]	@ (8001910 <HAL_ADC_MspInit+0x1e4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d10e      	bne.n	800185e <HAL_ADC_MspInit+0x132>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001840:	4b34      	ldr	r3, [pc, #208]	@ (8001914 <HAL_ADC_MspInit+0x1e8>)
 8001842:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001846:	4a33      	ldr	r2, [pc, #204]	@ (8001914 <HAL_ADC_MspInit+0x1e8>)
 8001848:	f043 0320 	orr.w	r3, r3, #32
 800184c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001850:	4b30      	ldr	r3, [pc, #192]	@ (8001914 <HAL_ADC_MspInit+0x1e8>)
 8001852:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001856:	f003 0320 	and.w	r3, r3, #32
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800185e:	4b2d      	ldr	r3, [pc, #180]	@ (8001914 <HAL_ADC_MspInit+0x1e8>)
 8001860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001864:	4a2b      	ldr	r2, [pc, #172]	@ (8001914 <HAL_ADC_MspInit+0x1e8>)
 8001866:	f043 0304 	orr.w	r3, r3, #4
 800186a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800186e:	4b29      	ldr	r3, [pc, #164]	@ (8001914 <HAL_ADC_MspInit+0x1e8>)
 8001870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187c:	4b25      	ldr	r3, [pc, #148]	@ (8001914 <HAL_ADC_MspInit+0x1e8>)
 800187e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001882:	4a24      	ldr	r2, [pc, #144]	@ (8001914 <HAL_ADC_MspInit+0x1e8>)
 8001884:	f043 0302 	orr.w	r3, r3, #2
 8001888:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800188c:	4b21      	ldr	r3, [pc, #132]	@ (8001914 <HAL_ADC_MspInit+0x1e8>)
 800188e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800189a:	4b1e      	ldr	r3, [pc, #120]	@ (8001914 <HAL_ADC_MspInit+0x1e8>)
 800189c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001914 <HAL_ADC_MspInit+0x1e8>)
 80018a2:	f043 0320 	orr.w	r3, r3, #32
 80018a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001914 <HAL_ADC_MspInit+0x1e8>)
 80018ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018b0:	f003 0320 	and.w	r3, r3, #32
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SUSPENSION_RL_Pin;
 80018b8:	2320      	movs	r3, #32
 80018ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018bc:	2303      	movs	r3, #3
 80018be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RL_GPIO_Port, &GPIO_InitStruct);
 80018c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018c8:	4619      	mov	r1, r3
 80018ca:	4813      	ldr	r0, [pc, #76]	@ (8001918 <HAL_ADC_MspInit+0x1ec>)
 80018cc:	f003 feb8 	bl	8005640 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin;
 80018d0:	2301      	movs	r3, #1
 80018d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018d4:	2303      	movs	r3, #3
 80018d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RR_GPIO_Port, &GPIO_InitStruct);
 80018dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018e0:	4619      	mov	r1, r3
 80018e2:	480e      	ldr	r0, [pc, #56]	@ (800191c <HAL_ADC_MspInit+0x1f0>)
 80018e4:	f003 feac 	bl	8005640 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_FL_Pin|SUSPENSION_FR_Pin;
 80018e8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80018ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ee:	2303      	movs	r3, #3
 80018f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018fa:	4619      	mov	r1, r3
 80018fc:	4808      	ldr	r0, [pc, #32]	@ (8001920 <HAL_ADC_MspInit+0x1f4>)
 80018fe:	f003 fe9f 	bl	8005640 <HAL_GPIO_Init>
}
 8001902:	bf00      	nop
 8001904:	3740      	adds	r7, #64	@ 0x40
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40022000 	.word	0x40022000
 8001910:	240005a8 	.word	0x240005a8
 8001914:	58024400 	.word	0x58024400
 8001918:	58020800 	.word	0x58020800
 800191c:	58020400 	.word	0x58020400
 8001920:	58021400 	.word	0x58021400
 8001924:	40022100 	.word	0x40022100

08001928 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b0ba      	sub	sp, #232	@ 0xe8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001940:	f107 0318 	add.w	r3, r7, #24
 8001944:	22b8      	movs	r2, #184	@ 0xb8
 8001946:	2100      	movs	r1, #0
 8001948:	4618      	mov	r0, r3
 800194a:	f00a f84d 	bl	800b9e8 <memset>
  if(hfdcan->Instance==FDCAN1)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a62      	ldr	r2, [pc, #392]	@ (8001adc <HAL_FDCAN_MspInit+0x1b4>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d157      	bne.n	8001a08 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001958:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800195c:	f04f 0300 	mov.w	r3, #0
 8001960:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001964:	2300      	movs	r3, #0
 8001966:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800196a:	f107 0318 	add.w	r3, r7, #24
 800196e:	4618      	mov	r0, r3
 8001970:	f004 ffe0 	bl	8006934 <HAL_RCCEx_PeriphCLKConfig>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 800197a:	f7ff feb7 	bl	80016ec <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800197e:	4b58      	ldr	r3, [pc, #352]	@ (8001ae0 <HAL_FDCAN_MspInit+0x1b8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	3301      	adds	r3, #1
 8001984:	4a56      	ldr	r2, [pc, #344]	@ (8001ae0 <HAL_FDCAN_MspInit+0x1b8>)
 8001986:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001988:	4b55      	ldr	r3, [pc, #340]	@ (8001ae0 <HAL_FDCAN_MspInit+0x1b8>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d10e      	bne.n	80019ae <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001990:	4b54      	ldr	r3, [pc, #336]	@ (8001ae4 <HAL_FDCAN_MspInit+0x1bc>)
 8001992:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001996:	4a53      	ldr	r2, [pc, #332]	@ (8001ae4 <HAL_FDCAN_MspInit+0x1bc>)
 8001998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800199c:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80019a0:	4b50      	ldr	r3, [pc, #320]	@ (8001ae4 <HAL_FDCAN_MspInit+0x1bc>)
 80019a2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80019a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ae:	4b4d      	ldr	r3, [pc, #308]	@ (8001ae4 <HAL_FDCAN_MspInit+0x1bc>)
 80019b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019b4:	4a4b      	ldr	r2, [pc, #300]	@ (8001ae4 <HAL_FDCAN_MspInit+0x1bc>)
 80019b6:	f043 0308 	orr.w	r3, r3, #8
 80019ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019be:	4b49      	ldr	r3, [pc, #292]	@ (8001ae4 <HAL_FDCAN_MspInit+0x1bc>)
 80019c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019cc:	2303      	movs	r3, #3
 80019ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80019e4:	2309      	movs	r3, #9
 80019e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ea:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019ee:	4619      	mov	r1, r3
 80019f0:	483d      	ldr	r0, [pc, #244]	@ (8001ae8 <HAL_FDCAN_MspInit+0x1c0>)
 80019f2:	f003 fe25 	bl	8005640 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2100      	movs	r1, #0
 80019fa:	2013      	movs	r0, #19
 80019fc:	f002 fc2f 	bl	800425e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001a00:	2013      	movs	r0, #19
 8001a02:	f002 fc46 	bl	8004292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001a06:	e064      	b.n	8001ad2 <HAL_FDCAN_MspInit+0x1aa>
  else if(hfdcan->Instance==FDCAN2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a37      	ldr	r2, [pc, #220]	@ (8001aec <HAL_FDCAN_MspInit+0x1c4>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d15f      	bne.n	8001ad2 <HAL_FDCAN_MspInit+0x1aa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001a12:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a24:	f107 0318 	add.w	r3, r7, #24
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f004 ff83 	bl	8006934 <HAL_RCCEx_PeriphCLKConfig>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 8001a34:	f7ff fe5a 	bl	80016ec <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001a38:	4b29      	ldr	r3, [pc, #164]	@ (8001ae0 <HAL_FDCAN_MspInit+0x1b8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	4a28      	ldr	r2, [pc, #160]	@ (8001ae0 <HAL_FDCAN_MspInit+0x1b8>)
 8001a40:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001a42:	4b27      	ldr	r3, [pc, #156]	@ (8001ae0 <HAL_FDCAN_MspInit+0x1b8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d10e      	bne.n	8001a68 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001a4a:	4b26      	ldr	r3, [pc, #152]	@ (8001ae4 <HAL_FDCAN_MspInit+0x1bc>)
 8001a4c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001a50:	4a24      	ldr	r2, [pc, #144]	@ (8001ae4 <HAL_FDCAN_MspInit+0x1bc>)
 8001a52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a56:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001a5a:	4b22      	ldr	r3, [pc, #136]	@ (8001ae4 <HAL_FDCAN_MspInit+0x1bc>)
 8001a5c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a68:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae4 <HAL_FDCAN_MspInit+0x1bc>)
 8001a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a6e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ae4 <HAL_FDCAN_MspInit+0x1bc>)
 8001a70:	f043 0302 	orr.w	r3, r3, #2
 8001a74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae4 <HAL_FDCAN_MspInit+0x1bc>)
 8001a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a86:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001aa0:	2309      	movs	r3, #9
 8001aa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4810      	ldr	r0, [pc, #64]	@ (8001af0 <HAL_FDCAN_MspInit+0x1c8>)
 8001aae:	f003 fdc7 	bl	8005640 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2014      	movs	r0, #20
 8001ab8:	f002 fbd1 	bl	800425e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001abc:	2014      	movs	r0, #20
 8001abe:	f002 fbe8 	bl	8004292 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 0, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2016      	movs	r0, #22
 8001ac8:	f002 fbc9 	bl	800425e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8001acc:	2016      	movs	r0, #22
 8001ace:	f002 fbe0 	bl	8004292 <HAL_NVIC_EnableIRQ>
}
 8001ad2:	bf00      	nop
 8001ad4:	37e8      	adds	r7, #232	@ 0xe8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	4000a000 	.word	0x4000a000
 8001ae0:	240005ac 	.word	0x240005ac
 8001ae4:	58024400 	.word	0x58024400
 8001ae8:	58020c00 	.word	0x58020c00
 8001aec:	4000a400 	.word	0x4000a400
 8001af0:	58020400 	.word	0x58020400

08001af4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a19      	ldr	r2, [pc, #100]	@ (8001b68 <HAL_TIM_Base_MspInit+0x74>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d10f      	bne.n	8001b26 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b06:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <HAL_TIM_Base_MspInit+0x78>)
 8001b08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b0c:	4a17      	ldr	r2, [pc, #92]	@ (8001b6c <HAL_TIM_Base_MspInit+0x78>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b16:	4b15      	ldr	r3, [pc, #84]	@ (8001b6c <HAL_TIM_Base_MspInit+0x78>)
 8001b18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001b24:	e01b      	b.n	8001b5e <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a11      	ldr	r2, [pc, #68]	@ (8001b70 <HAL_TIM_Base_MspInit+0x7c>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d116      	bne.n	8001b5e <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001b30:	4b0e      	ldr	r3, [pc, #56]	@ (8001b6c <HAL_TIM_Base_MspInit+0x78>)
 8001b32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b36:	4a0d      	ldr	r2, [pc, #52]	@ (8001b6c <HAL_TIM_Base_MspInit+0x78>)
 8001b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b3c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b40:	4b0a      	ldr	r3, [pc, #40]	@ (8001b6c <HAL_TIM_Base_MspInit+0x78>)
 8001b42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2100      	movs	r1, #0
 8001b52:	2075      	movs	r0, #117	@ 0x75
 8001b54:	f002 fb83 	bl	800425e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001b58:	2075      	movs	r0, #117	@ 0x75
 8001b5a:	f002 fb9a 	bl	8004292 <HAL_NVIC_EnableIRQ>
}
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40010000 	.word	0x40010000
 8001b6c:	58024400 	.word	0x58024400
 8001b70:	40014400 	.word	0x40014400

08001b74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 030c 	add.w	r3, r7, #12
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a13      	ldr	r2, [pc, #76]	@ (8001be0 <HAL_TIM_MspPostInit+0x6c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d11f      	bne.n	8001bd6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b96:	4b13      	ldr	r3, [pc, #76]	@ (8001be4 <HAL_TIM_MspPostInit+0x70>)
 8001b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b9c:	4a11      	ldr	r2, [pc, #68]	@ (8001be4 <HAL_TIM_MspPostInit+0x70>)
 8001b9e:	f043 0310 	orr.w	r3, r3, #16
 8001ba2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8001be4 <HAL_TIM_MspPostInit+0x70>)
 8001ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bac:	f003 0310 	and.w	r3, r3, #16
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_FAN1_Pin|PWM_FAN2_Pin;
 8001bb4:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001bb8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bca:	f107 030c 	add.w	r3, r7, #12
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4805      	ldr	r0, [pc, #20]	@ (8001be8 <HAL_TIM_MspPostInit+0x74>)
 8001bd2:	f003 fd35 	bl	8005640 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001bd6:	bf00      	nop
 8001bd8:	3720      	adds	r7, #32
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40010000 	.word	0x40010000
 8001be4:	58024400 	.word	0x58024400
 8001be8:	58021000 	.word	0x58021000

08001bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b0ba      	sub	sp, #232	@ 0xe8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c04:	f107 0318 	add.w	r3, r7, #24
 8001c08:	22b8      	movs	r2, #184	@ 0xb8
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f009 feeb 	bl	800b9e8 <memset>
  if(huart->Instance==USART1)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a4d      	ldr	r2, [pc, #308]	@ (8001d4c <HAL_UART_MspInit+0x160>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d147      	bne.n	8001cac <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c1c:	f04f 0201 	mov.w	r2, #1
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c2e:	f107 0318 	add.w	r3, r7, #24
 8001c32:	4618      	mov	r0, r3
 8001c34:	f004 fe7e 	bl	8006934 <HAL_RCCEx_PeriphCLKConfig>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001c3e:	f7ff fd55 	bl	80016ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c42:	4b43      	ldr	r3, [pc, #268]	@ (8001d50 <HAL_UART_MspInit+0x164>)
 8001c44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c48:	4a41      	ldr	r2, [pc, #260]	@ (8001d50 <HAL_UART_MspInit+0x164>)
 8001c4a:	f043 0310 	orr.w	r3, r3, #16
 8001c4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c52:	4b3f      	ldr	r3, [pc, #252]	@ (8001d50 <HAL_UART_MspInit+0x164>)
 8001c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c58:	f003 0310 	and.w	r3, r3, #16
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c60:	4b3b      	ldr	r3, [pc, #236]	@ (8001d50 <HAL_UART_MspInit+0x164>)
 8001c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c66:	4a3a      	ldr	r2, [pc, #232]	@ (8001d50 <HAL_UART_MspInit+0x164>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c70:	4b37      	ldr	r3, [pc, #220]	@ (8001d50 <HAL_UART_MspInit+0x164>)
 8001c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_GPS_Pin|USART1_RX_GPS_Pin;
 8001c7e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001c82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c86:	2302      	movs	r3, #2
 8001c88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c98:	2307      	movs	r3, #7
 8001c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	482b      	ldr	r0, [pc, #172]	@ (8001d54 <HAL_UART_MspInit+0x168>)
 8001ca6:	f003 fccb 	bl	8005640 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001caa:	e04a      	b.n	8001d42 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a29      	ldr	r2, [pc, #164]	@ (8001d58 <HAL_UART_MspInit+0x16c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d145      	bne.n	8001d42 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cb6:	f04f 0202 	mov.w	r2, #2
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cc8:	f107 0318 	add.w	r3, r7, #24
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f004 fe31 	bl	8006934 <HAL_RCCEx_PeriphCLKConfig>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001cd8:	f7ff fd08 	bl	80016ec <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8001d50 <HAL_UART_MspInit+0x164>)
 8001cde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ce2:	4a1b      	ldr	r2, [pc, #108]	@ (8001d50 <HAL_UART_MspInit+0x164>)
 8001ce4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ce8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cec:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <HAL_UART_MspInit+0x164>)
 8001cee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfa:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <HAL_UART_MspInit+0x164>)
 8001cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d00:	4a13      	ldr	r2, [pc, #76]	@ (8001d50 <HAL_UART_MspInit+0x164>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d0a:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <HAL_UART_MspInit+0x164>)
 8001d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d18:	230c      	movs	r3, #12
 8001d1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d30:	2307      	movs	r3, #7
 8001d32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d36:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4805      	ldr	r0, [pc, #20]	@ (8001d54 <HAL_UART_MspInit+0x168>)
 8001d3e:	f003 fc7f 	bl	8005640 <HAL_GPIO_Init>
}
 8001d42:	bf00      	nop
 8001d44:	37e8      	adds	r7, #232	@ 0xe8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40011000 	.word	0x40011000
 8001d50:	58024400 	.word	0x58024400
 8001d54:	58020000 	.word	0x58020000
 8001d58:	40004400 	.word	0x40004400

08001d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <NMI_Handler+0x4>

08001d64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <HardFault_Handler+0x4>

08001d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <MemManage_Handler+0x4>

08001d74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d78:	bf00      	nop
 8001d7a:	e7fd      	b.n	8001d78 <BusFault_Handler+0x4>

08001d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <UsageFault_Handler+0x4>

08001d84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db2:	f000 f975 	bl	80020a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
	...

08001dbc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001dc0:	4802      	ldr	r0, [pc, #8]	@ (8001dcc <FDCAN1_IT0_IRQHandler+0x10>)
 8001dc2:	f002 ff41 	bl	8004c48 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	24000178 	.word	0x24000178

08001dd0 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8001dd4:	4802      	ldr	r0, [pc, #8]	@ (8001de0 <FDCAN2_IT0_IRQHandler+0x10>)
 8001dd6:	f002 ff37 	bl	8004c48 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	24000218 	.word	0x24000218

08001de4 <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8001de8:	4802      	ldr	r0, [pc, #8]	@ (8001df4 <FDCAN2_IT1_IRQHandler+0x10>)
 8001dea:	f002 ff2d 	bl	8004c48 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	24000218 	.word	0x24000218

08001df8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001dfc:	4802      	ldr	r0, [pc, #8]	@ (8001e08 <TIM16_IRQHandler+0x10>)
 8001dfe:	f007 fabe 	bl	800937e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	24000304 	.word	0x24000304

08001e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e14:	4a14      	ldr	r2, [pc, #80]	@ (8001e68 <_sbrk+0x5c>)
 8001e16:	4b15      	ldr	r3, [pc, #84]	@ (8001e6c <_sbrk+0x60>)
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e20:	4b13      	ldr	r3, [pc, #76]	@ (8001e70 <_sbrk+0x64>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d102      	bne.n	8001e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e28:	4b11      	ldr	r3, [pc, #68]	@ (8001e70 <_sbrk+0x64>)
 8001e2a:	4a12      	ldr	r2, [pc, #72]	@ (8001e74 <_sbrk+0x68>)
 8001e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e2e:	4b10      	ldr	r3, [pc, #64]	@ (8001e70 <_sbrk+0x64>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d207      	bcs.n	8001e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e3c:	f009 fddc 	bl	800b9f8 <__errno>
 8001e40:	4603      	mov	r3, r0
 8001e42:	220c      	movs	r2, #12
 8001e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4a:	e009      	b.n	8001e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e4c:	4b08      	ldr	r3, [pc, #32]	@ (8001e70 <_sbrk+0x64>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e52:	4b07      	ldr	r3, [pc, #28]	@ (8001e70 <_sbrk+0x64>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	4a05      	ldr	r2, [pc, #20]	@ (8001e70 <_sbrk+0x64>)
 8001e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	24050000 	.word	0x24050000
 8001e6c:	00000400 	.word	0x00000400
 8001e70:	240005b0 	.word	0x240005b0
 8001e74:	24000700 	.word	0x24000700

08001e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e7c:	4b32      	ldr	r3, [pc, #200]	@ (8001f48 <SystemInit+0xd0>)
 8001e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e82:	4a31      	ldr	r2, [pc, #196]	@ (8001f48 <SystemInit+0xd0>)
 8001e84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e8c:	4b2f      	ldr	r3, [pc, #188]	@ (8001f4c <SystemInit+0xd4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	2b06      	cmp	r3, #6
 8001e96:	d807      	bhi.n	8001ea8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e98:	4b2c      	ldr	r3, [pc, #176]	@ (8001f4c <SystemInit+0xd4>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f023 030f 	bic.w	r3, r3, #15
 8001ea0:	4a2a      	ldr	r2, [pc, #168]	@ (8001f4c <SystemInit+0xd4>)
 8001ea2:	f043 0307 	orr.w	r3, r3, #7
 8001ea6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ea8:	4b29      	ldr	r3, [pc, #164]	@ (8001f50 <SystemInit+0xd8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a28      	ldr	r2, [pc, #160]	@ (8001f50 <SystemInit+0xd8>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001eb4:	4b26      	ldr	r3, [pc, #152]	@ (8001f50 <SystemInit+0xd8>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001eba:	4b25      	ldr	r3, [pc, #148]	@ (8001f50 <SystemInit+0xd8>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	4924      	ldr	r1, [pc, #144]	@ (8001f50 <SystemInit+0xd8>)
 8001ec0:	4b24      	ldr	r3, [pc, #144]	@ (8001f54 <SystemInit+0xdc>)
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ec6:	4b21      	ldr	r3, [pc, #132]	@ (8001f4c <SystemInit+0xd4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d007      	beq.n	8001ee2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f4c <SystemInit+0xd4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 030f 	bic.w	r3, r3, #15
 8001eda:	4a1c      	ldr	r2, [pc, #112]	@ (8001f4c <SystemInit+0xd4>)
 8001edc:	f043 0307 	orr.w	r3, r3, #7
 8001ee0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f50 <SystemInit+0xd8>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ee8:	4b19      	ldr	r3, [pc, #100]	@ (8001f50 <SystemInit+0xd8>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001eee:	4b18      	ldr	r3, [pc, #96]	@ (8001f50 <SystemInit+0xd8>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ef4:	4b16      	ldr	r3, [pc, #88]	@ (8001f50 <SystemInit+0xd8>)
 8001ef6:	4a18      	ldr	r2, [pc, #96]	@ (8001f58 <SystemInit+0xe0>)
 8001ef8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001efa:	4b15      	ldr	r3, [pc, #84]	@ (8001f50 <SystemInit+0xd8>)
 8001efc:	4a17      	ldr	r2, [pc, #92]	@ (8001f5c <SystemInit+0xe4>)
 8001efe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001f00:	4b13      	ldr	r3, [pc, #76]	@ (8001f50 <SystemInit+0xd8>)
 8001f02:	4a17      	ldr	r2, [pc, #92]	@ (8001f60 <SystemInit+0xe8>)
 8001f04:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001f06:	4b12      	ldr	r3, [pc, #72]	@ (8001f50 <SystemInit+0xd8>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001f0c:	4b10      	ldr	r3, [pc, #64]	@ (8001f50 <SystemInit+0xd8>)
 8001f0e:	4a14      	ldr	r2, [pc, #80]	@ (8001f60 <SystemInit+0xe8>)
 8001f10:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001f12:	4b0f      	ldr	r3, [pc, #60]	@ (8001f50 <SystemInit+0xd8>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001f18:	4b0d      	ldr	r3, [pc, #52]	@ (8001f50 <SystemInit+0xd8>)
 8001f1a:	4a11      	ldr	r2, [pc, #68]	@ (8001f60 <SystemInit+0xe8>)
 8001f1c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f50 <SystemInit+0xd8>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f24:	4b0a      	ldr	r3, [pc, #40]	@ (8001f50 <SystemInit+0xd8>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a09      	ldr	r2, [pc, #36]	@ (8001f50 <SystemInit+0xd8>)
 8001f2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f30:	4b07      	ldr	r3, [pc, #28]	@ (8001f50 <SystemInit+0xd8>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f36:	4b0b      	ldr	r3, [pc, #44]	@ (8001f64 <SystemInit+0xec>)
 8001f38:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001f3c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00
 8001f4c:	52002000 	.word	0x52002000
 8001f50:	58024400 	.word	0x58024400
 8001f54:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f58:	02020200 	.word	0x02020200
 8001f5c:	01ff0000 	.word	0x01ff0000
 8001f60:	01010280 	.word	0x01010280
 8001f64:	52004000 	.word	0x52004000

08001f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fa0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f6c:	f7ff ff84 	bl	8001e78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f70:	480c      	ldr	r0, [pc, #48]	@ (8001fa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f72:	490d      	ldr	r1, [pc, #52]	@ (8001fa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f74:	4a0d      	ldr	r2, [pc, #52]	@ (8001fac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f78:	e002      	b.n	8001f80 <LoopCopyDataInit>

08001f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f7e:	3304      	adds	r3, #4

08001f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f84:	d3f9      	bcc.n	8001f7a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f86:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f88:	4c0a      	ldr	r4, [pc, #40]	@ (8001fb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f8c:	e001      	b.n	8001f92 <LoopFillZerobss>

08001f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f90:	3204      	adds	r2, #4

08001f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f94:	d3fb      	bcc.n	8001f8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f96:	f009 fd35 	bl	800ba04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f9a:	f7fe fb89 	bl	80006b0 <main>
  bx  lr
 8001f9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fa0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001fa4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001fa8:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8001fac:	0800c660 	.word	0x0800c660
  ldr r2, =_sbss
 8001fb0:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8001fb4:	24000700 	.word	0x24000700

08001fb8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fb8:	e7fe      	b.n	8001fb8 <ADC3_IRQHandler>
	...

08001fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc2:	2003      	movs	r0, #3
 8001fc4:	f002 f940 	bl	8004248 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001fc8:	f004 fade 	bl	8006588 <HAL_RCC_GetSysClockFreq>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	4b15      	ldr	r3, [pc, #84]	@ (8002024 <HAL_Init+0x68>)
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	0a1b      	lsrs	r3, r3, #8
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	4913      	ldr	r1, [pc, #76]	@ (8002028 <HAL_Init+0x6c>)
 8001fda:	5ccb      	ldrb	r3, [r1, r3]
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8002024 <HAL_Init+0x68>)
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	4a0e      	ldr	r2, [pc, #56]	@ (8002028 <HAL_Init+0x6c>)
 8001ff0:	5cd3      	ldrb	r3, [r2, r3]
 8001ff2:	f003 031f 	and.w	r3, r3, #31
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffc:	4a0b      	ldr	r2, [pc, #44]	@ (800202c <HAL_Init+0x70>)
 8001ffe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002000:	4a0b      	ldr	r2, [pc, #44]	@ (8002030 <HAL_Init+0x74>)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002006:	200f      	movs	r0, #15
 8002008:	f000 f814 	bl	8002034 <HAL_InitTick>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e002      	b.n	800201c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002016:	f7ff fb6f 	bl	80016f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	58024400 	.word	0x58024400
 8002028:	0800c5d4 	.word	0x0800c5d4
 800202c:	24000014 	.word	0x24000014
 8002030:	24000010 	.word	0x24000010

08002034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800203c:	4b15      	ldr	r3, [pc, #84]	@ (8002094 <HAL_InitTick+0x60>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e021      	b.n	800208c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002048:	4b13      	ldr	r3, [pc, #76]	@ (8002098 <HAL_InitTick+0x64>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <HAL_InitTick+0x60>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	4619      	mov	r1, r3
 8002052:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002056:	fbb3 f3f1 	udiv	r3, r3, r1
 800205a:	fbb2 f3f3 	udiv	r3, r2, r3
 800205e:	4618      	mov	r0, r3
 8002060:	f002 f925 	bl	80042ae <HAL_SYSTICK_Config>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e00e      	b.n	800208c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b0f      	cmp	r3, #15
 8002072:	d80a      	bhi.n	800208a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002074:	2200      	movs	r2, #0
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	f04f 30ff 	mov.w	r0, #4294967295
 800207c:	f002 f8ef 	bl	800425e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002080:	4a06      	ldr	r2, [pc, #24]	@ (800209c <HAL_InitTick+0x68>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	e000      	b.n	800208c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	2400001c 	.word	0x2400001c
 8002098:	24000010 	.word	0x24000010
 800209c:	24000018 	.word	0x24000018

080020a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020a4:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <HAL_IncTick+0x20>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <HAL_IncTick+0x24>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4413      	add	r3, r2
 80020b0:	4a04      	ldr	r2, [pc, #16]	@ (80020c4 <HAL_IncTick+0x24>)
 80020b2:	6013      	str	r3, [r2, #0]
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	2400001c 	.word	0x2400001c
 80020c4:	240005b4 	.word	0x240005b4

080020c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return uwTick;
 80020cc:	4b03      	ldr	r3, [pc, #12]	@ (80020dc <HAL_GetTick+0x14>)
 80020ce:	681b      	ldr	r3, [r3, #0]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	240005b4 	.word	0x240005b4

080020e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e8:	f7ff ffee 	bl	80020c8 <HAL_GetTick>
 80020ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f8:	d005      	beq.n	8002106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002124 <HAL_Delay+0x44>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4413      	add	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002106:	bf00      	nop
 8002108:	f7ff ffde 	bl	80020c8 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	429a      	cmp	r2, r3
 8002116:	d8f7      	bhi.n	8002108 <HAL_Delay+0x28>
  {
  }
}
 8002118:	bf00      	nop
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	2400001c 	.word	0x2400001c

08002128 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	431a      	orrs	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	609a      	str	r2, [r3, #8]
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	609a      	str	r2, [r3, #8]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002190:	b480      	push	{r7}
 8002192:	b087      	sub	sp, #28
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
 800219c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	3360      	adds	r3, #96	@ 0x60
 80021a2:	461a      	mov	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4a10      	ldr	r2, [pc, #64]	@ (80021f0 <LL_ADC_SetOffset+0x60>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d10b      	bne.n	80021cc <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80021ca:	e00b      	b.n	80021e4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	430b      	orrs	r3, r1
 80021de:	431a      	orrs	r2, r3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	601a      	str	r2, [r3, #0]
}
 80021e4:	bf00      	nop
 80021e6:	371c      	adds	r7, #28
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	58026000 	.word	0x58026000

080021f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3360      	adds	r3, #96	@ 0x60
 8002202:	461a      	mov	r2, r3
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002214:	4618      	mov	r0, r3
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f003 031f 	and.w	r3, r3, #31
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	fa01 f303 	lsl.w	r3, r1, r3
 8002240:	431a      	orrs	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	611a      	str	r2, [r3, #16]
}
 8002246:	bf00      	nop
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
	...

08002254 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002254:	b480      	push	{r7}
 8002256:	b087      	sub	sp, #28
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4a0c      	ldr	r2, [pc, #48]	@ (8002294 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d00e      	beq.n	8002286 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	3360      	adds	r3, #96	@ 0x60
 800226c:	461a      	mov	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	431a      	orrs	r2, r3
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	601a      	str	r2, [r3, #0]
  }
}
 8002286:	bf00      	nop
 8002288:	371c      	adds	r7, #28
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	58026000 	.word	0x58026000

08002298 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002298:	b480      	push	{r7}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4a0c      	ldr	r2, [pc, #48]	@ (80022d8 <LL_ADC_SetOffsetSaturation+0x40>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d10e      	bne.n	80022ca <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	3360      	adds	r3, #96	@ 0x60
 80022b0:	461a      	mov	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	431a      	orrs	r2, r3
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80022ca:	bf00      	nop
 80022cc:	371c      	adds	r7, #28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	58026000 	.word	0x58026000

080022dc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4a0c      	ldr	r2, [pc, #48]	@ (800231c <LL_ADC_SetOffsetSign+0x40>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d10e      	bne.n	800230e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	3360      	adds	r3, #96	@ 0x60
 80022f4:	461a      	mov	r2, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	431a      	orrs	r2, r3
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800230e:	bf00      	nop
 8002310:	371c      	adds	r7, #28
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	58026000 	.word	0x58026000

08002320 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002320:	b480      	push	{r7}
 8002322:	b087      	sub	sp, #28
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	3360      	adds	r3, #96	@ 0x60
 8002330:	461a      	mov	r2, r3
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4a0c      	ldr	r2, [pc, #48]	@ (8002370 <LL_ADC_SetOffsetState+0x50>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d108      	bne.n	8002354 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	431a      	orrs	r2, r3
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002352:	e007      	b.n	8002364 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	431a      	orrs	r2, r3
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	601a      	str	r2, [r3, #0]
}
 8002364:	bf00      	nop
 8002366:	371c      	adds	r7, #28
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	58026000 	.word	0x58026000

08002374 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002388:	2301      	movs	r3, #1
 800238a:	e000      	b.n	800238e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800239a:	b480      	push	{r7}
 800239c:	b087      	sub	sp, #28
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	3330      	adds	r3, #48	@ 0x30
 80023aa:	461a      	mov	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	0a1b      	lsrs	r3, r3, #8
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	4413      	add	r3, r2
 80023b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	211f      	movs	r1, #31
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	401a      	ands	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	0e9b      	lsrs	r3, r3, #26
 80023d2:	f003 011f 	and.w	r1, r3, #31
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	fa01 f303 	lsl.w	r3, r1, r3
 80023e0:	431a      	orrs	r2, r3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023e6:	bf00      	nop
 80023e8:	371c      	adds	r7, #28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b087      	sub	sp, #28
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	3314      	adds	r3, #20
 8002402:	461a      	mov	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	0e5b      	lsrs	r3, r3, #25
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	f003 0304 	and.w	r3, r3, #4
 800240e:	4413      	add	r3, r2
 8002410:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	0d1b      	lsrs	r3, r3, #20
 800241a:	f003 031f 	and.w	r3, r3, #31
 800241e:	2107      	movs	r1, #7
 8002420:	fa01 f303 	lsl.w	r3, r1, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	401a      	ands	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	0d1b      	lsrs	r3, r3, #20
 800242c:	f003 031f 	and.w	r3, r3, #31
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	fa01 f303 	lsl.w	r3, r1, r3
 8002436:	431a      	orrs	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800243c:	bf00      	nop
 800243e:	371c      	adds	r7, #28
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4a1a      	ldr	r2, [pc, #104]	@ (80024c0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d115      	bne.n	8002488 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002468:	43db      	mvns	r3, r3
 800246a:	401a      	ands	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f003 0318 	and.w	r3, r3, #24
 8002472:	4914      	ldr	r1, [pc, #80]	@ (80024c4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002474:	40d9      	lsrs	r1, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	400b      	ands	r3, r1
 800247a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800247e:	431a      	orrs	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002486:	e014      	b.n	80024b2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002494:	43db      	mvns	r3, r3
 8002496:	401a      	ands	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f003 0318 	and.w	r3, r3, #24
 800249e:	4909      	ldr	r1, [pc, #36]	@ (80024c4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80024a0:	40d9      	lsrs	r1, r3
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	400b      	ands	r3, r1
 80024a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024aa:	431a      	orrs	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80024b2:	bf00      	nop
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	58026000 	.word	0x58026000
 80024c4:	000fffff 	.word	0x000fffff

080024c8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 031f 	and.w	r3, r3, #31
}
 80024d8:	4618      	mov	r0, r3
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	4b04      	ldr	r3, [pc, #16]	@ (8002520 <LL_ADC_DisableDeepPowerDown+0x20>)
 800250e:	4013      	ands	r3, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6093      	str	r3, [r2, #8]
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	5fffffc0 	.word	0x5fffffc0

08002524 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002534:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002538:	d101      	bne.n	800253e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	4b05      	ldr	r3, [pc, #20]	@ (8002570 <LL_ADC_EnableInternalRegulator+0x24>)
 800255a:	4013      	ands	r3, r2
 800255c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	6fffffc0 	.word	0x6fffffc0

08002574 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002584:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002588:	d101      	bne.n	800258e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	4b05      	ldr	r3, [pc, #20]	@ (80025c0 <LL_ADC_Enable+0x24>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	f043 0201 	orr.w	r2, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	7fffffc0 	.word	0x7fffffc0

080025c4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	4b05      	ldr	r3, [pc, #20]	@ (80025e8 <LL_ADC_Disable+0x24>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	f043 0202 	orr.w	r2, r3, #2
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	7fffffc0 	.word	0x7fffffc0

080025ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <LL_ADC_IsEnabled+0x18>
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <LL_ADC_IsEnabled+0x1a>
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b02      	cmp	r3, #2
 8002624:	d101      	bne.n	800262a <LL_ADC_IsDisableOngoing+0x18>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <LL_ADC_IsDisableOngoing+0x1a>
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	4b05      	ldr	r3, [pc, #20]	@ (800265c <LL_ADC_REG_StartConversion+0x24>)
 8002646:	4013      	ands	r3, r2
 8002648:	f043 0204 	orr.w	r2, r3, #4
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	7fffffc0 	.word	0x7fffffc0

08002660 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	4b05      	ldr	r3, [pc, #20]	@ (8002684 <LL_ADC_REG_StopConversion+0x24>)
 800266e:	4013      	ands	r3, r2
 8002670:	f043 0210 	orr.w	r2, r3, #16
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	7fffffc0 	.word	0x7fffffc0

08002688 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b04      	cmp	r3, #4
 800269a:	d101      	bne.n	80026a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	4b05      	ldr	r3, [pc, #20]	@ (80026d4 <LL_ADC_INJ_StopConversion+0x24>)
 80026be:	4013      	ands	r3, r2
 80026c0:	f043 0220 	orr.w	r2, r3, #32
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	7fffffc0 	.word	0x7fffffc0

080026d8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d101      	bne.n	80026f0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80026ec:	2301      	movs	r3, #1
 80026ee:	e000      	b.n	80026f2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002700:	b590      	push	{r4, r7, lr}
 8002702:	b089      	sub	sp, #36	@ 0x24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002708:	2300      	movs	r3, #0
 800270a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800270c:	2300      	movs	r3, #0
 800270e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e1ee      	b.n	8002af8 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002724:	2b00      	cmp	r3, #0
 8002726:	d109      	bne.n	800273c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7fe ffff 	bl	800172c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff feef 	bl	8002524 <LL_ADC_IsDeepPowerDownEnabled>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d004      	beq.n	8002756 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fed5 	bl	8002500 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff ff0a 	bl	8002574 <LL_ADC_IsInternalRegulatorEnabled>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d114      	bne.n	8002790 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff feee 	bl	800254c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002770:	4b8e      	ldr	r3, [pc, #568]	@ (80029ac <HAL_ADC_Init+0x2ac>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	099b      	lsrs	r3, r3, #6
 8002776:	4a8e      	ldr	r2, [pc, #568]	@ (80029b0 <HAL_ADC_Init+0x2b0>)
 8002778:	fba2 2303 	umull	r2, r3, r2, r3
 800277c:	099b      	lsrs	r3, r3, #6
 800277e:	3301      	adds	r3, #1
 8002780:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002782:	e002      	b.n	800278a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	3b01      	subs	r3, #1
 8002788:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1f9      	bne.n	8002784 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff feed 	bl	8002574 <LL_ADC_IsInternalRegulatorEnabled>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10d      	bne.n	80027bc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a4:	f043 0210 	orr.w	r2, r3, #16
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027b0:	f043 0201 	orr.w	r2, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff61 	bl	8002688 <LL_ADC_REG_IsConversionOngoing>
 80027c6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f040 8188 	bne.w	8002ae6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f040 8184 	bne.w	8002ae6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027e2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80027e6:	f043 0202 	orr.w	r2, r3, #2
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff fefa 	bl	80025ec <LL_ADC_IsEnabled>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d136      	bne.n	800286c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a6c      	ldr	r2, [pc, #432]	@ (80029b4 <HAL_ADC_Init+0x2b4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d004      	beq.n	8002812 <HAL_ADC_Init+0x112>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a6a      	ldr	r2, [pc, #424]	@ (80029b8 <HAL_ADC_Init+0x2b8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d10e      	bne.n	8002830 <HAL_ADC_Init+0x130>
 8002812:	4868      	ldr	r0, [pc, #416]	@ (80029b4 <HAL_ADC_Init+0x2b4>)
 8002814:	f7ff feea 	bl	80025ec <LL_ADC_IsEnabled>
 8002818:	4604      	mov	r4, r0
 800281a:	4867      	ldr	r0, [pc, #412]	@ (80029b8 <HAL_ADC_Init+0x2b8>)
 800281c:	f7ff fee6 	bl	80025ec <LL_ADC_IsEnabled>
 8002820:	4603      	mov	r3, r0
 8002822:	4323      	orrs	r3, r4
 8002824:	2b00      	cmp	r3, #0
 8002826:	bf0c      	ite	eq
 8002828:	2301      	moveq	r3, #1
 800282a:	2300      	movne	r3, #0
 800282c:	b2db      	uxtb	r3, r3
 800282e:	e008      	b.n	8002842 <HAL_ADC_Init+0x142>
 8002830:	4862      	ldr	r0, [pc, #392]	@ (80029bc <HAL_ADC_Init+0x2bc>)
 8002832:	f7ff fedb 	bl	80025ec <LL_ADC_IsEnabled>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	bf0c      	ite	eq
 800283c:	2301      	moveq	r3, #1
 800283e:	2300      	movne	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d012      	beq.n	800286c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a5a      	ldr	r2, [pc, #360]	@ (80029b4 <HAL_ADC_Init+0x2b4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d004      	beq.n	800285a <HAL_ADC_Init+0x15a>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a58      	ldr	r2, [pc, #352]	@ (80029b8 <HAL_ADC_Init+0x2b8>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d101      	bne.n	800285e <HAL_ADC_Init+0x15e>
 800285a:	4a59      	ldr	r2, [pc, #356]	@ (80029c0 <HAL_ADC_Init+0x2c0>)
 800285c:	e000      	b.n	8002860 <HAL_ADC_Init+0x160>
 800285e:	4a59      	ldr	r2, [pc, #356]	@ (80029c4 <HAL_ADC_Init+0x2c4>)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4619      	mov	r1, r3
 8002866:	4610      	mov	r0, r2
 8002868:	f7ff fc5e 	bl	8002128 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a52      	ldr	r2, [pc, #328]	@ (80029bc <HAL_ADC_Init+0x2bc>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d129      	bne.n	80028ca <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	7e5b      	ldrb	r3, [r3, #25]
 800287a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002880:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002886:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b08      	cmp	r3, #8
 800288e:	d013      	beq.n	80028b8 <HAL_ADC_Init+0x1b8>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2b0c      	cmp	r3, #12
 8002896:	d00d      	beq.n	80028b4 <HAL_ADC_Init+0x1b4>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b1c      	cmp	r3, #28
 800289e:	d007      	beq.n	80028b0 <HAL_ADC_Init+0x1b0>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2b18      	cmp	r3, #24
 80028a6:	d101      	bne.n	80028ac <HAL_ADC_Init+0x1ac>
 80028a8:	2318      	movs	r3, #24
 80028aa:	e006      	b.n	80028ba <HAL_ADC_Init+0x1ba>
 80028ac:	2300      	movs	r3, #0
 80028ae:	e004      	b.n	80028ba <HAL_ADC_Init+0x1ba>
 80028b0:	2310      	movs	r3, #16
 80028b2:	e002      	b.n	80028ba <HAL_ADC_Init+0x1ba>
 80028b4:	2308      	movs	r3, #8
 80028b6:	e000      	b.n	80028ba <HAL_ADC_Init+0x1ba>
 80028b8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80028ba:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028c2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
 80028c8:	e00e      	b.n	80028e8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	7e5b      	ldrb	r3, [r3, #25]
 80028ce:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028d4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80028da:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028e2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d106      	bne.n	8002900 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f6:	3b01      	subs	r3, #1
 80028f8:	045b      	lsls	r3, r3, #17
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002904:	2b00      	cmp	r3, #0
 8002906:	d009      	beq.n	800291c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002914:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a26      	ldr	r2, [pc, #152]	@ (80029bc <HAL_ADC_Init+0x2bc>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d115      	bne.n	8002952 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	4b26      	ldr	r3, [pc, #152]	@ (80029c8 <HAL_ADC_Init+0x2c8>)
 800292e:	4013      	ands	r3, r2
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	69b9      	ldr	r1, [r7, #24]
 8002936:	430b      	orrs	r3, r1
 8002938:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	611a      	str	r2, [r3, #16]
 8002950:	e009      	b.n	8002966 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	4b1c      	ldr	r3, [pc, #112]	@ (80029cc <HAL_ADC_Init+0x2cc>)
 800295a:	4013      	ands	r3, r2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	69b9      	ldr	r1, [r7, #24]
 8002962:	430b      	orrs	r3, r1
 8002964:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff fe8c 	bl	8002688 <LL_ADC_REG_IsConversionOngoing>
 8002970:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff feae 	bl	80026d8 <LL_ADC_INJ_IsConversionOngoing>
 800297c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	f040 808e 	bne.w	8002aa2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	f040 808a 	bne.w	8002aa2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a0a      	ldr	r2, [pc, #40]	@ (80029bc <HAL_ADC_Init+0x2bc>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d11b      	bne.n	80029d0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	7e1b      	ldrb	r3, [r3, #24]
 800299c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80029a4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
 80029aa:	e018      	b.n	80029de <HAL_ADC_Init+0x2de>
 80029ac:	24000010 	.word	0x24000010
 80029b0:	053e2d63 	.word	0x053e2d63
 80029b4:	40022000 	.word	0x40022000
 80029b8:	40022100 	.word	0x40022100
 80029bc:	58026000 	.word	0x58026000
 80029c0:	40022300 	.word	0x40022300
 80029c4:	58026300 	.word	0x58026300
 80029c8:	fff04007 	.word	0xfff04007
 80029cc:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	7e1b      	ldrb	r3, [r3, #24]
 80029d4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	4b46      	ldr	r3, [pc, #280]	@ (8002b00 <HAL_ADC_Init+0x400>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	69b9      	ldr	r1, [r7, #24]
 80029ee:	430b      	orrs	r3, r1
 80029f0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d137      	bne.n	8002a6c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a00:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a3f      	ldr	r2, [pc, #252]	@ (8002b04 <HAL_ADC_Init+0x404>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d116      	bne.n	8002a3a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	691a      	ldr	r2, [r3, #16]
 8002a12:	4b3d      	ldr	r3, [pc, #244]	@ (8002b08 <HAL_ADC_Init+0x408>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002a1e:	4311      	orrs	r1, r2
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a24:	4311      	orrs	r1, r2
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	611a      	str	r2, [r3, #16]
 8002a38:	e020      	b.n	8002a7c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	4b32      	ldr	r3, [pc, #200]	@ (8002b0c <HAL_ADC_Init+0x40c>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a48:	3a01      	subs	r2, #1
 8002a4a:	0411      	lsls	r1, r2, #16
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002a50:	4311      	orrs	r1, r2
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a56:	4311      	orrs	r1, r2
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 0201 	orr.w	r2, r2, #1
 8002a68:	611a      	str	r2, [r3, #16]
 8002a6a:	e007      	b.n	8002a7c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691a      	ldr	r2, [r3, #16]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0201 	bic.w	r2, r2, #1
 8002a7a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a1b      	ldr	r2, [pc, #108]	@ (8002b04 <HAL_ADC_Init+0x404>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d002      	beq.n	8002aa2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f001 f90d 	bl	8003cbc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab0:	f023 010f 	bic.w	r1, r3, #15
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	1e5a      	subs	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ac2:	e007      	b.n	8002ad4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 020f 	bic.w	r2, r2, #15
 8002ad2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ad8:	f023 0303 	bic.w	r3, r3, #3
 8002adc:	f043 0201 	orr.w	r2, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	661a      	str	r2, [r3, #96]	@ 0x60
 8002ae4:	e007      	b.n	8002af6 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aea:	f043 0210 	orr.w	r2, r3, #16
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002af6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3724      	adds	r7, #36	@ 0x24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd90      	pop	{r4, r7, pc}
 8002b00:	ffffbffc 	.word	0xffffbffc
 8002b04:	58026000 	.word	0x58026000
 8002b08:	fc00f81f 	.word	0xfc00f81f
 8002b0c:	fc00f81e 	.word	0xfc00f81e

08002b10 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a5c      	ldr	r2, [pc, #368]	@ (8002c90 <HAL_ADC_Start+0x180>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d004      	beq.n	8002b2c <HAL_ADC_Start+0x1c>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a5b      	ldr	r2, [pc, #364]	@ (8002c94 <HAL_ADC_Start+0x184>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d101      	bne.n	8002b30 <HAL_ADC_Start+0x20>
 8002b2c:	4b5a      	ldr	r3, [pc, #360]	@ (8002c98 <HAL_ADC_Start+0x188>)
 8002b2e:	e000      	b.n	8002b32 <HAL_ADC_Start+0x22>
 8002b30:	4b5a      	ldr	r3, [pc, #360]	@ (8002c9c <HAL_ADC_Start+0x18c>)
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff fcc8 	bl	80024c8 <LL_ADC_GetMultimode>
 8002b38:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fda2 	bl	8002688 <LL_ADC_REG_IsConversionOngoing>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f040 809a 	bne.w	8002c80 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_ADC_Start+0x4a>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e095      	b.n	8002c86 <HAL_ADC_Start+0x176>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 ffc0 	bl	8003ae8 <ADC_Enable>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b6c:	7dfb      	ldrb	r3, [r7, #23]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f040 8081 	bne.w	8002c76 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b78:	4b49      	ldr	r3, [pc, #292]	@ (8002ca0 <HAL_ADC_Start+0x190>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a42      	ldr	r2, [pc, #264]	@ (8002c94 <HAL_ADC_Start+0x184>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d002      	beq.n	8002b94 <HAL_ADC_Start+0x84>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	e000      	b.n	8002b96 <HAL_ADC_Start+0x86>
 8002b94:	4b3e      	ldr	r3, [pc, #248]	@ (8002c90 <HAL_ADC_Start+0x180>)
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6812      	ldr	r2, [r2, #0]
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d002      	beq.n	8002ba4 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d105      	bne.n	8002bb0 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ba8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bbc:	d106      	bne.n	8002bcc <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bc2:	f023 0206 	bic.w	r2, r3, #6
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	665a      	str	r2, [r3, #100]	@ 0x64
 8002bca:	e002      	b.n	8002bd2 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	221c      	movs	r2, #28
 8002bd8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a2b      	ldr	r2, [pc, #172]	@ (8002c94 <HAL_ADC_Start+0x184>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d002      	beq.n	8002bf2 <HAL_ADC_Start+0xe2>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	e000      	b.n	8002bf4 <HAL_ADC_Start+0xe4>
 8002bf2:	4b27      	ldr	r3, [pc, #156]	@ (8002c90 <HAL_ADC_Start+0x180>)
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6812      	ldr	r2, [r2, #0]
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d008      	beq.n	8002c0e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b05      	cmp	r3, #5
 8002c06:	d002      	beq.n	8002c0e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	2b09      	cmp	r3, #9
 8002c0c:	d114      	bne.n	8002c38 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d007      	beq.n	8002c2c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c20:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c24:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff fd01 	bl	8002638 <LL_ADC_REG_StartConversion>
 8002c36:	e025      	b.n	8002c84 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c3c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a12      	ldr	r2, [pc, #72]	@ (8002c94 <HAL_ADC_Start+0x184>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d002      	beq.n	8002c54 <HAL_ADC_Start+0x144>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	e000      	b.n	8002c56 <HAL_ADC_Start+0x146>
 8002c54:	4b0e      	ldr	r3, [pc, #56]	@ (8002c90 <HAL_ADC_Start+0x180>)
 8002c56:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00f      	beq.n	8002c84 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c68:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c6c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	661a      	str	r2, [r3, #96]	@ 0x60
 8002c74:	e006      	b.n	8002c84 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8002c7e:	e001      	b.n	8002c84 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c80:	2302      	movs	r3, #2
 8002c82:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40022000 	.word	0x40022000
 8002c94:	40022100 	.word	0x40022100
 8002c98:	40022300 	.word	0x40022300
 8002c9c:	58026300 	.word	0x58026300
 8002ca0:	fffff0fe 	.word	0xfffff0fe

08002ca4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_ADC_Stop+0x16>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e021      	b.n	8002cfe <HAL_ADC_Stop+0x5a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002cc2:	2103      	movs	r1, #3
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 fe53 	bl	8003970 <ADC_ConversionStop>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10f      	bne.n	8002cf4 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 ff91 	bl	8003bfc <ADC_Disable>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d107      	bne.n	8002cf4 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002ce8:	4b07      	ldr	r3, [pc, #28]	@ (8002d08 <HAL_ADC_Stop+0x64>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	f043 0201 	orr.w	r2, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	ffffeefe 	.word	0xffffeefe

08002d0c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b088      	sub	sp, #32
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a72      	ldr	r2, [pc, #456]	@ (8002ee4 <HAL_ADC_PollForConversion+0x1d8>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d004      	beq.n	8002d2a <HAL_ADC_PollForConversion+0x1e>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a70      	ldr	r2, [pc, #448]	@ (8002ee8 <HAL_ADC_PollForConversion+0x1dc>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d101      	bne.n	8002d2e <HAL_ADC_PollForConversion+0x22>
 8002d2a:	4b70      	ldr	r3, [pc, #448]	@ (8002eec <HAL_ADC_PollForConversion+0x1e0>)
 8002d2c:	e000      	b.n	8002d30 <HAL_ADC_PollForConversion+0x24>
 8002d2e:	4b70      	ldr	r3, [pc, #448]	@ (8002ef0 <HAL_ADC_PollForConversion+0x1e4>)
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fbc9 	bl	80024c8 <LL_ADC_GetMultimode>
 8002d36:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d102      	bne.n	8002d46 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002d40:	2308      	movs	r3, #8
 8002d42:	61fb      	str	r3, [r7, #28]
 8002d44:	e037      	b.n	8002db6 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2b05      	cmp	r3, #5
 8002d50:	d002      	beq.n	8002d58 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b09      	cmp	r3, #9
 8002d56:	d111      	bne.n	8002d7c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d007      	beq.n	8002d76 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d6a:	f043 0220 	orr.w	r2, r3, #32
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e0b1      	b.n	8002eda <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002d76:	2304      	movs	r3, #4
 8002d78:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002d7a:	e01c      	b.n	8002db6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a58      	ldr	r2, [pc, #352]	@ (8002ee4 <HAL_ADC_PollForConversion+0x1d8>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d004      	beq.n	8002d90 <HAL_ADC_PollForConversion+0x84>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a57      	ldr	r2, [pc, #348]	@ (8002ee8 <HAL_ADC_PollForConversion+0x1dc>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d101      	bne.n	8002d94 <HAL_ADC_PollForConversion+0x88>
 8002d90:	4b56      	ldr	r3, [pc, #344]	@ (8002eec <HAL_ADC_PollForConversion+0x1e0>)
 8002d92:	e000      	b.n	8002d96 <HAL_ADC_PollForConversion+0x8a>
 8002d94:	4b56      	ldr	r3, [pc, #344]	@ (8002ef0 <HAL_ADC_PollForConversion+0x1e4>)
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff fba4 	bl	80024e4 <LL_ADC_GetMultiDMATransfer>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d007      	beq.n	8002db2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002da6:	f043 0220 	orr.w	r2, r3, #32
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e093      	b.n	8002eda <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002db2:	2304      	movs	r3, #4
 8002db4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002db6:	f7ff f987 	bl	80020c8 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002dbc:	e021      	b.n	8002e02 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc4:	d01d      	beq.n	8002e02 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002dc6:	f7ff f97f 	bl	80020c8 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d302      	bcc.n	8002ddc <HAL_ADC_PollForConversion+0xd0>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d112      	bne.n	8002e02 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10b      	bne.n	8002e02 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dee:	f043 0204 	orr.w	r2, r3, #4
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e06b      	b.n	8002eda <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0d6      	beq.n	8002dbe <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e14:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff faa7 	bl	8002374 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d01c      	beq.n	8002e66 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	7e5b      	ldrb	r3, [r3, #25]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d118      	bne.n	8002e66 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d111      	bne.n	8002e66 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e46:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d105      	bne.n	8002e66 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e5e:	f043 0201 	orr.w	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ee8 <HAL_ADC_PollForConversion+0x1dc>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d002      	beq.n	8002e76 <HAL_ADC_PollForConversion+0x16a>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	e000      	b.n	8002e78 <HAL_ADC_PollForConversion+0x16c>
 8002e76:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee4 <HAL_ADC_PollForConversion+0x1d8>)
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d008      	beq.n	8002e92 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d005      	beq.n	8002e92 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b05      	cmp	r3, #5
 8002e8a:	d002      	beq.n	8002e92 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	2b09      	cmp	r3, #9
 8002e90:	d104      	bne.n	8002e9c <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	61bb      	str	r3, [r7, #24]
 8002e9a:	e00c      	b.n	8002eb6 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a11      	ldr	r2, [pc, #68]	@ (8002ee8 <HAL_ADC_PollForConversion+0x1dc>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d002      	beq.n	8002eac <HAL_ADC_PollForConversion+0x1a0>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	e000      	b.n	8002eae <HAL_ADC_PollForConversion+0x1a2>
 8002eac:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee4 <HAL_ADC_PollForConversion+0x1d8>)
 8002eae:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d104      	bne.n	8002ec6 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2208      	movs	r2, #8
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	e008      	b.n	8002ed8 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d103      	bne.n	8002ed8 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	220c      	movs	r2, #12
 8002ed6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3720      	adds	r7, #32
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40022000 	.word	0x40022000
 8002ee8:	40022100 	.word	0x40022100
 8002eec:	40022300 	.word	0x40022300
 8002ef0:	58026300 	.word	0x58026300

08002ef4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
	...

08002f10 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f10:	b590      	push	{r4, r7, lr}
 8002f12:	b0b9      	sub	sp, #228	@ 0xe4
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f2a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	4aab      	ldr	r2, [pc, #684]	@ (80031e0 <HAL_ADC_ConfigChannel+0x2d0>)
 8002f32:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d102      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x34>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	f000 bcfe 	b.w	8003940 <HAL_ADC_ConfigChannel+0xa30>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff fb99 	bl	8002688 <LL_ADC_REG_IsConversionOngoing>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f040 84e2 	bne.w	8003922 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	db38      	blt.n	8002fd8 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a9e      	ldr	r2, [pc, #632]	@ (80031e4 <HAL_ADC_ConfigChannel+0x2d4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d033      	beq.n	8002fd8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d108      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x7e>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	0e9b      	lsrs	r3, r3, #26
 8002f82:	f003 031f 	and.w	r3, r3, #31
 8002f86:	2201      	movs	r2, #1
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	e01d      	b.n	8002fca <HAL_ADC_ConfigChannel+0xba>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f9a:	fa93 f3a3 	rbit	r3, r3
 8002f9e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fa2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fa6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002faa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8002fb2:	2320      	movs	r3, #32
 8002fb4:	e004      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8002fb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002fba:	fab3 f383 	clz	r3, r3
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6812      	ldr	r2, [r2, #0]
 8002fce:	69d1      	ldr	r1, [r2, #28]
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	6859      	ldr	r1, [r3, #4]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	f7ff f9d8 	bl	800239a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff fb4a 	bl	8002688 <LL_ADC_REG_IsConversionOngoing>
 8002ff4:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff fb6b 	bl	80026d8 <LL_ADC_INJ_IsConversionOngoing>
 8003002:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003006:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800300a:	2b00      	cmp	r3, #0
 800300c:	f040 8270 	bne.w	80034f0 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003010:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003014:	2b00      	cmp	r3, #0
 8003016:	f040 826b 	bne.w	80034f0 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6818      	ldr	r0, [r3, #0]
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	6819      	ldr	r1, [r3, #0]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	461a      	mov	r2, r3
 8003028:	f7ff f9e3 	bl	80023f2 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a6c      	ldr	r2, [pc, #432]	@ (80031e4 <HAL_ADC_ConfigChannel+0x2d4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d10d      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	08db      	lsrs	r3, r3, #3
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003050:	e032      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003052:	4b65      	ldr	r3, [pc, #404]	@ (80031e8 <HAL_ADC_ConfigChannel+0x2d8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800305a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800305e:	d10b      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x168>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	695a      	ldr	r2, [r3, #20]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	089b      	lsrs	r3, r3, #2
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	e01d      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x1a4>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f003 0310 	and.w	r3, r3, #16
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10b      	bne.n	800309e <HAL_ADC_ConfigChannel+0x18e>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	695a      	ldr	r2, [r3, #20]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	089b      	lsrs	r3, r3, #2
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	e00a      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x1a4>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	695a      	ldr	r2, [r3, #20]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	089b      	lsrs	r3, r3, #2
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d048      	beq.n	8003152 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6818      	ldr	r0, [r3, #0]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	6919      	ldr	r1, [r3, #16]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030d0:	f7ff f85e 	bl	8002190 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a42      	ldr	r2, [pc, #264]	@ (80031e4 <HAL_ADC_ConfigChannel+0x2d4>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d119      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6818      	ldr	r0, [r3, #0]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	6919      	ldr	r1, [r3, #16]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	461a      	mov	r2, r3
 80030ec:	f7ff f8f6 	bl	80022dc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6818      	ldr	r0, [r3, #0]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	6919      	ldr	r1, [r3, #16]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d102      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x1f8>
 8003102:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003106:	e000      	b.n	800310a <HAL_ADC_ConfigChannel+0x1fa>
 8003108:	2300      	movs	r3, #0
 800310a:	461a      	mov	r2, r3
 800310c:	f7ff f8c4 	bl	8002298 <LL_ADC_SetOffsetSaturation>
 8003110:	e1ee      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6818      	ldr	r0, [r3, #0]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	6919      	ldr	r1, [r3, #16]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003120:	2b01      	cmp	r3, #1
 8003122:	d102      	bne.n	800312a <HAL_ADC_ConfigChannel+0x21a>
 8003124:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003128:	e000      	b.n	800312c <HAL_ADC_ConfigChannel+0x21c>
 800312a:	2300      	movs	r3, #0
 800312c:	461a      	mov	r2, r3
 800312e:	f7ff f891 	bl	8002254 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6818      	ldr	r0, [r3, #0]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	6919      	ldr	r1, [r3, #16]
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	7e1b      	ldrb	r3, [r3, #24]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d102      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x238>
 8003142:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003146:	e000      	b.n	800314a <HAL_ADC_ConfigChannel+0x23a>
 8003148:	2300      	movs	r3, #0
 800314a:	461a      	mov	r2, r3
 800314c:	f7ff f868 	bl	8002220 <LL_ADC_SetDataRightShift>
 8003150:	e1ce      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a23      	ldr	r2, [pc, #140]	@ (80031e4 <HAL_ADC_ConfigChannel+0x2d4>)
 8003158:	4293      	cmp	r3, r2
 800315a:	f040 8181 	bne.w	8003460 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2100      	movs	r1, #0
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff f845 	bl	80021f4 <LL_ADC_GetOffsetChannel>
 800316a:	4603      	mov	r3, r0
 800316c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10a      	bne.n	800318a <HAL_ADC_ConfigChannel+0x27a>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2100      	movs	r1, #0
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff f83a 	bl	80021f4 <LL_ADC_GetOffsetChannel>
 8003180:	4603      	mov	r3, r0
 8003182:	0e9b      	lsrs	r3, r3, #26
 8003184:	f003 021f 	and.w	r2, r3, #31
 8003188:	e01e      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x2b8>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2100      	movs	r1, #0
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff f82f 	bl	80021f4 <LL_ADC_GetOffsetChannel>
 8003196:	4603      	mov	r3, r0
 8003198:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80031a0:	fa93 f3a3 	rbit	r3, r3
 80031a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80031a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80031ac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80031b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 80031b8:	2320      	movs	r3, #32
 80031ba:	e004      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 80031bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80031c0:	fab3 f383 	clz	r3, r3
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	461a      	mov	r2, r3
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10b      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x2dc>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	0e9b      	lsrs	r3, r3, #26
 80031da:	f003 031f 	and.w	r3, r3, #31
 80031de:	e01e      	b.n	800321e <HAL_ADC_ConfigChannel+0x30e>
 80031e0:	47ff0000 	.word	0x47ff0000
 80031e4:	58026000 	.word	0x58026000
 80031e8:	5c001000 	.word	0x5c001000
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031f8:	fa93 f3a3 	rbit	r3, r3
 80031fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003200:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003204:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003208:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003210:	2320      	movs	r3, #32
 8003212:	e004      	b.n	800321e <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003214:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003218:	fab3 f383 	clz	r3, r3
 800321c:	b2db      	uxtb	r3, r3
 800321e:	429a      	cmp	r2, r3
 8003220:	d106      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2200      	movs	r2, #0
 8003228:	2100      	movs	r1, #0
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff f878 	bl	8002320 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2101      	movs	r1, #1
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe ffdc 	bl	80021f4 <LL_ADC_GetOffsetChannel>
 800323c:	4603      	mov	r3, r0
 800323e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10a      	bne.n	800325c <HAL_ADC_ConfigChannel+0x34c>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2101      	movs	r1, #1
 800324c:	4618      	mov	r0, r3
 800324e:	f7fe ffd1 	bl	80021f4 <LL_ADC_GetOffsetChannel>
 8003252:	4603      	mov	r3, r0
 8003254:	0e9b      	lsrs	r3, r3, #26
 8003256:	f003 021f 	and.w	r2, r3, #31
 800325a:	e01e      	b.n	800329a <HAL_ADC_ConfigChannel+0x38a>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2101      	movs	r1, #1
 8003262:	4618      	mov	r0, r3
 8003264:	f7fe ffc6 	bl	80021f4 <LL_ADC_GetOffsetChannel>
 8003268:	4603      	mov	r3, r0
 800326a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003272:	fa93 f3a3 	rbit	r3, r3
 8003276:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800327a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800327e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003282:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800328a:	2320      	movs	r3, #32
 800328c:	e004      	b.n	8003298 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 800328e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003292:	fab3 f383 	clz	r3, r3
 8003296:	b2db      	uxtb	r3, r3
 8003298:	461a      	mov	r2, r3
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d105      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x3a2>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	0e9b      	lsrs	r3, r3, #26
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	e018      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x3d4>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032be:	fa93 f3a3 	rbit	r3, r3
 80032c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80032c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80032ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80032ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 80032d6:	2320      	movs	r3, #32
 80032d8:	e004      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 80032da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032de:	fab3 f383 	clz	r3, r3
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d106      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2200      	movs	r2, #0
 80032ee:	2101      	movs	r1, #1
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff f815 	bl	8002320 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2102      	movs	r1, #2
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fe ff79 	bl	80021f4 <LL_ADC_GetOffsetChannel>
 8003302:	4603      	mov	r3, r0
 8003304:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10a      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x412>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2102      	movs	r1, #2
 8003312:	4618      	mov	r0, r3
 8003314:	f7fe ff6e 	bl	80021f4 <LL_ADC_GetOffsetChannel>
 8003318:	4603      	mov	r3, r0
 800331a:	0e9b      	lsrs	r3, r3, #26
 800331c:	f003 021f 	and.w	r2, r3, #31
 8003320:	e01e      	b.n	8003360 <HAL_ADC_ConfigChannel+0x450>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2102      	movs	r1, #2
 8003328:	4618      	mov	r0, r3
 800332a:	f7fe ff63 	bl	80021f4 <LL_ADC_GetOffsetChannel>
 800332e:	4603      	mov	r3, r0
 8003330:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003334:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003338:	fa93 f3a3 	rbit	r3, r3
 800333c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003340:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003344:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003348:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8003350:	2320      	movs	r3, #32
 8003352:	e004      	b.n	800335e <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003354:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003358:	fab3 f383 	clz	r3, r3
 800335c:	b2db      	uxtb	r3, r3
 800335e:	461a      	mov	r2, r3
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003368:	2b00      	cmp	r3, #0
 800336a:	d105      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x468>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	0e9b      	lsrs	r3, r3, #26
 8003372:	f003 031f 	and.w	r3, r3, #31
 8003376:	e014      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x492>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003380:	fa93 f3a3 	rbit	r3, r3
 8003384:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003386:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003388:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800338c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003394:	2320      	movs	r3, #32
 8003396:	e004      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003398:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800339c:	fab3 f383 	clz	r3, r3
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d106      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2200      	movs	r2, #0
 80033ac:	2102      	movs	r1, #2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fe ffb6 	bl	8002320 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2103      	movs	r1, #3
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fe ff1a 	bl	80021f4 <LL_ADC_GetOffsetChannel>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10a      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x4d0>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2103      	movs	r1, #3
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fe ff0f 	bl	80021f4 <LL_ADC_GetOffsetChannel>
 80033d6:	4603      	mov	r3, r0
 80033d8:	0e9b      	lsrs	r3, r3, #26
 80033da:	f003 021f 	and.w	r2, r3, #31
 80033de:	e017      	b.n	8003410 <HAL_ADC_ConfigChannel+0x500>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2103      	movs	r1, #3
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fe ff04 	bl	80021f4 <LL_ADC_GetOffsetChannel>
 80033ec:	4603      	mov	r3, r0
 80033ee:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80033f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033fa:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80033fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8003402:	2320      	movs	r3, #32
 8003404:	e003      	b.n	800340e <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8003406:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003408:	fab3 f383 	clz	r3, r3
 800340c:	b2db      	uxtb	r3, r3
 800340e:	461a      	mov	r2, r3
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003418:	2b00      	cmp	r3, #0
 800341a:	d105      	bne.n	8003428 <HAL_ADC_ConfigChannel+0x518>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	0e9b      	lsrs	r3, r3, #26
 8003422:	f003 031f 	and.w	r3, r3, #31
 8003426:	e011      	b.n	800344c <HAL_ADC_ConfigChannel+0x53c>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003430:	fa93 f3a3 	rbit	r3, r3
 8003434:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003436:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003438:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800343a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8003440:	2320      	movs	r3, #32
 8003442:	e003      	b.n	800344c <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003444:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003446:	fab3 f383 	clz	r3, r3
 800344a:	b2db      	uxtb	r3, r3
 800344c:	429a      	cmp	r2, r3
 800344e:	d14f      	bne.n	80034f0 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2200      	movs	r2, #0
 8003456:	2103      	movs	r1, #3
 8003458:	4618      	mov	r0, r3
 800345a:	f7fe ff61 	bl	8002320 <LL_ADC_SetOffsetState>
 800345e:	e047      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003466:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	069b      	lsls	r3, r3, #26
 8003470:	429a      	cmp	r2, r3
 8003472:	d107      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003482:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800348a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	069b      	lsls	r3, r3, #26
 8003494:	429a      	cmp	r2, r3
 8003496:	d107      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80034a6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	069b      	lsls	r3, r3, #26
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d107      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80034ca:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	069b      	lsls	r3, r3, #26
 80034dc:	429a      	cmp	r2, r3
 80034de:	d107      	bne.n	80034f0 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80034ee:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff f879 	bl	80025ec <LL_ADC_IsEnabled>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f040 8219 	bne.w	8003934 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6819      	ldr	r1, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	461a      	mov	r2, r3
 8003510:	f7fe ff9a 	bl	8002448 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	4aa1      	ldr	r2, [pc, #644]	@ (80037a0 <HAL_ADC_ConfigChannel+0x890>)
 800351a:	4293      	cmp	r3, r2
 800351c:	f040 812e 	bne.w	800377c <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10b      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x638>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	0e9b      	lsrs	r3, r3, #26
 8003536:	3301      	adds	r3, #1
 8003538:	f003 031f 	and.w	r3, r3, #31
 800353c:	2b09      	cmp	r3, #9
 800353e:	bf94      	ite	ls
 8003540:	2301      	movls	r3, #1
 8003542:	2300      	movhi	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	e019      	b.n	800357c <HAL_ADC_ConfigChannel+0x66c>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003550:	fa93 f3a3 	rbit	r3, r3
 8003554:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003558:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800355a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003560:	2320      	movs	r3, #32
 8003562:	e003      	b.n	800356c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003564:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003566:	fab3 f383 	clz	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	3301      	adds	r3, #1
 800356e:	f003 031f 	and.w	r3, r3, #31
 8003572:	2b09      	cmp	r3, #9
 8003574:	bf94      	ite	ls
 8003576:	2301      	movls	r3, #1
 8003578:	2300      	movhi	r3, #0
 800357a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800357c:	2b00      	cmp	r3, #0
 800357e:	d079      	beq.n	8003674 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003588:	2b00      	cmp	r3, #0
 800358a:	d107      	bne.n	800359c <HAL_ADC_ConfigChannel+0x68c>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	0e9b      	lsrs	r3, r3, #26
 8003592:	3301      	adds	r3, #1
 8003594:	069b      	lsls	r3, r3, #26
 8003596:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800359a:	e015      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x6b8>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035a4:	fa93 f3a3 	rbit	r3, r3
 80035a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80035aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035ac:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80035ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80035b4:	2320      	movs	r3, #32
 80035b6:	e003      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80035b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035ba:	fab3 f383 	clz	r3, r3
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	3301      	adds	r3, #1
 80035c2:	069b      	lsls	r3, r3, #26
 80035c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d109      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x6d8>
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	0e9b      	lsrs	r3, r3, #26
 80035da:	3301      	adds	r3, #1
 80035dc:	f003 031f 	and.w	r3, r3, #31
 80035e0:	2101      	movs	r1, #1
 80035e2:	fa01 f303 	lsl.w	r3, r1, r3
 80035e6:	e017      	b.n	8003618 <HAL_ADC_ConfigChannel+0x708>
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035f0:	fa93 f3a3 	rbit	r3, r3
 80035f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80035f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035f8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80035fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8003600:	2320      	movs	r3, #32
 8003602:	e003      	b.n	800360c <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8003604:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003606:	fab3 f383 	clz	r3, r3
 800360a:	b2db      	uxtb	r3, r3
 800360c:	3301      	adds	r3, #1
 800360e:	f003 031f 	and.w	r3, r3, #31
 8003612:	2101      	movs	r1, #1
 8003614:	fa01 f303 	lsl.w	r3, r1, r3
 8003618:	ea42 0103 	orr.w	r1, r2, r3
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10a      	bne.n	800363e <HAL_ADC_ConfigChannel+0x72e>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	0e9b      	lsrs	r3, r3, #26
 800362e:	3301      	adds	r3, #1
 8003630:	f003 021f 	and.w	r2, r3, #31
 8003634:	4613      	mov	r3, r2
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	4413      	add	r3, r2
 800363a:	051b      	lsls	r3, r3, #20
 800363c:	e018      	b.n	8003670 <HAL_ADC_ConfigChannel+0x760>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003646:	fa93 f3a3 	rbit	r3, r3
 800364a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800364c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8003656:	2320      	movs	r3, #32
 8003658:	e003      	b.n	8003662 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800365a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365c:	fab3 f383 	clz	r3, r3
 8003660:	b2db      	uxtb	r3, r3
 8003662:	3301      	adds	r3, #1
 8003664:	f003 021f 	and.w	r2, r3, #31
 8003668:	4613      	mov	r3, r2
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	4413      	add	r3, r2
 800366e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003670:	430b      	orrs	r3, r1
 8003672:	e07e      	b.n	8003772 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800367c:	2b00      	cmp	r3, #0
 800367e:	d107      	bne.n	8003690 <HAL_ADC_ConfigChannel+0x780>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	0e9b      	lsrs	r3, r3, #26
 8003686:	3301      	adds	r3, #1
 8003688:	069b      	lsls	r3, r3, #26
 800368a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800368e:	e015      	b.n	80036bc <HAL_ADC_ConfigChannel+0x7ac>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003698:	fa93 f3a3 	rbit	r3, r3
 800369c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800369e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80036a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80036a8:	2320      	movs	r3, #32
 80036aa:	e003      	b.n	80036b4 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80036ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ae:	fab3 f383 	clz	r3, r3
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	3301      	adds	r3, #1
 80036b6:	069b      	lsls	r3, r3, #26
 80036b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d109      	bne.n	80036dc <HAL_ADC_ConfigChannel+0x7cc>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	0e9b      	lsrs	r3, r3, #26
 80036ce:	3301      	adds	r3, #1
 80036d0:	f003 031f 	and.w	r3, r3, #31
 80036d4:	2101      	movs	r1, #1
 80036d6:	fa01 f303 	lsl.w	r3, r1, r3
 80036da:	e017      	b.n	800370c <HAL_ADC_ConfigChannel+0x7fc>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	fa93 f3a3 	rbit	r3, r3
 80036e8:	61bb      	str	r3, [r7, #24]
  return result;
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80036ee:	6a3b      	ldr	r3, [r7, #32]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80036f4:	2320      	movs	r3, #32
 80036f6:	e003      	b.n	8003700 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	fab3 f383 	clz	r3, r3
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	3301      	adds	r3, #1
 8003702:	f003 031f 	and.w	r3, r3, #31
 8003706:	2101      	movs	r1, #1
 8003708:	fa01 f303 	lsl.w	r3, r1, r3
 800370c:	ea42 0103 	orr.w	r1, r2, r3
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10d      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x828>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	0e9b      	lsrs	r3, r3, #26
 8003722:	3301      	adds	r3, #1
 8003724:	f003 021f 	and.w	r2, r3, #31
 8003728:	4613      	mov	r3, r2
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	4413      	add	r3, r2
 800372e:	3b1e      	subs	r3, #30
 8003730:	051b      	lsls	r3, r3, #20
 8003732:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003736:	e01b      	b.n	8003770 <HAL_ADC_ConfigChannel+0x860>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	fa93 f3a3 	rbit	r3, r3
 8003744:	60fb      	str	r3, [r7, #12]
  return result;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8003750:	2320      	movs	r3, #32
 8003752:	e003      	b.n	800375c <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	fab3 f383 	clz	r3, r3
 800375a:	b2db      	uxtb	r3, r3
 800375c:	3301      	adds	r3, #1
 800375e:	f003 021f 	and.w	r2, r3, #31
 8003762:	4613      	mov	r3, r2
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	4413      	add	r3, r2
 8003768:	3b1e      	subs	r3, #30
 800376a:	051b      	lsls	r3, r3, #20
 800376c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003770:	430b      	orrs	r3, r1
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	6892      	ldr	r2, [r2, #8]
 8003776:	4619      	mov	r1, r3
 8003778:	f7fe fe3b 	bl	80023f2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	f280 80d7 	bge.w	8003934 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a06      	ldr	r2, [pc, #24]	@ (80037a4 <HAL_ADC_ConfigChannel+0x894>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d004      	beq.n	800379a <HAL_ADC_ConfigChannel+0x88a>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a04      	ldr	r2, [pc, #16]	@ (80037a8 <HAL_ADC_ConfigChannel+0x898>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d10a      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x8a0>
 800379a:	4b04      	ldr	r3, [pc, #16]	@ (80037ac <HAL_ADC_ConfigChannel+0x89c>)
 800379c:	e009      	b.n	80037b2 <HAL_ADC_ConfigChannel+0x8a2>
 800379e:	bf00      	nop
 80037a0:	47ff0000 	.word	0x47ff0000
 80037a4:	40022000 	.word	0x40022000
 80037a8:	40022100 	.word	0x40022100
 80037ac:	40022300 	.word	0x40022300
 80037b0:	4b65      	ldr	r3, [pc, #404]	@ (8003948 <HAL_ADC_ConfigChannel+0xa38>)
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fe fcde 	bl	8002174 <LL_ADC_GetCommonPathInternalCh>
 80037b8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a62      	ldr	r2, [pc, #392]	@ (800394c <HAL_ADC_ConfigChannel+0xa3c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d004      	beq.n	80037d0 <HAL_ADC_ConfigChannel+0x8c0>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a61      	ldr	r2, [pc, #388]	@ (8003950 <HAL_ADC_ConfigChannel+0xa40>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d10e      	bne.n	80037ee <HAL_ADC_ConfigChannel+0x8de>
 80037d0:	485e      	ldr	r0, [pc, #376]	@ (800394c <HAL_ADC_ConfigChannel+0xa3c>)
 80037d2:	f7fe ff0b 	bl	80025ec <LL_ADC_IsEnabled>
 80037d6:	4604      	mov	r4, r0
 80037d8:	485d      	ldr	r0, [pc, #372]	@ (8003950 <HAL_ADC_ConfigChannel+0xa40>)
 80037da:	f7fe ff07 	bl	80025ec <LL_ADC_IsEnabled>
 80037de:	4603      	mov	r3, r0
 80037e0:	4323      	orrs	r3, r4
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	bf0c      	ite	eq
 80037e6:	2301      	moveq	r3, #1
 80037e8:	2300      	movne	r3, #0
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	e008      	b.n	8003800 <HAL_ADC_ConfigChannel+0x8f0>
 80037ee:	4859      	ldr	r0, [pc, #356]	@ (8003954 <HAL_ADC_ConfigChannel+0xa44>)
 80037f0:	f7fe fefc 	bl	80025ec <LL_ADC_IsEnabled>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	bf0c      	ite	eq
 80037fa:	2301      	moveq	r3, #1
 80037fc:	2300      	movne	r3, #0
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 8084 	beq.w	800390e <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a53      	ldr	r2, [pc, #332]	@ (8003958 <HAL_ADC_ConfigChannel+0xa48>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d132      	bne.n	8003876 <HAL_ADC_ConfigChannel+0x966>
 8003810:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003814:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d12c      	bne.n	8003876 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a4c      	ldr	r2, [pc, #304]	@ (8003954 <HAL_ADC_ConfigChannel+0xa44>)
 8003822:	4293      	cmp	r3, r2
 8003824:	f040 8086 	bne.w	8003934 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a47      	ldr	r2, [pc, #284]	@ (800394c <HAL_ADC_ConfigChannel+0xa3c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d004      	beq.n	800383c <HAL_ADC_ConfigChannel+0x92c>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a46      	ldr	r2, [pc, #280]	@ (8003950 <HAL_ADC_ConfigChannel+0xa40>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d101      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x930>
 800383c:	4a47      	ldr	r2, [pc, #284]	@ (800395c <HAL_ADC_ConfigChannel+0xa4c>)
 800383e:	e000      	b.n	8003842 <HAL_ADC_ConfigChannel+0x932>
 8003840:	4a41      	ldr	r2, [pc, #260]	@ (8003948 <HAL_ADC_ConfigChannel+0xa38>)
 8003842:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003846:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800384a:	4619      	mov	r1, r3
 800384c:	4610      	mov	r0, r2
 800384e:	f7fe fc7e 	bl	800214e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003852:	4b43      	ldr	r3, [pc, #268]	@ (8003960 <HAL_ADC_ConfigChannel+0xa50>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	099b      	lsrs	r3, r3, #6
 8003858:	4a42      	ldr	r2, [pc, #264]	@ (8003964 <HAL_ADC_ConfigChannel+0xa54>)
 800385a:	fba2 2303 	umull	r2, r3, r2, r3
 800385e:	099b      	lsrs	r3, r3, #6
 8003860:	3301      	adds	r3, #1
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003866:	e002      	b.n	800386e <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	3b01      	subs	r3, #1
 800386c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1f9      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003874:	e05e      	b.n	8003934 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a3b      	ldr	r2, [pc, #236]	@ (8003968 <HAL_ADC_ConfigChannel+0xa58>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d120      	bne.n	80038c2 <HAL_ADC_ConfigChannel+0x9b2>
 8003880:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003884:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d11a      	bne.n	80038c2 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a30      	ldr	r2, [pc, #192]	@ (8003954 <HAL_ADC_ConfigChannel+0xa44>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d14e      	bne.n	8003934 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a2c      	ldr	r2, [pc, #176]	@ (800394c <HAL_ADC_ConfigChannel+0xa3c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d004      	beq.n	80038aa <HAL_ADC_ConfigChannel+0x99a>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a2a      	ldr	r2, [pc, #168]	@ (8003950 <HAL_ADC_ConfigChannel+0xa40>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d101      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x99e>
 80038aa:	4a2c      	ldr	r2, [pc, #176]	@ (800395c <HAL_ADC_ConfigChannel+0xa4c>)
 80038ac:	e000      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x9a0>
 80038ae:	4a26      	ldr	r2, [pc, #152]	@ (8003948 <HAL_ADC_ConfigChannel+0xa38>)
 80038b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80038b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038b8:	4619      	mov	r1, r3
 80038ba:	4610      	mov	r0, r2
 80038bc:	f7fe fc47 	bl	800214e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038c0:	e038      	b.n	8003934 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a29      	ldr	r2, [pc, #164]	@ (800396c <HAL_ADC_ConfigChannel+0xa5c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d133      	bne.n	8003934 <HAL_ADC_ConfigChannel+0xa24>
 80038cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80038d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d12d      	bne.n	8003934 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a1d      	ldr	r2, [pc, #116]	@ (8003954 <HAL_ADC_ConfigChannel+0xa44>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d128      	bne.n	8003934 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a19      	ldr	r2, [pc, #100]	@ (800394c <HAL_ADC_ConfigChannel+0xa3c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d004      	beq.n	80038f6 <HAL_ADC_ConfigChannel+0x9e6>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a17      	ldr	r2, [pc, #92]	@ (8003950 <HAL_ADC_ConfigChannel+0xa40>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d101      	bne.n	80038fa <HAL_ADC_ConfigChannel+0x9ea>
 80038f6:	4a19      	ldr	r2, [pc, #100]	@ (800395c <HAL_ADC_ConfigChannel+0xa4c>)
 80038f8:	e000      	b.n	80038fc <HAL_ADC_ConfigChannel+0x9ec>
 80038fa:	4a13      	ldr	r2, [pc, #76]	@ (8003948 <HAL_ADC_ConfigChannel+0xa38>)
 80038fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003900:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003904:	4619      	mov	r1, r3
 8003906:	4610      	mov	r0, r2
 8003908:	f7fe fc21 	bl	800214e <LL_ADC_SetCommonPathInternalCh>
 800390c:	e012      	b.n	8003934 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003912:	f043 0220 	orr.w	r2, r3, #32
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8003920:	e008      	b.n	8003934 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003926:	f043 0220 	orr.w	r2, r3, #32
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800393c:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8003940:	4618      	mov	r0, r3
 8003942:	37e4      	adds	r7, #228	@ 0xe4
 8003944:	46bd      	mov	sp, r7
 8003946:	bd90      	pop	{r4, r7, pc}
 8003948:	58026300 	.word	0x58026300
 800394c:	40022000 	.word	0x40022000
 8003950:	40022100 	.word	0x40022100
 8003954:	58026000 	.word	0x58026000
 8003958:	c7520000 	.word	0xc7520000
 800395c:	40022300 	.word	0x40022300
 8003960:	24000010 	.word	0x24000010
 8003964:	053e2d63 	.word	0x053e2d63
 8003968:	c3210000 	.word	0xc3210000
 800396c:	cb840000 	.word	0xcb840000

08003970 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800397a:	2300      	movs	r3, #0
 800397c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe fe7e 	bl	8002688 <LL_ADC_REG_IsConversionOngoing>
 800398c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f7fe fea0 	bl	80026d8 <LL_ADC_INJ_IsConversionOngoing>
 8003998:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d103      	bne.n	80039a8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 8098 	beq.w	8003ad8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d02a      	beq.n	8003a0c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	7e5b      	ldrb	r3, [r3, #25]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d126      	bne.n	8003a0c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	7e1b      	ldrb	r3, [r3, #24]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d122      	bne.n	8003a0c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80039c6:	2301      	movs	r3, #1
 80039c8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80039ca:	e014      	b.n	80039f6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	4a45      	ldr	r2, [pc, #276]	@ (8003ae4 <ADC_ConversionStop+0x174>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d90d      	bls.n	80039f0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d8:	f043 0210 	orr.w	r2, r3, #16
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039e4:	f043 0201 	orr.w	r2, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e074      	b.n	8003ada <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	3301      	adds	r3, #1
 80039f4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a00:	2b40      	cmp	r3, #64	@ 0x40
 8003a02:	d1e3      	bne.n	80039cc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2240      	movs	r2, #64	@ 0x40
 8003a0a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d014      	beq.n	8003a3c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fe fe36 	bl	8002688 <LL_ADC_REG_IsConversionOngoing>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00c      	beq.n	8003a3c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fe fdf3 	bl	8002612 <LL_ADC_IsDisableOngoing>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d104      	bne.n	8003a3c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fe fe12 	bl	8002660 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d014      	beq.n	8003a6c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fe fe46 	bl	80026d8 <LL_ADC_INJ_IsConversionOngoing>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00c      	beq.n	8003a6c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fe fddb 	bl	8002612 <LL_ADC_IsDisableOngoing>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d104      	bne.n	8003a6c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fe fe22 	bl	80026b0 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d005      	beq.n	8003a7e <ADC_ConversionStop+0x10e>
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d105      	bne.n	8003a84 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003a78:	230c      	movs	r3, #12
 8003a7a:	617b      	str	r3, [r7, #20]
        break;
 8003a7c:	e005      	b.n	8003a8a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003a7e:	2308      	movs	r3, #8
 8003a80:	617b      	str	r3, [r7, #20]
        break;
 8003a82:	e002      	b.n	8003a8a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003a84:	2304      	movs	r3, #4
 8003a86:	617b      	str	r3, [r7, #20]
        break;
 8003a88:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003a8a:	f7fe fb1d 	bl	80020c8 <HAL_GetTick>
 8003a8e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003a90:	e01b      	b.n	8003aca <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003a92:	f7fe fb19 	bl	80020c8 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b05      	cmp	r3, #5
 8003a9e:	d914      	bls.n	8003aca <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00d      	beq.n	8003aca <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ab2:	f043 0210 	orr.w	r2, r3, #16
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003abe:	f043 0201 	orr.w	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e007      	b.n	8003ada <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1dc      	bne.n	8003a92 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3720      	adds	r7, #32
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	000cdbff 	.word	0x000cdbff

08003ae8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fe fd79 	bl	80025ec <LL_ADC_IsEnabled>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d16e      	bne.n	8003bde <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	4b38      	ldr	r3, [pc, #224]	@ (8003be8 <ADC_Enable+0x100>)
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00d      	beq.n	8003b2a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b12:	f043 0210 	orr.w	r2, r3, #16
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b1e:	f043 0201 	orr.w	r2, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e05a      	b.n	8003be0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fe fd34 	bl	800259c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003b34:	f7fe fac8 	bl	80020c8 <HAL_GetTick>
 8003b38:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a2b      	ldr	r2, [pc, #172]	@ (8003bec <ADC_Enable+0x104>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d004      	beq.n	8003b4e <ADC_Enable+0x66>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a29      	ldr	r2, [pc, #164]	@ (8003bf0 <ADC_Enable+0x108>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d101      	bne.n	8003b52 <ADC_Enable+0x6a>
 8003b4e:	4b29      	ldr	r3, [pc, #164]	@ (8003bf4 <ADC_Enable+0x10c>)
 8003b50:	e000      	b.n	8003b54 <ADC_Enable+0x6c>
 8003b52:	4b29      	ldr	r3, [pc, #164]	@ (8003bf8 <ADC_Enable+0x110>)
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fe fcb7 	bl	80024c8 <LL_ADC_GetMultimode>
 8003b5a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a23      	ldr	r2, [pc, #140]	@ (8003bf0 <ADC_Enable+0x108>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d002      	beq.n	8003b6c <ADC_Enable+0x84>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	e000      	b.n	8003b6e <ADC_Enable+0x86>
 8003b6c:	4b1f      	ldr	r3, [pc, #124]	@ (8003bec <ADC_Enable+0x104>)
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6812      	ldr	r2, [r2, #0]
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d02c      	beq.n	8003bd0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d130      	bne.n	8003bde <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b7c:	e028      	b.n	8003bd0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fe fd32 	bl	80025ec <LL_ADC_IsEnabled>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d104      	bne.n	8003b98 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fe fd02 	bl	800259c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b98:	f7fe fa96 	bl	80020c8 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d914      	bls.n	8003bd0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d00d      	beq.n	8003bd0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bb8:	f043 0210 	orr.w	r2, r3, #16
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bc4:	f043 0201 	orr.w	r2, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e007      	b.n	8003be0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d1cf      	bne.n	8003b7e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	8000003f 	.word	0x8000003f
 8003bec:	40022000 	.word	0x40022000
 8003bf0:	40022100 	.word	0x40022100
 8003bf4:	40022300 	.word	0x40022300
 8003bf8:	58026300 	.word	0x58026300

08003bfc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fe fd02 	bl	8002612 <LL_ADC_IsDisableOngoing>
 8003c0e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7fe fce9 	bl	80025ec <LL_ADC_IsEnabled>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d047      	beq.n	8003cb0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d144      	bne.n	8003cb0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 030d 	and.w	r3, r3, #13
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d10c      	bne.n	8003c4e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fe fcc3 	bl	80025c4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2203      	movs	r2, #3
 8003c44:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c46:	f7fe fa3f 	bl	80020c8 <HAL_GetTick>
 8003c4a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c4c:	e029      	b.n	8003ca2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c52:	f043 0210 	orr.w	r2, r3, #16
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c5e:	f043 0201 	orr.w	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e023      	b.n	8003cb2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c6a:	f7fe fa2d 	bl	80020c8 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d914      	bls.n	8003ca2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00d      	beq.n	8003ca2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c8a:	f043 0210 	orr.w	r2, r3, #16
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c96:	f043 0201 	orr.w	r2, r3, #1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e007      	b.n	8003cb2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1dc      	bne.n	8003c6a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a6c      	ldr	r2, [pc, #432]	@ (8003e7c <ADC_ConfigureBoostMode+0x1c0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d004      	beq.n	8003cd8 <ADC_ConfigureBoostMode+0x1c>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a6b      	ldr	r2, [pc, #428]	@ (8003e80 <ADC_ConfigureBoostMode+0x1c4>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d109      	bne.n	8003cec <ADC_ConfigureBoostMode+0x30>
 8003cd8:	4b6a      	ldr	r3, [pc, #424]	@ (8003e84 <ADC_ConfigureBoostMode+0x1c8>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	bf14      	ite	ne
 8003ce4:	2301      	movne	r3, #1
 8003ce6:	2300      	moveq	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	e008      	b.n	8003cfe <ADC_ConfigureBoostMode+0x42>
 8003cec:	4b66      	ldr	r3, [pc, #408]	@ (8003e88 <ADC_ConfigureBoostMode+0x1cc>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	bf14      	ite	ne
 8003cf8:	2301      	movne	r3, #1
 8003cfa:	2300      	moveq	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d01c      	beq.n	8003d3c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003d02:	f002 fdbb 	bl	800687c <HAL_RCC_GetHCLKFreq>
 8003d06:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d10:	d010      	beq.n	8003d34 <ADC_ConfigureBoostMode+0x78>
 8003d12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d16:	d873      	bhi.n	8003e00 <ADC_ConfigureBoostMode+0x144>
 8003d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d1c:	d002      	beq.n	8003d24 <ADC_ConfigureBoostMode+0x68>
 8003d1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d22:	d16d      	bne.n	8003e00 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	0c1b      	lsrs	r3, r3, #16
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d30:	60fb      	str	r3, [r7, #12]
        break;
 8003d32:	e068      	b.n	8003e06 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	089b      	lsrs	r3, r3, #2
 8003d38:	60fb      	str	r3, [r7, #12]
        break;
 8003d3a:	e064      	b.n	8003e06 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003d3c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003d40:	f04f 0100 	mov.w	r1, #0
 8003d44:	f003 ff96 	bl	8007c74 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d48:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003d52:	d051      	beq.n	8003df8 <ADC_ConfigureBoostMode+0x13c>
 8003d54:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003d58:	d854      	bhi.n	8003e04 <ADC_ConfigureBoostMode+0x148>
 8003d5a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003d5e:	d047      	beq.n	8003df0 <ADC_ConfigureBoostMode+0x134>
 8003d60:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003d64:	d84e      	bhi.n	8003e04 <ADC_ConfigureBoostMode+0x148>
 8003d66:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003d6a:	d03d      	beq.n	8003de8 <ADC_ConfigureBoostMode+0x12c>
 8003d6c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003d70:	d848      	bhi.n	8003e04 <ADC_ConfigureBoostMode+0x148>
 8003d72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d76:	d033      	beq.n	8003de0 <ADC_ConfigureBoostMode+0x124>
 8003d78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d7c:	d842      	bhi.n	8003e04 <ADC_ConfigureBoostMode+0x148>
 8003d7e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003d82:	d029      	beq.n	8003dd8 <ADC_ConfigureBoostMode+0x11c>
 8003d84:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003d88:	d83c      	bhi.n	8003e04 <ADC_ConfigureBoostMode+0x148>
 8003d8a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003d8e:	d01a      	beq.n	8003dc6 <ADC_ConfigureBoostMode+0x10a>
 8003d90:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003d94:	d836      	bhi.n	8003e04 <ADC_ConfigureBoostMode+0x148>
 8003d96:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003d9a:	d014      	beq.n	8003dc6 <ADC_ConfigureBoostMode+0x10a>
 8003d9c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003da0:	d830      	bhi.n	8003e04 <ADC_ConfigureBoostMode+0x148>
 8003da2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003da6:	d00e      	beq.n	8003dc6 <ADC_ConfigureBoostMode+0x10a>
 8003da8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dac:	d82a      	bhi.n	8003e04 <ADC_ConfigureBoostMode+0x148>
 8003dae:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003db2:	d008      	beq.n	8003dc6 <ADC_ConfigureBoostMode+0x10a>
 8003db4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003db8:	d824      	bhi.n	8003e04 <ADC_ConfigureBoostMode+0x148>
 8003dba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003dbe:	d002      	beq.n	8003dc6 <ADC_ConfigureBoostMode+0x10a>
 8003dc0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003dc4:	d11e      	bne.n	8003e04 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	0c9b      	lsrs	r3, r3, #18
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd4:	60fb      	str	r3, [r7, #12]
        break;
 8003dd6:	e016      	b.n	8003e06 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	091b      	lsrs	r3, r3, #4
 8003ddc:	60fb      	str	r3, [r7, #12]
        break;
 8003dde:	e012      	b.n	8003e06 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	095b      	lsrs	r3, r3, #5
 8003de4:	60fb      	str	r3, [r7, #12]
        break;
 8003de6:	e00e      	b.n	8003e06 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	099b      	lsrs	r3, r3, #6
 8003dec:	60fb      	str	r3, [r7, #12]
        break;
 8003dee:	e00a      	b.n	8003e06 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	09db      	lsrs	r3, r3, #7
 8003df4:	60fb      	str	r3, [r7, #12]
        break;
 8003df6:	e006      	b.n	8003e06 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	0a1b      	lsrs	r3, r3, #8
 8003dfc:	60fb      	str	r3, [r7, #12]
        break;
 8003dfe:	e002      	b.n	8003e06 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003e00:	bf00      	nop
 8003e02:	e000      	b.n	8003e06 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003e04:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	085b      	lsrs	r3, r3, #1
 8003e0a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4a1f      	ldr	r2, [pc, #124]	@ (8003e8c <ADC_ConfigureBoostMode+0x1d0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d808      	bhi.n	8003e26 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003e22:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003e24:	e025      	b.n	8003e72 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	4a19      	ldr	r2, [pc, #100]	@ (8003e90 <ADC_ConfigureBoostMode+0x1d4>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d80a      	bhi.n	8003e44 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e40:	609a      	str	r2, [r3, #8]
}
 8003e42:	e016      	b.n	8003e72 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4a13      	ldr	r2, [pc, #76]	@ (8003e94 <ADC_ConfigureBoostMode+0x1d8>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d80a      	bhi.n	8003e62 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e5e:	609a      	str	r2, [r3, #8]
}
 8003e60:	e007      	b.n	8003e72 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003e70:	609a      	str	r2, [r3, #8]
}
 8003e72:	bf00      	nop
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	40022000 	.word	0x40022000
 8003e80:	40022100 	.word	0x40022100
 8003e84:	40022300 	.word	0x40022300
 8003e88:	58026300 	.word	0x58026300
 8003e8c:	005f5e10 	.word	0x005f5e10
 8003e90:	00bebc20 	.word	0x00bebc20
 8003e94:	017d7840 	.word	0x017d7840

08003e98 <LL_ADC_IsEnabled>:
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d101      	bne.n	8003eb0 <LL_ADC_IsEnabled+0x18>
 8003eac:	2301      	movs	r3, #1
 8003eae:	e000      	b.n	8003eb2 <LL_ADC_IsEnabled+0x1a>
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <LL_ADC_REG_IsConversionOngoing>:
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d101      	bne.n	8003ed6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003ee4:	b590      	push	{r4, r7, lr}
 8003ee6:	b0a3      	sub	sp, #140	@ 0x8c
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e0c1      	b.n	8004086 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a5e      	ldr	r2, [pc, #376]	@ (8004090 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d102      	bne.n	8003f22 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003f1c:	4b5d      	ldr	r3, [pc, #372]	@ (8004094 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	e001      	b.n	8003f26 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10b      	bne.n	8003f44 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f30:	f043 0220 	orr.w	r2, r3, #32
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e0a0      	b.n	8004086 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff ffb9 	bl	8003ebe <LL_ADC_REG_IsConversionOngoing>
 8003f4c:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff ffb2 	bl	8003ebe <LL_ADC_REG_IsConversionOngoing>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f040 8081 	bne.w	8004064 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003f62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d17c      	bne.n	8004064 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a48      	ldr	r2, [pc, #288]	@ (8004090 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d004      	beq.n	8003f7e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a46      	ldr	r2, [pc, #280]	@ (8004094 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d101      	bne.n	8003f82 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003f7e:	4b46      	ldr	r3, [pc, #280]	@ (8004098 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003f80:	e000      	b.n	8003f84 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003f82:	4b46      	ldr	r3, [pc, #280]	@ (800409c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003f84:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d039      	beq.n	8004002 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003f8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f9e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a3a      	ldr	r2, [pc, #232]	@ (8004090 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d004      	beq.n	8003fb4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a39      	ldr	r2, [pc, #228]	@ (8004094 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d10e      	bne.n	8003fd2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003fb4:	4836      	ldr	r0, [pc, #216]	@ (8004090 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003fb6:	f7ff ff6f 	bl	8003e98 <LL_ADC_IsEnabled>
 8003fba:	4604      	mov	r4, r0
 8003fbc:	4835      	ldr	r0, [pc, #212]	@ (8004094 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003fbe:	f7ff ff6b 	bl	8003e98 <LL_ADC_IsEnabled>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4323      	orrs	r3, r4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	bf0c      	ite	eq
 8003fca:	2301      	moveq	r3, #1
 8003fcc:	2300      	movne	r3, #0
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	e008      	b.n	8003fe4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003fd2:	4833      	ldr	r0, [pc, #204]	@ (80040a0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003fd4:	f7ff ff60 	bl	8003e98 <LL_ADC_IsEnabled>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	bf0c      	ite	eq
 8003fde:	2301      	moveq	r3, #1
 8003fe0:	2300      	movne	r3, #0
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d047      	beq.n	8004078 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003fe8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	4b2d      	ldr	r3, [pc, #180]	@ (80040a4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003fee:	4013      	ands	r3, r2
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	6811      	ldr	r1, [r2, #0]
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	6892      	ldr	r2, [r2, #8]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ffe:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004000:	e03a      	b.n	8004078 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004002:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800400a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800400c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a1f      	ldr	r2, [pc, #124]	@ (8004090 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d004      	beq.n	8004022 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a1d      	ldr	r2, [pc, #116]	@ (8004094 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d10e      	bne.n	8004040 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004022:	481b      	ldr	r0, [pc, #108]	@ (8004090 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004024:	f7ff ff38 	bl	8003e98 <LL_ADC_IsEnabled>
 8004028:	4604      	mov	r4, r0
 800402a:	481a      	ldr	r0, [pc, #104]	@ (8004094 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800402c:	f7ff ff34 	bl	8003e98 <LL_ADC_IsEnabled>
 8004030:	4603      	mov	r3, r0
 8004032:	4323      	orrs	r3, r4
 8004034:	2b00      	cmp	r3, #0
 8004036:	bf0c      	ite	eq
 8004038:	2301      	moveq	r3, #1
 800403a:	2300      	movne	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	e008      	b.n	8004052 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004040:	4817      	ldr	r0, [pc, #92]	@ (80040a0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004042:	f7ff ff29 	bl	8003e98 <LL_ADC_IsEnabled>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	bf0c      	ite	eq
 800404c:	2301      	moveq	r3, #1
 800404e:	2300      	movne	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d010      	beq.n	8004078 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004056:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	4b12      	ldr	r3, [pc, #72]	@ (80040a4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800405c:	4013      	ands	r3, r2
 800405e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004060:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004062:	e009      	b.n	8004078 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004068:	f043 0220 	orr.w	r2, r3, #32
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004076:	e000      	b.n	800407a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004078:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004082:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004086:	4618      	mov	r0, r3
 8004088:	378c      	adds	r7, #140	@ 0x8c
 800408a:	46bd      	mov	sp, r7
 800408c:	bd90      	pop	{r4, r7, pc}
 800408e:	bf00      	nop
 8004090:	40022000 	.word	0x40022000
 8004094:	40022100 	.word	0x40022100
 8004098:	40022300 	.word	0x40022300
 800409c:	58026300 	.word	0x58026300
 80040a0:	58026000 	.word	0x58026000
 80040a4:	fffff0e0 	.word	0xfffff0e0

080040a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040b8:	4b0b      	ldr	r3, [pc, #44]	@ (80040e8 <__NVIC_SetPriorityGrouping+0x40>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80040c4:	4013      	ands	r3, r2
 80040c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80040d0:	4b06      	ldr	r3, [pc, #24]	@ (80040ec <__NVIC_SetPriorityGrouping+0x44>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040d6:	4a04      	ldr	r2, [pc, #16]	@ (80040e8 <__NVIC_SetPriorityGrouping+0x40>)
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	60d3      	str	r3, [r2, #12]
}
 80040dc:	bf00      	nop
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	e000ed00 	.word	0xe000ed00
 80040ec:	05fa0000 	.word	0x05fa0000

080040f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040f4:	4b04      	ldr	r3, [pc, #16]	@ (8004108 <__NVIC_GetPriorityGrouping+0x18>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	0a1b      	lsrs	r3, r3, #8
 80040fa:	f003 0307 	and.w	r3, r3, #7
}
 80040fe:	4618      	mov	r0, r3
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	e000ed00 	.word	0xe000ed00

0800410c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	4603      	mov	r3, r0
 8004114:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004116:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800411a:	2b00      	cmp	r3, #0
 800411c:	db0b      	blt.n	8004136 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800411e:	88fb      	ldrh	r3, [r7, #6]
 8004120:	f003 021f 	and.w	r2, r3, #31
 8004124:	4907      	ldr	r1, [pc, #28]	@ (8004144 <__NVIC_EnableIRQ+0x38>)
 8004126:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	2001      	movs	r0, #1
 800412e:	fa00 f202 	lsl.w	r2, r0, r2
 8004132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	e000e100 	.word	0xe000e100

08004148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	4603      	mov	r3, r0
 8004150:	6039      	str	r1, [r7, #0]
 8004152:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004154:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004158:	2b00      	cmp	r3, #0
 800415a:	db0a      	blt.n	8004172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	b2da      	uxtb	r2, r3
 8004160:	490c      	ldr	r1, [pc, #48]	@ (8004194 <__NVIC_SetPriority+0x4c>)
 8004162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004166:	0112      	lsls	r2, r2, #4
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	440b      	add	r3, r1
 800416c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004170:	e00a      	b.n	8004188 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	b2da      	uxtb	r2, r3
 8004176:	4908      	ldr	r1, [pc, #32]	@ (8004198 <__NVIC_SetPriority+0x50>)
 8004178:	88fb      	ldrh	r3, [r7, #6]
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	3b04      	subs	r3, #4
 8004180:	0112      	lsls	r2, r2, #4
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	440b      	add	r3, r1
 8004186:	761a      	strb	r2, [r3, #24]
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	e000e100 	.word	0xe000e100
 8004198:	e000ed00 	.word	0xe000ed00

0800419c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800419c:	b480      	push	{r7}
 800419e:	b089      	sub	sp, #36	@ 0x24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f1c3 0307 	rsb	r3, r3, #7
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	bf28      	it	cs
 80041ba:	2304      	movcs	r3, #4
 80041bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	3304      	adds	r3, #4
 80041c2:	2b06      	cmp	r3, #6
 80041c4:	d902      	bls.n	80041cc <NVIC_EncodePriority+0x30>
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	3b03      	subs	r3, #3
 80041ca:	e000      	b.n	80041ce <NVIC_EncodePriority+0x32>
 80041cc:	2300      	movs	r3, #0
 80041ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d0:	f04f 32ff 	mov.w	r2, #4294967295
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	43da      	mvns	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	401a      	ands	r2, r3
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041e4:	f04f 31ff 	mov.w	r1, #4294967295
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	fa01 f303 	lsl.w	r3, r1, r3
 80041ee:	43d9      	mvns	r1, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041f4:	4313      	orrs	r3, r2
         );
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3724      	adds	r7, #36	@ 0x24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3b01      	subs	r3, #1
 8004210:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004214:	d301      	bcc.n	800421a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004216:	2301      	movs	r3, #1
 8004218:	e00f      	b.n	800423a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800421a:	4a0a      	ldr	r2, [pc, #40]	@ (8004244 <SysTick_Config+0x40>)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3b01      	subs	r3, #1
 8004220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004222:	210f      	movs	r1, #15
 8004224:	f04f 30ff 	mov.w	r0, #4294967295
 8004228:	f7ff ff8e 	bl	8004148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800422c:	4b05      	ldr	r3, [pc, #20]	@ (8004244 <SysTick_Config+0x40>)
 800422e:	2200      	movs	r2, #0
 8004230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004232:	4b04      	ldr	r3, [pc, #16]	@ (8004244 <SysTick_Config+0x40>)
 8004234:	2207      	movs	r2, #7
 8004236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	e000e010 	.word	0xe000e010

08004248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7ff ff29 	bl	80040a8 <__NVIC_SetPriorityGrouping>
}
 8004256:	bf00      	nop
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b086      	sub	sp, #24
 8004262:	af00      	add	r7, sp, #0
 8004264:	4603      	mov	r3, r0
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	607a      	str	r2, [r7, #4]
 800426a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800426c:	f7ff ff40 	bl	80040f0 <__NVIC_GetPriorityGrouping>
 8004270:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	68b9      	ldr	r1, [r7, #8]
 8004276:	6978      	ldr	r0, [r7, #20]
 8004278:	f7ff ff90 	bl	800419c <NVIC_EncodePriority>
 800427c:	4602      	mov	r2, r0
 800427e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004282:	4611      	mov	r1, r2
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff ff5f 	bl	8004148 <__NVIC_SetPriority>
}
 800428a:	bf00      	nop
 800428c:	3718      	adds	r7, #24
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b082      	sub	sp, #8
 8004296:	af00      	add	r7, sp, #0
 8004298:	4603      	mov	r3, r0
 800429a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800429c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff ff33 	bl	800410c <__NVIC_EnableIRQ>
}
 80042a6:	bf00      	nop
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b082      	sub	sp, #8
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7ff ffa4 	bl	8004204 <SysTick_Config>
 80042bc:	4603      	mov	r3, r0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b098      	sub	sp, #96	@ 0x60
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80042d0:	4a84      	ldr	r2, [pc, #528]	@ (80044e4 <HAL_FDCAN_Init+0x21c>)
 80042d2:	f107 030c 	add.w	r3, r7, #12
 80042d6:	4611      	mov	r1, r2
 80042d8:	224c      	movs	r2, #76	@ 0x4c
 80042da:	4618      	mov	r0, r3
 80042dc:	f007 fbb8 	bl	800ba50 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e1c6      	b.n	8004678 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a7e      	ldr	r2, [pc, #504]	@ (80044e8 <HAL_FDCAN_Init+0x220>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d106      	bne.n	8004302 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80042fc:	461a      	mov	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d106      	bne.n	800431c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7fd fb06 	bl	8001928 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699a      	ldr	r2, [r3, #24]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0210 	bic.w	r2, r2, #16
 800432a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800432c:	f7fd fecc 	bl	80020c8 <HAL_GetTick>
 8004330:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004332:	e014      	b.n	800435e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004334:	f7fd fec8 	bl	80020c8 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b0a      	cmp	r3, #10
 8004340:	d90d      	bls.n	800435e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004348:	f043 0201 	orr.w	r2, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2203      	movs	r2, #3
 8004356:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e18c      	b.n	8004678 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b08      	cmp	r3, #8
 800436a:	d0e3      	beq.n	8004334 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699a      	ldr	r2, [r3, #24]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0201 	orr.w	r2, r2, #1
 800437a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800437c:	f7fd fea4 	bl	80020c8 <HAL_GetTick>
 8004380:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004382:	e014      	b.n	80043ae <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004384:	f7fd fea0 	bl	80020c8 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b0a      	cmp	r3, #10
 8004390:	d90d      	bls.n	80043ae <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004398:	f043 0201 	orr.w	r2, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2203      	movs	r2, #3
 80043a6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e164      	b.n	8004678 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0e3      	beq.n	8004384 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699a      	ldr	r2, [r3, #24]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0202 	orr.w	r2, r2, #2
 80043ca:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	7c1b      	ldrb	r3, [r3, #16]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d108      	bne.n	80043e6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043e2:	619a      	str	r2, [r3, #24]
 80043e4:	e007      	b.n	80043f6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	699a      	ldr	r2, [r3, #24]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043f4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	7c5b      	ldrb	r3, [r3, #17]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d108      	bne.n	8004410 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	699a      	ldr	r2, [r3, #24]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800440c:	619a      	str	r2, [r3, #24]
 800440e:	e007      	b.n	8004420 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699a      	ldr	r2, [r3, #24]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800441e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	7c9b      	ldrb	r3, [r3, #18]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d108      	bne.n	800443a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	699a      	ldr	r2, [r3, #24]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004436:	619a      	str	r2, [r3, #24]
 8004438:	e007      	b.n	800444a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	699a      	ldr	r2, [r3, #24]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004448:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699a      	ldr	r2, [r3, #24]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800446e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691a      	ldr	r2, [r3, #16]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0210 	bic.w	r2, r2, #16
 800447e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d108      	bne.n	800449a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699a      	ldr	r2, [r3, #24]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0204 	orr.w	r2, r2, #4
 8004496:	619a      	str	r2, [r3, #24]
 8004498:	e030      	b.n	80044fc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d02c      	beq.n	80044fc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d020      	beq.n	80044ec <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	699a      	ldr	r2, [r3, #24]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80044b8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f042 0210 	orr.w	r2, r2, #16
 80044c8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d114      	bne.n	80044fc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	699a      	ldr	r2, [r3, #24]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f042 0220 	orr.w	r2, r2, #32
 80044e0:	619a      	str	r2, [r3, #24]
 80044e2:	e00b      	b.n	80044fc <HAL_FDCAN_Init+0x234>
 80044e4:	0800c588 	.word	0x0800c588
 80044e8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699a      	ldr	r2, [r3, #24]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0220 	orr.w	r2, r2, #32
 80044fa:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	3b01      	subs	r3, #1
 8004502:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	3b01      	subs	r3, #1
 800450a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800450c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004514:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	3b01      	subs	r3, #1
 800451e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004524:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004526:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004530:	d115      	bne.n	800455e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004536:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453c:	3b01      	subs	r3, #1
 800453e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004540:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004546:	3b01      	subs	r3, #1
 8004548:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800454a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004552:	3b01      	subs	r3, #1
 8004554:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800455a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800455c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004584:	4413      	add	r3, r2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d011      	beq.n	80045ae <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004592:	f023 0107 	bic.w	r1, r3, #7
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	3360      	adds	r3, #96	@ 0x60
 800459e:	443b      	add	r3, r7
 80045a0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d011      	beq.n	80045da <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80045be:	f023 0107 	bic.w	r1, r3, #7
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	3360      	adds	r3, #96	@ 0x60
 80045ca:	443b      	add	r3, r7
 80045cc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d012      	beq.n	8004608 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80045ea:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	3360      	adds	r3, #96	@ 0x60
 80045f6:	443b      	add	r3, r7
 80045f8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80045fc:	011a      	lsls	r2, r3, #4
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800460c:	2b00      	cmp	r3, #0
 800460e:	d012      	beq.n	8004636 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004618:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	3360      	adds	r3, #96	@ 0x60
 8004624:	443b      	add	r3, r7
 8004626:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800462a:	021a      	lsls	r2, r3, #8
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a11      	ldr	r2, [pc, #68]	@ (8004680 <HAL_FDCAN_Init+0x3b8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d107      	bne.n	8004650 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f022 0203 	bic.w	r2, r2, #3
 800464e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 fde5 	bl	8005238 <FDCAN_CalcultateRamBlockAddresses>
 800466e:	4603      	mov	r3, r0
 8004670:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8004674:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8004678:	4618      	mov	r0, r3
 800467a:	3760      	adds	r7, #96	@ 0x60
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	4000a000 	.word	0x4000a000

08004684 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8004684:	b480      	push	{r7}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004694:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004696:	7bfb      	ldrb	r3, [r7, #15]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d002      	beq.n	80046a2 <HAL_FDCAN_ConfigFilter+0x1e>
 800469c:	7bfb      	ldrb	r3, [r7, #15]
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d157      	bne.n	8004752 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d12b      	bne.n	8004702 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	2b07      	cmp	r3, #7
 80046b0:	d10d      	bne.n	80046ce <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	69db      	ldr	r3, [r3, #28]
 80046bc:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80046be:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80046c4:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80046c6:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	e00e      	b.n	80046ec <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80046da:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80046e2:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80046e8:	4313      	orrs	r3, r2
 80046ea:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	e025      	b.n	800474e <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	075a      	lsls	r2, r3, #29
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	4313      	orrs	r3, r2
 800470e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	2b07      	cmp	r3, #7
 8004716:	d103      	bne.n	8004720 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	613b      	str	r3, [r7, #16]
 800471e:	e006      	b.n	800472e <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	079a      	lsls	r2, r3, #30
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	4313      	orrs	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	4413      	add	r3, r2
 800473a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	3304      	adds	r3, #4
 8004746:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	e008      	b.n	8004764 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004758:	f043 0202 	orr.w	r2, r3, #2
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
  }
}
 8004764:	4618      	mov	r0, r3
 8004766:	371c      	adds	r7, #28
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b01      	cmp	r3, #1
 8004782:	d111      	bne.n	80047a8 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699a      	ldr	r2, [r3, #24]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0201 	bic.w	r2, r2, #1
 800479a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	e008      	b.n	80047ba <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047ae:	f043 0204 	orr.w	r2, r3, #4
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
  }
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b086      	sub	sp, #24
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d141      	bne.n	8004862 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80047e6:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d109      	bne.n	8004802 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047f4:	f043 0220 	orr.w	r2, r3, #32
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e038      	b.n	8004874 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800480a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d009      	beq.n	8004826 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004818:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e026      	b.n	8004874 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800482e:	0c1b      	lsrs	r3, r3, #16
 8004830:	f003 031f 	and.w	r3, r3, #31
 8004834:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	68b9      	ldr	r1, [r7, #8]
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 fe81 	bl	8005544 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2101      	movs	r1, #1
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	fa01 f202 	lsl.w	r2, r1, r2
 800484e:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004852:	2201      	movs	r2, #1
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	409a      	lsls	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	e008      	b.n	8004874 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004868:	f043 0208 	orr.w	r2, r3, #8
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
  }
}
 8004874:	4618      	mov	r0, r3
 8004876:	3718      	adds	r7, #24
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800487c:	b480      	push	{r7}
 800487e:	b08b      	sub	sp, #44	@ 0x2c
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800488a:	2300      	movs	r3, #0
 800488c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004894:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8004896:	7efb      	ldrb	r3, [r7, #27]
 8004898:	2b02      	cmp	r3, #2
 800489a:	f040 8149 	bne.w	8004b30 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2b40      	cmp	r3, #64	@ 0x40
 80048a2:	d14c      	bne.n	800493e <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80048ac:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d109      	bne.n	80048c8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048ba:	f043 0220 	orr.w	r2, r3, #32
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e13c      	b.n	8004b42 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d109      	bne.n	80048ec <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e12a      	b.n	8004b42 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048f4:	0e1b      	lsrs	r3, r3, #24
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d10a      	bne.n	8004914 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004906:	0fdb      	lsrs	r3, r3, #31
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b01      	cmp	r3, #1
 800490e:	d101      	bne.n	8004914 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8004910:	2301      	movs	r3, #1
 8004912:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800491c:	0a1b      	lsrs	r3, r3, #8
 800491e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004922:	69fa      	ldr	r2, [r7, #28]
 8004924:	4413      	add	r3, r2
 8004926:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004930:	69f9      	ldr	r1, [r7, #28]
 8004932:	fb01 f303 	mul.w	r3, r1, r3
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	627b      	str	r3, [r7, #36]	@ 0x24
 800493c:	e068      	b.n	8004a10 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2b41      	cmp	r3, #65	@ 0x41
 8004942:	d14c      	bne.n	80049de <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800494c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d109      	bne.n	8004968 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800495a:	f043 0220 	orr.w	r2, r3, #32
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e0ec      	b.n	8004b42 <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004970:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004974:	2b00      	cmp	r3, #0
 8004976:	d109      	bne.n	800498c <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800497e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e0da      	b.n	8004b42 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004994:	0e1b      	lsrs	r3, r3, #24
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b01      	cmp	r3, #1
 800499c:	d10a      	bne.n	80049b4 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80049a6:	0fdb      	lsrs	r3, r3, #31
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80049b0:	2301      	movs	r3, #1
 80049b2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80049bc:	0a1b      	lsrs	r3, r3, #8
 80049be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049c2:	69fa      	ldr	r2, [r7, #28]
 80049c4:	4413      	add	r3, r2
 80049c6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049d0:	69f9      	ldr	r1, [r7, #28]
 80049d2:	fb01 f303 	mul.w	r3, r1, r3
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	627b      	str	r3, [r7, #36]	@ 0x24
 80049dc:	e018      	b.n	8004a10 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d309      	bcc.n	80049fc <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049ee:	f043 0220 	orr.w	r2, r3, #32
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e0a2      	b.n	8004b42 <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a04:	68b9      	ldr	r1, [r7, #8]
 8004a06:	fb01 f303 	mul.w	r3, r1, r3
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d107      	bne.n	8004a34 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	0c9b      	lsrs	r3, r3, #18
 8004a2a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	e005      	b.n	8004a40 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8004a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	0c1b      	lsrs	r3, r3, #16
 8004a6e:	f003 020f 	and.w	r2, r3, #15
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	0e1b      	lsrs	r3, r3, #24
 8004a94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	0fda      	lsrs	r2, r3, #31
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aae:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	623b      	str	r3, [r7, #32]
 8004ab4:	e00a      	b.n	8004acc <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	441a      	add	r2, r3
 8004abc:	6839      	ldr	r1, [r7, #0]
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	440b      	add	r3, r1
 8004ac2:	7812      	ldrb	r2, [r2, #0]
 8004ac4:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	623b      	str	r3, [r7, #32]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	4a1f      	ldr	r2, [pc, #124]	@ (8004b50 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8004ad2:	5cd3      	ldrb	r3, [r2, r3]
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d3ec      	bcc.n	8004ab6 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b40      	cmp	r3, #64	@ 0x40
 8004ae0:	d105      	bne.n	8004aee <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69fa      	ldr	r2, [r7, #28]
 8004ae8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8004aec:	e01e      	b.n	8004b2c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2b41      	cmp	r3, #65	@ 0x41
 8004af2:	d105      	bne.n	8004b00 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	69fa      	ldr	r2, [r7, #28]
 8004afa:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8004afe:	e015      	b.n	8004b2c <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2b1f      	cmp	r3, #31
 8004b04:	d808      	bhi.n	8004b18 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b12:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8004b16:	e009      	b.n	8004b2c <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f003 021f 	and.w	r2, r3, #31
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2101      	movs	r1, #1
 8004b24:	fa01 f202 	lsl.w	r2, r1, r2
 8004b28:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	e008      	b.n	8004b42 <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b36:	f043 0208 	orr.w	r2, r3, #8
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
  }
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	372c      	adds	r7, #44	@ 0x2c
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	0800c5e4 	.word	0x0800c5e4

08004b54 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004b66:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004b68:	7dfb      	ldrb	r3, [r7, #23]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d002      	beq.n	8004b74 <HAL_FDCAN_ActivateNotification+0x20>
 8004b6e:	7dfb      	ldrb	r3, [r7, #23]
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d155      	bne.n	8004c20 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d108      	bne.n	8004b94 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f042 0201 	orr.w	r2, r2, #1
 8004b90:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b92:	e014      	b.n	8004bbe <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d108      	bne.n	8004bb6 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0202 	orr.w	r2, r2, #2
 8004bb2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004bb4:	e003      	b.n	8004bbe <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2203      	movs	r2, #3
 8004bbc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d009      	beq.n	8004bdc <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d009      	beq.n	8004bfa <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	4b0f      	ldr	r3, [pc, #60]	@ (8004c40 <HAL_FDCAN_ActivateNotification+0xec>)
 8004c04:	4013      	ands	r3, r2
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	6812      	ldr	r2, [r2, #0]
 8004c0a:	430b      	orrs	r3, r1
 8004c0c:	6553      	str	r3, [r2, #84]	@ 0x54
 8004c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c44 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004c10:	695a      	ldr	r2, [r3, #20]
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	0f9b      	lsrs	r3, r3, #30
 8004c16:	490b      	ldr	r1, [pc, #44]	@ (8004c44 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	e008      	b.n	8004c32 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c26:	f043 0202 	orr.w	r2, r3, #2
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
  }
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	371c      	adds	r7, #28
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	3fcfffff 	.word	0x3fcfffff
 8004c44:	4000a800 	.word	0x4000a800

08004c48 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b096      	sub	sp, #88	@ 0x58
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004c50:	4b95      	ldr	r3, [pc, #596]	@ (8004ea8 <HAL_FDCAN_IRQHandler+0x260>)
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	079b      	lsls	r3, r3, #30
 8004c56:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004c58:	4b93      	ldr	r3, [pc, #588]	@ (8004ea8 <HAL_FDCAN_IRQHandler+0x260>)
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	079b      	lsls	r3, r3, #30
 8004c5e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004c60:	4013      	ands	r3, r2
 8004c62:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c6a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004c6e:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c76:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004c78:	4013      	ands	r3, r2
 8004c7a:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c90:	4013      	ands	r3, r2
 8004c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ca8:	4013      	ands	r3, r2
 8004caa:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cb2:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8004cb6:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cca:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8004cce:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cd8:	4013      	ands	r3, r2
 8004cda:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00f      	beq.n	8004d16 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00a      	beq.n	8004d16 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d08:	651a      	str	r2, [r3, #80]	@ 0x50
 8004d0a:	4b67      	ldr	r3, [pc, #412]	@ (8004ea8 <HAL_FDCAN_IRQHandler+0x260>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 fa44 	bl	800519e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004d16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d01c      	beq.n	8004d5a <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d017      	beq.n	8004d5a <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004d32:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d3e:	4013      	ands	r3, r2
 8004d40:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d4a:	651a      	str	r2, [r3, #80]	@ 0x50
 8004d4c:	4b56      	ldr	r3, [pc, #344]	@ (8004ea8 <HAL_FDCAN_IRQHandler+0x260>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004d52:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f9f9 	bl	800514c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8004d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00d      	beq.n	8004d7c <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d66:	4b51      	ldr	r3, [pc, #324]	@ (8004eac <HAL_FDCAN_IRQHandler+0x264>)
 8004d68:	400b      	ands	r3, r1
 8004d6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d6c:	4a4e      	ldr	r2, [pc, #312]	@ (8004ea8 <HAL_FDCAN_IRQHandler+0x260>)
 8004d6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d70:	0f9b      	lsrs	r3, r3, #30
 8004d72:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8004d74:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f9b2 	bl	80050e0 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004d7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00d      	beq.n	8004d9e <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004d88:	4b48      	ldr	r3, [pc, #288]	@ (8004eac <HAL_FDCAN_IRQHandler+0x264>)
 8004d8a:	400b      	ands	r3, r1
 8004d8c:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d8e:	4a46      	ldr	r2, [pc, #280]	@ (8004ea8 <HAL_FDCAN_IRQHandler+0x260>)
 8004d90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d92:	0f9b      	lsrs	r3, r3, #30
 8004d94:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004d96:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f9ac 	bl	80050f6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004d9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00d      	beq.n	8004dc0 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004daa:	4b40      	ldr	r3, [pc, #256]	@ (8004eac <HAL_FDCAN_IRQHandler+0x264>)
 8004dac:	400b      	ands	r3, r1
 8004dae:	6513      	str	r3, [r2, #80]	@ 0x50
 8004db0:	4a3d      	ldr	r2, [pc, #244]	@ (8004ea8 <HAL_FDCAN_IRQHandler+0x260>)
 8004db2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004db4:	0f9b      	lsrs	r3, r3, #30
 8004db6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004db8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7fc fbda 	bl	8001574 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004dc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00d      	beq.n	8004de2 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004dcc:	4b37      	ldr	r3, [pc, #220]	@ (8004eac <HAL_FDCAN_IRQHandler+0x264>)
 8004dce:	400b      	ands	r3, r1
 8004dd0:	6513      	str	r3, [r2, #80]	@ 0x50
 8004dd2:	4a35      	ldr	r2, [pc, #212]	@ (8004ea8 <HAL_FDCAN_IRQHandler+0x260>)
 8004dd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dd6:	0f9b      	lsrs	r3, r3, #30
 8004dd8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004dda:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f995 	bl	800510c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004de4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00f      	beq.n	8004e0c <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004dfe:	651a      	str	r2, [r3, #80]	@ 0x50
 8004e00:	4b29      	ldr	r3, [pc, #164]	@ (8004ea8 <HAL_FDCAN_IRQHandler+0x260>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f98b 	bl	8005122 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8004e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d01c      	beq.n	8004e50 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d017      	beq.n	8004e50 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004e28:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e34:	4013      	ands	r3, r2
 8004e36:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e40:	651a      	str	r2, [r3, #80]	@ 0x50
 8004e42:	4b19      	ldr	r3, [pc, #100]	@ (8004ea8 <HAL_FDCAN_IRQHandler+0x260>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004e48:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f973 	bl	8005136 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00f      	beq.n	8004e7a <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00a      	beq.n	8004e7a <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004e6c:	651a      	str	r2, [r3, #80]	@ 0x50
 8004e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ea8 <HAL_FDCAN_IRQHandler+0x260>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f974 	bl	8005162 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d015      	beq.n	8004eb0 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d010      	beq.n	8004eb0 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004e96:	651a      	str	r2, [r3, #80]	@ 0x50
 8004e98:	4b03      	ldr	r3, [pc, #12]	@ (8004ea8 <HAL_FDCAN_IRQHandler+0x260>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f969 	bl	8005176 <HAL_FDCAN_TimestampWraparoundCallback>
 8004ea4:	e004      	b.n	8004eb0 <HAL_FDCAN_IRQHandler+0x268>
 8004ea6:	bf00      	nop
 8004ea8:	4000a800 	.word	0x4000a800
 8004eac:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004eb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00f      	beq.n	8004eda <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ebc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004ecc:	651a      	str	r2, [r3, #80]	@ 0x50
 8004ece:	4b81      	ldr	r3, [pc, #516]	@ (80050d4 <HAL_FDCAN_IRQHandler+0x48c>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f958 	bl	800518a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d014      	beq.n	8004f0e <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00f      	beq.n	8004f0e <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004ef6:	651a      	str	r2, [r3, #80]	@ 0x50
 8004ef8:	4b76      	ldr	r3, [pc, #472]	@ (80050d4 <HAL_FDCAN_IRQHandler+0x48c>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f04:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004f0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00d      	beq.n	8004f30 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f1a:	4b6f      	ldr	r3, [pc, #444]	@ (80050d8 <HAL_FDCAN_IRQHandler+0x490>)
 8004f1c:	400b      	ands	r3, r1
 8004f1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f20:	4a6c      	ldr	r2, [pc, #432]	@ (80050d4 <HAL_FDCAN_IRQHandler+0x48c>)
 8004f22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f24:	0f9b      	lsrs	r3, r3, #30
 8004f26:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004f28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f94b 	bl	80051c6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004f30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d011      	beq.n	8004f5a <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f3c:	4b66      	ldr	r3, [pc, #408]	@ (80050d8 <HAL_FDCAN_IRQHandler+0x490>)
 8004f3e:	400b      	ands	r3, r1
 8004f40:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f42:	4a64      	ldr	r2, [pc, #400]	@ (80050d4 <HAL_FDCAN_IRQHandler+0x48c>)
 8004f44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f46:	0f9b      	lsrs	r3, r3, #30
 8004f48:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004f50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a5f      	ldr	r2, [pc, #380]	@ (80050dc <HAL_FDCAN_IRQHandler+0x494>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	f040 80aa 	bne.w	80050ba <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f003 0303 	and.w	r3, r3, #3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 80a2 	beq.w	80050ba <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	f003 030f 	and.w	r3, r3, #15
 8004f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f98:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004fb0:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fba:	4013      	ands	r3, r2
 8004fbc:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8004fc8:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd0:	6a3a      	ldr	r2, [r7, #32]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8004fe0:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe8:	69fa      	ldr	r2, [r7, #28]
 8004fea:	4013      	ands	r3, r2
 8004fec:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff4:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8004ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005000:	2b00      	cmp	r3, #0
 8005002:	d007      	beq.n	8005014 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800500a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800500c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f8e4 	bl	80051dc <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005016:	2b00      	cmp	r3, #0
 8005018:	d007      	beq.n	800502a <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005020:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005022:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f8e4 	bl	80051f2 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005030:	2b00      	cmp	r3, #0
 8005032:	d019      	beq.n	8005068 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800503a:	2b00      	cmp	r3, #0
 800503c:	d014      	beq.n	8005068 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005044:	0c1b      	lsrs	r3, r3, #16
 8005046:	b29b      	uxth	r3, r3
 8005048:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005050:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005054:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2240      	movs	r2, #64	@ 0x40
 800505c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	6939      	ldr	r1, [r7, #16]
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f8d0 	bl	8005208 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506a:	2b00      	cmp	r3, #0
 800506c:	d007      	beq.n	800507e <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005074:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005076:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f8d1 	bl	8005220 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00b      	beq.n	800509c <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	6a3a      	ldr	r2, [r7, #32]
 800508a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	431a      	orrs	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00b      	beq.n	80050ba <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	69fa      	ldr	r2, [r7, #28]
 80050a8:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f874 	bl	80051b2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80050ca:	bf00      	nop
 80050cc:	3758      	adds	r7, #88	@ 0x58
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	4000a800 	.word	0x4000a800
 80050d8:	3fcfffff 	.word	0x3fcfffff
 80050dc:	4000a000 	.word	0x4000a000

080050e0 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
 80050fe:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005116:	bf00      	nop
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
 800513e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005156:	bf00      	nop
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
 80051ce:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80051e6:	bf00      	nop
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005214:	bf00      	nop
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
	...

08005238 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005244:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800524e:	4ba7      	ldr	r3, [pc, #668]	@ (80054ec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005250:	4013      	ands	r3, r2
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	0091      	lsls	r1, r2, #2
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	6812      	ldr	r2, [r2, #0]
 800525a:	430b      	orrs	r3, r1
 800525c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005268:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005270:	041a      	lsls	r2, r3, #16
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	4413      	add	r3, r2
 8005284:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800528e:	4b97      	ldr	r3, [pc, #604]	@ (80054ec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005290:	4013      	ands	r3, r2
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	0091      	lsls	r1, r2, #2
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6812      	ldr	r2, [r2, #0]
 800529a:	430b      	orrs	r3, r1
 800529c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052a8:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052b0:	041a      	lsls	r2, r3, #16
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	4413      	add	r3, r2
 80052c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80052d0:	4b86      	ldr	r3, [pc, #536]	@ (80054ec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80052d2:	4013      	ands	r3, r2
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	0091      	lsls	r1, r2, #2
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6812      	ldr	r2, [r2, #0]
 80052dc:	430b      	orrs	r3, r1
 80052de:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80052ea:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f2:	041a      	lsls	r2, r3, #16
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005306:	fb02 f303 	mul.w	r3, r2, r3
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	4413      	add	r3, r2
 800530e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005318:	4b74      	ldr	r3, [pc, #464]	@ (80054ec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800531a:	4013      	ands	r3, r2
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	0091      	lsls	r1, r2, #2
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6812      	ldr	r2, [r2, #0]
 8005324:	430b      	orrs	r3, r1
 8005326:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005332:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800533a:	041a      	lsls	r2, r3, #16
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800534e:	fb02 f303 	mul.w	r3, r2, r3
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	4413      	add	r3, r2
 8005356:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005360:	4b62      	ldr	r3, [pc, #392]	@ (80054ec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005362:	4013      	ands	r3, r2
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	0091      	lsls	r1, r2, #2
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	6812      	ldr	r2, [r2, #0]
 800536c:	430b      	orrs	r3, r1
 800536e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800537a:	fb02 f303 	mul.w	r3, r2, r3
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	4413      	add	r3, r2
 8005382:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800538c:	4b57      	ldr	r3, [pc, #348]	@ (80054ec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800538e:	4013      	ands	r3, r2
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	0091      	lsls	r1, r2, #2
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	6812      	ldr	r2, [r2, #0]
 8005398:	430b      	orrs	r3, r1
 800539a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053a6:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ae:	041a      	lsls	r2, r3, #16
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	4413      	add	r3, r2
 80053c4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80053ce:	4b47      	ldr	r3, [pc, #284]	@ (80054ec <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80053d0:	4013      	ands	r3, r2
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	0091      	lsls	r1, r2, #2
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	6812      	ldr	r2, [r2, #0]
 80053da:	430b      	orrs	r3, r1
 80053dc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80053e8:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053f0:	041a      	lsls	r2, r3, #16
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005404:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800540c:	061a      	lsls	r2, r3, #24
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	430a      	orrs	r2, r1
 8005414:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800541c:	4b34      	ldr	r3, [pc, #208]	@ (80054f0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800541e:	4413      	add	r3, r2
 8005420:	009a      	lsls	r2, r3, #2
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	441a      	add	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800543e:	00db      	lsls	r3, r3, #3
 8005440:	441a      	add	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544e:	6879      	ldr	r1, [r7, #4]
 8005450:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8005452:	fb01 f303 	mul.w	r3, r1, r3
 8005456:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005458:	441a      	add	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005466:	6879      	ldr	r1, [r7, #4]
 8005468:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800546a:	fb01 f303 	mul.w	r3, r1, r3
 800546e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005470:	441a      	add	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8005482:	fb01 f303 	mul.w	r3, r1, r3
 8005486:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005488:	441a      	add	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	441a      	add	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80054b2:	fb01 f303 	mul.w	r3, r1, r3
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	441a      	add	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80054ce:	fb01 f303 	mul.w	r3, r1, r3
 80054d2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80054d4:	441a      	add	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054e2:	4a04      	ldr	r2, [pc, #16]	@ (80054f4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d915      	bls.n	8005514 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80054e8:	e006      	b.n	80054f8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80054ea:	bf00      	nop
 80054ec:	ffff0003 	.word	0xffff0003
 80054f0:	10002b00 	.word	0x10002b00
 80054f4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054fe:	f043 0220 	orr.w	r2, r3, #32
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2203      	movs	r2, #3
 800550c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e010      	b.n	8005536 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005518:	60fb      	str	r3, [r7, #12]
 800551a:	e005      	b.n	8005528 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	3304      	adds	r3, #4
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	429a      	cmp	r2, r3
 8005532:	d3f3      	bcc.n	800551c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop

08005544 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8005544:	b480      	push	{r7}
 8005546:	b089      	sub	sp, #36	@ 0x24
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10a      	bne.n	8005570 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005562:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800556a:	4313      	orrs	r3, r2
 800556c:	61fb      	str	r3, [r7, #28]
 800556e:	e00a      	b.n	8005586 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005578:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800557e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005580:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005584:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005590:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005596:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800559c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80055a4:	4313      	orrs	r3, r2
 80055a6:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055b2:	6839      	ldr	r1, [r7, #0]
 80055b4:	fb01 f303 	mul.w	r3, r1, r3
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	69fa      	ldr	r2, [r7, #28]
 80055c2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	3304      	adds	r3, #4
 80055c8:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	3304      	adds	r3, #4
 80055d4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80055d6:	2300      	movs	r3, #0
 80055d8:	617b      	str	r3, [r7, #20]
 80055da:	e020      	b.n	800561e <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	3303      	adds	r3, #3
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	4413      	add	r3, r2
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	3302      	adds	r3, #2
 80055ec:	6879      	ldr	r1, [r7, #4]
 80055ee:	440b      	add	r3, r1
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80055f4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	3301      	adds	r3, #1
 80055fa:	6879      	ldr	r1, [r7, #4]
 80055fc:	440b      	add	r3, r1
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8005602:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	440a      	add	r2, r1
 800560a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800560c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	3304      	adds	r3, #4
 8005616:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	3304      	adds	r3, #4
 800561c:	617b      	str	r3, [r7, #20]
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	4a06      	ldr	r2, [pc, #24]	@ (800563c <FDCAN_CopyMessageToRAM+0xf8>)
 8005624:	5cd3      	ldrb	r3, [r2, r3]
 8005626:	461a      	mov	r2, r3
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	4293      	cmp	r3, r2
 800562c:	d3d6      	bcc.n	80055dc <FDCAN_CopyMessageToRAM+0x98>
  }
}
 800562e:	bf00      	nop
 8005630:	bf00      	nop
 8005632:	3724      	adds	r7, #36	@ 0x24
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	0800c5e4 	.word	0x0800c5e4

08005640 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005640:	b480      	push	{r7}
 8005642:	b089      	sub	sp, #36	@ 0x24
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800564a:	2300      	movs	r3, #0
 800564c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800564e:	4b86      	ldr	r3, [pc, #536]	@ (8005868 <HAL_GPIO_Init+0x228>)
 8005650:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005652:	e18c      	b.n	800596e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	2101      	movs	r1, #1
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	fa01 f303 	lsl.w	r3, r1, r3
 8005660:	4013      	ands	r3, r2
 8005662:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 817e 	beq.w	8005968 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f003 0303 	and.w	r3, r3, #3
 8005674:	2b01      	cmp	r3, #1
 8005676:	d005      	beq.n	8005684 <HAL_GPIO_Init+0x44>
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f003 0303 	and.w	r3, r3, #3
 8005680:	2b02      	cmp	r3, #2
 8005682:	d130      	bne.n	80056e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	2203      	movs	r2, #3
 8005690:	fa02 f303 	lsl.w	r3, r2, r3
 8005694:	43db      	mvns	r3, r3
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	4013      	ands	r3, r2
 800569a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	68da      	ldr	r2, [r3, #12]
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	fa02 f303 	lsl.w	r3, r2, r3
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80056ba:	2201      	movs	r2, #1
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	fa02 f303 	lsl.w	r3, r2, r3
 80056c2:	43db      	mvns	r3, r3
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	4013      	ands	r3, r2
 80056c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	091b      	lsrs	r3, r3, #4
 80056d0:	f003 0201 	and.w	r2, r3, #1
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	fa02 f303 	lsl.w	r3, r2, r3
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	4313      	orrs	r3, r2
 80056de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	2b03      	cmp	r3, #3
 80056f0:	d017      	beq.n	8005722 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	005b      	lsls	r3, r3, #1
 80056fc:	2203      	movs	r2, #3
 80056fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005702:	43db      	mvns	r3, r3
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	4013      	ands	r3, r2
 8005708:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	689a      	ldr	r2, [r3, #8]
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	005b      	lsls	r3, r3, #1
 8005712:	fa02 f303 	lsl.w	r3, r2, r3
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	4313      	orrs	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f003 0303 	and.w	r3, r3, #3
 800572a:	2b02      	cmp	r3, #2
 800572c:	d123      	bne.n	8005776 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	08da      	lsrs	r2, r3, #3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	3208      	adds	r2, #8
 8005736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800573a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	f003 0307 	and.w	r3, r3, #7
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	220f      	movs	r2, #15
 8005746:	fa02 f303 	lsl.w	r3, r2, r3
 800574a:	43db      	mvns	r3, r3
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	4013      	ands	r3, r2
 8005750:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	691a      	ldr	r2, [r3, #16]
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	fa02 f303 	lsl.w	r3, r2, r3
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	4313      	orrs	r3, r2
 8005766:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	08da      	lsrs	r2, r3, #3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3208      	adds	r2, #8
 8005770:	69b9      	ldr	r1, [r7, #24]
 8005772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	2203      	movs	r2, #3
 8005782:	fa02 f303 	lsl.w	r3, r2, r3
 8005786:	43db      	mvns	r3, r3
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	4013      	ands	r3, r2
 800578c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f003 0203 	and.w	r2, r3, #3
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	fa02 f303 	lsl.w	r3, r2, r3
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f000 80d8 	beq.w	8005968 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057b8:	4b2c      	ldr	r3, [pc, #176]	@ (800586c <HAL_GPIO_Init+0x22c>)
 80057ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80057be:	4a2b      	ldr	r2, [pc, #172]	@ (800586c <HAL_GPIO_Init+0x22c>)
 80057c0:	f043 0302 	orr.w	r3, r3, #2
 80057c4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80057c8:	4b28      	ldr	r3, [pc, #160]	@ (800586c <HAL_GPIO_Init+0x22c>)
 80057ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057d6:	4a26      	ldr	r2, [pc, #152]	@ (8005870 <HAL_GPIO_Init+0x230>)
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	089b      	lsrs	r3, r3, #2
 80057dc:	3302      	adds	r3, #2
 80057de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	220f      	movs	r2, #15
 80057ee:	fa02 f303 	lsl.w	r3, r2, r3
 80057f2:	43db      	mvns	r3, r3
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	4013      	ands	r3, r2
 80057f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005874 <HAL_GPIO_Init+0x234>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d04a      	beq.n	8005898 <HAL_GPIO_Init+0x258>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a1c      	ldr	r2, [pc, #112]	@ (8005878 <HAL_GPIO_Init+0x238>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d02b      	beq.n	8005862 <HAL_GPIO_Init+0x222>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a1b      	ldr	r2, [pc, #108]	@ (800587c <HAL_GPIO_Init+0x23c>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d025      	beq.n	800585e <HAL_GPIO_Init+0x21e>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a1a      	ldr	r2, [pc, #104]	@ (8005880 <HAL_GPIO_Init+0x240>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d01f      	beq.n	800585a <HAL_GPIO_Init+0x21a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a19      	ldr	r2, [pc, #100]	@ (8005884 <HAL_GPIO_Init+0x244>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d019      	beq.n	8005856 <HAL_GPIO_Init+0x216>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a18      	ldr	r2, [pc, #96]	@ (8005888 <HAL_GPIO_Init+0x248>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d013      	beq.n	8005852 <HAL_GPIO_Init+0x212>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a17      	ldr	r2, [pc, #92]	@ (800588c <HAL_GPIO_Init+0x24c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d00d      	beq.n	800584e <HAL_GPIO_Init+0x20e>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a16      	ldr	r2, [pc, #88]	@ (8005890 <HAL_GPIO_Init+0x250>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d007      	beq.n	800584a <HAL_GPIO_Init+0x20a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a15      	ldr	r2, [pc, #84]	@ (8005894 <HAL_GPIO_Init+0x254>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d101      	bne.n	8005846 <HAL_GPIO_Init+0x206>
 8005842:	2309      	movs	r3, #9
 8005844:	e029      	b.n	800589a <HAL_GPIO_Init+0x25a>
 8005846:	230a      	movs	r3, #10
 8005848:	e027      	b.n	800589a <HAL_GPIO_Init+0x25a>
 800584a:	2307      	movs	r3, #7
 800584c:	e025      	b.n	800589a <HAL_GPIO_Init+0x25a>
 800584e:	2306      	movs	r3, #6
 8005850:	e023      	b.n	800589a <HAL_GPIO_Init+0x25a>
 8005852:	2305      	movs	r3, #5
 8005854:	e021      	b.n	800589a <HAL_GPIO_Init+0x25a>
 8005856:	2304      	movs	r3, #4
 8005858:	e01f      	b.n	800589a <HAL_GPIO_Init+0x25a>
 800585a:	2303      	movs	r3, #3
 800585c:	e01d      	b.n	800589a <HAL_GPIO_Init+0x25a>
 800585e:	2302      	movs	r3, #2
 8005860:	e01b      	b.n	800589a <HAL_GPIO_Init+0x25a>
 8005862:	2301      	movs	r3, #1
 8005864:	e019      	b.n	800589a <HAL_GPIO_Init+0x25a>
 8005866:	bf00      	nop
 8005868:	58000080 	.word	0x58000080
 800586c:	58024400 	.word	0x58024400
 8005870:	58000400 	.word	0x58000400
 8005874:	58020000 	.word	0x58020000
 8005878:	58020400 	.word	0x58020400
 800587c:	58020800 	.word	0x58020800
 8005880:	58020c00 	.word	0x58020c00
 8005884:	58021000 	.word	0x58021000
 8005888:	58021400 	.word	0x58021400
 800588c:	58021800 	.word	0x58021800
 8005890:	58021c00 	.word	0x58021c00
 8005894:	58022400 	.word	0x58022400
 8005898:	2300      	movs	r3, #0
 800589a:	69fa      	ldr	r2, [r7, #28]
 800589c:	f002 0203 	and.w	r2, r2, #3
 80058a0:	0092      	lsls	r2, r2, #2
 80058a2:	4093      	lsls	r3, r2
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058aa:	4938      	ldr	r1, [pc, #224]	@ (800598c <HAL_GPIO_Init+0x34c>)
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	089b      	lsrs	r3, r3, #2
 80058b0:	3302      	adds	r3, #2
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	43db      	mvns	r3, r3
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	4013      	ands	r3, r2
 80058c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	4313      	orrs	r3, r2
 80058dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80058de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80058e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	43db      	mvns	r3, r3
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	4013      	ands	r3, r2
 80058f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	4313      	orrs	r3, r2
 800590a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800590c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	43db      	mvns	r3, r3
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	4013      	ands	r3, r2
 8005922:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	4313      	orrs	r3, r2
 8005936:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	43db      	mvns	r3, r3
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	4013      	ands	r3, r2
 800594c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	4313      	orrs	r3, r2
 8005960:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	3301      	adds	r3, #1
 800596c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	fa22 f303 	lsr.w	r3, r2, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	f47f ae6b 	bne.w	8005654 <HAL_GPIO_Init+0x14>
  }
}
 800597e:	bf00      	nop
 8005980:	bf00      	nop
 8005982:	3724      	adds	r7, #36	@ 0x24
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	58000400 	.word	0x58000400

08005990 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	460b      	mov	r3, r1
 800599a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	691a      	ldr	r2, [r3, #16]
 80059a0:	887b      	ldrh	r3, [r7, #2]
 80059a2:	4013      	ands	r3, r2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d002      	beq.n	80059ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059a8:	2301      	movs	r3, #1
 80059aa:	73fb      	strb	r3, [r7, #15]
 80059ac:	e001      	b.n	80059b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059ae:	2300      	movs	r3, #0
 80059b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3714      	adds	r7, #20
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	460b      	mov	r3, r1
 80059ca:	807b      	strh	r3, [r7, #2]
 80059cc:	4613      	mov	r3, r2
 80059ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059d0:	787b      	ldrb	r3, [r7, #1]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059d6:	887a      	ldrh	r2, [r7, #2]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80059dc:	e003      	b.n	80059e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80059de:	887b      	ldrh	r3, [r7, #2]
 80059e0:	041a      	lsls	r2, r3, #16
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	619a      	str	r2, [r3, #24]
}
 80059e6:	bf00      	nop
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
	...

080059f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80059fc:	4b19      	ldr	r3, [pc, #100]	@ (8005a64 <HAL_PWREx_ConfigSupply+0x70>)
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	2b04      	cmp	r3, #4
 8005a06:	d00a      	beq.n	8005a1e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005a08:	4b16      	ldr	r3, [pc, #88]	@ (8005a64 <HAL_PWREx_ConfigSupply+0x70>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f003 0307 	and.w	r3, r3, #7
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d001      	beq.n	8005a1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e01f      	b.n	8005a5a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	e01d      	b.n	8005a5a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005a1e:	4b11      	ldr	r3, [pc, #68]	@ (8005a64 <HAL_PWREx_ConfigSupply+0x70>)
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f023 0207 	bic.w	r2, r3, #7
 8005a26:	490f      	ldr	r1, [pc, #60]	@ (8005a64 <HAL_PWREx_ConfigSupply+0x70>)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005a2e:	f7fc fb4b 	bl	80020c8 <HAL_GetTick>
 8005a32:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005a34:	e009      	b.n	8005a4a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005a36:	f7fc fb47 	bl	80020c8 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005a44:	d901      	bls.n	8005a4a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e007      	b.n	8005a5a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005a4a:	4b06      	ldr	r3, [pc, #24]	@ (8005a64 <HAL_PWREx_ConfigSupply+0x70>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a56:	d1ee      	bne.n	8005a36 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	58024800 	.word	0x58024800

08005a68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08c      	sub	sp, #48	@ 0x30
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e3c8      	b.n	800620c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 8087 	beq.w	8005b96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a88:	4b88      	ldr	r3, [pc, #544]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a92:	4b86      	ldr	r3, [pc, #536]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a96:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a9a:	2b10      	cmp	r3, #16
 8005a9c:	d007      	beq.n	8005aae <HAL_RCC_OscConfig+0x46>
 8005a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa0:	2b18      	cmp	r3, #24
 8005aa2:	d110      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x5e>
 8005aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d10b      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aae:	4b7f      	ldr	r3, [pc, #508]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d06c      	beq.n	8005b94 <HAL_RCC_OscConfig+0x12c>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d168      	bne.n	8005b94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e3a2      	b.n	800620c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ace:	d106      	bne.n	8005ade <HAL_RCC_OscConfig+0x76>
 8005ad0:	4b76      	ldr	r3, [pc, #472]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a75      	ldr	r2, [pc, #468]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005ad6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ada:	6013      	str	r3, [r2, #0]
 8005adc:	e02e      	b.n	8005b3c <HAL_RCC_OscConfig+0xd4>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10c      	bne.n	8005b00 <HAL_RCC_OscConfig+0x98>
 8005ae6:	4b71      	ldr	r3, [pc, #452]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a70      	ldr	r2, [pc, #448]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005aec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	4b6e      	ldr	r3, [pc, #440]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a6d      	ldr	r2, [pc, #436]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005af8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	e01d      	b.n	8005b3c <HAL_RCC_OscConfig+0xd4>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b08:	d10c      	bne.n	8005b24 <HAL_RCC_OscConfig+0xbc>
 8005b0a:	4b68      	ldr	r3, [pc, #416]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a67      	ldr	r2, [pc, #412]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005b10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b14:	6013      	str	r3, [r2, #0]
 8005b16:	4b65      	ldr	r3, [pc, #404]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a64      	ldr	r2, [pc, #400]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b20:	6013      	str	r3, [r2, #0]
 8005b22:	e00b      	b.n	8005b3c <HAL_RCC_OscConfig+0xd4>
 8005b24:	4b61      	ldr	r3, [pc, #388]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a60      	ldr	r2, [pc, #384]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005b2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b2e:	6013      	str	r3, [r2, #0]
 8005b30:	4b5e      	ldr	r3, [pc, #376]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a5d      	ldr	r2, [pc, #372]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005b36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d013      	beq.n	8005b6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b44:	f7fc fac0 	bl	80020c8 <HAL_GetTick>
 8005b48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b4a:	e008      	b.n	8005b5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b4c:	f7fc fabc 	bl	80020c8 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2b64      	cmp	r3, #100	@ 0x64
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e356      	b.n	800620c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b5e:	4b53      	ldr	r3, [pc, #332]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0f0      	beq.n	8005b4c <HAL_RCC_OscConfig+0xe4>
 8005b6a:	e014      	b.n	8005b96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b6c:	f7fc faac 	bl	80020c8 <HAL_GetTick>
 8005b70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b72:	e008      	b.n	8005b86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b74:	f7fc faa8 	bl	80020c8 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	2b64      	cmp	r3, #100	@ 0x64
 8005b80:	d901      	bls.n	8005b86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e342      	b.n	800620c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b86:	4b49      	ldr	r3, [pc, #292]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1f0      	bne.n	8005b74 <HAL_RCC_OscConfig+0x10c>
 8005b92:	e000      	b.n	8005b96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f000 808c 	beq.w	8005cbc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ba4:	4b41      	ldr	r3, [pc, #260]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005bae:	4b3f      	ldr	r3, [pc, #252]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d007      	beq.n	8005bca <HAL_RCC_OscConfig+0x162>
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	2b18      	cmp	r3, #24
 8005bbe:	d137      	bne.n	8005c30 <HAL_RCC_OscConfig+0x1c8>
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	f003 0303 	and.w	r3, r3, #3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d132      	bne.n	8005c30 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bca:	4b38      	ldr	r3, [pc, #224]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0304 	and.w	r3, r3, #4
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d005      	beq.n	8005be2 <HAL_RCC_OscConfig+0x17a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e314      	b.n	800620c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005be2:	4b32      	ldr	r3, [pc, #200]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f023 0219 	bic.w	r2, r3, #25
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	492f      	ldr	r1, [pc, #188]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf4:	f7fc fa68 	bl	80020c8 <HAL_GetTick>
 8005bf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bfa:	e008      	b.n	8005c0e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bfc:	f7fc fa64 	bl	80020c8 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e2fe      	b.n	800620c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c0e:	4b27      	ldr	r3, [pc, #156]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d0f0      	beq.n	8005bfc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c1a:	4b24      	ldr	r3, [pc, #144]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	061b      	lsls	r3, r3, #24
 8005c28:	4920      	ldr	r1, [pc, #128]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c2e:	e045      	b.n	8005cbc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d026      	beq.n	8005c86 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c38:	4b1c      	ldr	r3, [pc, #112]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f023 0219 	bic.w	r2, r3, #25
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	4919      	ldr	r1, [pc, #100]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c4a:	f7fc fa3d 	bl	80020c8 <HAL_GetTick>
 8005c4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c50:	e008      	b.n	8005c64 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c52:	f7fc fa39 	bl	80020c8 <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d901      	bls.n	8005c64 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e2d3      	b.n	800620c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c64:	4b11      	ldr	r3, [pc, #68]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d0f0      	beq.n	8005c52 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c70:	4b0e      	ldr	r3, [pc, #56]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	061b      	lsls	r3, r3, #24
 8005c7e:	490b      	ldr	r1, [pc, #44]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	604b      	str	r3, [r1, #4]
 8005c84:	e01a      	b.n	8005cbc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c86:	4b09      	ldr	r3, [pc, #36]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a08      	ldr	r2, [pc, #32]	@ (8005cac <HAL_RCC_OscConfig+0x244>)
 8005c8c:	f023 0301 	bic.w	r3, r3, #1
 8005c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c92:	f7fc fa19 	bl	80020c8 <HAL_GetTick>
 8005c96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c98:	e00a      	b.n	8005cb0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c9a:	f7fc fa15 	bl	80020c8 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d903      	bls.n	8005cb0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e2af      	b.n	800620c <HAL_RCC_OscConfig+0x7a4>
 8005cac:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005cb0:	4b96      	ldr	r3, [pc, #600]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1ee      	bne.n	8005c9a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0310 	and.w	r3, r3, #16
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d06a      	beq.n	8005d9e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cc8:	4b90      	ldr	r3, [pc, #576]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cd0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005cd2:	4b8e      	ldr	r3, [pc, #568]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	2b08      	cmp	r3, #8
 8005cdc:	d007      	beq.n	8005cee <HAL_RCC_OscConfig+0x286>
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	2b18      	cmp	r3, #24
 8005ce2:	d11b      	bne.n	8005d1c <HAL_RCC_OscConfig+0x2b4>
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f003 0303 	and.w	r3, r3, #3
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d116      	bne.n	8005d1c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005cee:	4b87      	ldr	r3, [pc, #540]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d005      	beq.n	8005d06 <HAL_RCC_OscConfig+0x29e>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	2b80      	cmp	r3, #128	@ 0x80
 8005d00:	d001      	beq.n	8005d06 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e282      	b.n	800620c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d06:	4b81      	ldr	r3, [pc, #516]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	061b      	lsls	r3, r3, #24
 8005d14:	497d      	ldr	r1, [pc, #500]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d1a:	e040      	b.n	8005d9e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	69db      	ldr	r3, [r3, #28]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d023      	beq.n	8005d6c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005d24:	4b79      	ldr	r3, [pc, #484]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a78      	ldr	r2, [pc, #480]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d30:	f7fc f9ca 	bl	80020c8 <HAL_GetTick>
 8005d34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d36:	e008      	b.n	8005d4a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005d38:	f7fc f9c6 	bl	80020c8 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e260      	b.n	800620c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d4a:	4b70      	ldr	r3, [pc, #448]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d0f0      	beq.n	8005d38 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d56:	4b6d      	ldr	r3, [pc, #436]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	061b      	lsls	r3, r3, #24
 8005d64:	4969      	ldr	r1, [pc, #420]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	60cb      	str	r3, [r1, #12]
 8005d6a:	e018      	b.n	8005d9e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005d6c:	4b67      	ldr	r3, [pc, #412]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a66      	ldr	r2, [pc, #408]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005d72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d78:	f7fc f9a6 	bl	80020c8 <HAL_GetTick>
 8005d7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d7e:	e008      	b.n	8005d92 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005d80:	f7fc f9a2 	bl	80020c8 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d901      	bls.n	8005d92 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e23c      	b.n	800620c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d92:	4b5e      	ldr	r3, [pc, #376]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1f0      	bne.n	8005d80 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0308 	and.w	r3, r3, #8
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d036      	beq.n	8005e18 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d019      	beq.n	8005de6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005db2:	4b56      	ldr	r3, [pc, #344]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005db6:	4a55      	ldr	r2, [pc, #340]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005db8:	f043 0301 	orr.w	r3, r3, #1
 8005dbc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dbe:	f7fc f983 	bl	80020c8 <HAL_GetTick>
 8005dc2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005dc4:	e008      	b.n	8005dd8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dc6:	f7fc f97f 	bl	80020c8 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d901      	bls.n	8005dd8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e219      	b.n	800620c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005dd8:	4b4c      	ldr	r3, [pc, #304]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005dda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ddc:	f003 0302 	and.w	r3, r3, #2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d0f0      	beq.n	8005dc6 <HAL_RCC_OscConfig+0x35e>
 8005de4:	e018      	b.n	8005e18 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005de6:	4b49      	ldr	r3, [pc, #292]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005de8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dea:	4a48      	ldr	r2, [pc, #288]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005dec:	f023 0301 	bic.w	r3, r3, #1
 8005df0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005df2:	f7fc f969 	bl	80020c8 <HAL_GetTick>
 8005df6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005df8:	e008      	b.n	8005e0c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dfa:	f7fc f965 	bl	80020c8 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d901      	bls.n	8005e0c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e1ff      	b.n	800620c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e0c:	4b3f      	ldr	r3, [pc, #252]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005e0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e10:	f003 0302 	and.w	r3, r3, #2
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1f0      	bne.n	8005dfa <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0320 	and.w	r3, r3, #32
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d036      	beq.n	8005e92 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d019      	beq.n	8005e60 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e2c:	4b37      	ldr	r3, [pc, #220]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a36      	ldr	r2, [pc, #216]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005e32:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005e36:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e38:	f7fc f946 	bl	80020c8 <HAL_GetTick>
 8005e3c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e3e:	e008      	b.n	8005e52 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e40:	f7fc f942 	bl	80020c8 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e1dc      	b.n	800620c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e52:	4b2e      	ldr	r3, [pc, #184]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0f0      	beq.n	8005e40 <HAL_RCC_OscConfig+0x3d8>
 8005e5e:	e018      	b.n	8005e92 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e60:	4b2a      	ldr	r3, [pc, #168]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a29      	ldr	r2, [pc, #164]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005e66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e6a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e6c:	f7fc f92c 	bl	80020c8 <HAL_GetTick>
 8005e70:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e72:	e008      	b.n	8005e86 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e74:	f7fc f928 	bl	80020c8 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e1c2      	b.n	800620c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e86:	4b21      	ldr	r3, [pc, #132]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1f0      	bne.n	8005e74 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0304 	and.w	r3, r3, #4
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 8086 	beq.w	8005fac <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8005f10 <HAL_RCC_OscConfig+0x4a8>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a1a      	ldr	r2, [pc, #104]	@ (8005f10 <HAL_RCC_OscConfig+0x4a8>)
 8005ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005eaa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005eac:	f7fc f90c 	bl	80020c8 <HAL_GetTick>
 8005eb0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005eb2:	e008      	b.n	8005ec6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eb4:	f7fc f908 	bl	80020c8 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b64      	cmp	r3, #100	@ 0x64
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e1a2      	b.n	800620c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ec6:	4b12      	ldr	r3, [pc, #72]	@ (8005f10 <HAL_RCC_OscConfig+0x4a8>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0f0      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d106      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x480>
 8005eda:	4b0c      	ldr	r3, [pc, #48]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ede:	4a0b      	ldr	r2, [pc, #44]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005ee0:	f043 0301 	orr.w	r3, r3, #1
 8005ee4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ee6:	e032      	b.n	8005f4e <HAL_RCC_OscConfig+0x4e6>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d111      	bne.n	8005f14 <HAL_RCC_OscConfig+0x4ac>
 8005ef0:	4b06      	ldr	r3, [pc, #24]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ef4:	4a05      	ldr	r2, [pc, #20]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005ef6:	f023 0301 	bic.w	r3, r3, #1
 8005efa:	6713      	str	r3, [r2, #112]	@ 0x70
 8005efc:	4b03      	ldr	r3, [pc, #12]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f00:	4a02      	ldr	r2, [pc, #8]	@ (8005f0c <HAL_RCC_OscConfig+0x4a4>)
 8005f02:	f023 0304 	bic.w	r3, r3, #4
 8005f06:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f08:	e021      	b.n	8005f4e <HAL_RCC_OscConfig+0x4e6>
 8005f0a:	bf00      	nop
 8005f0c:	58024400 	.word	0x58024400
 8005f10:	58024800 	.word	0x58024800
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	2b05      	cmp	r3, #5
 8005f1a:	d10c      	bne.n	8005f36 <HAL_RCC_OscConfig+0x4ce>
 8005f1c:	4b83      	ldr	r3, [pc, #524]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 8005f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f20:	4a82      	ldr	r2, [pc, #520]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 8005f22:	f043 0304 	orr.w	r3, r3, #4
 8005f26:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f28:	4b80      	ldr	r3, [pc, #512]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 8005f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f2c:	4a7f      	ldr	r2, [pc, #508]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 8005f2e:	f043 0301 	orr.w	r3, r3, #1
 8005f32:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f34:	e00b      	b.n	8005f4e <HAL_RCC_OscConfig+0x4e6>
 8005f36:	4b7d      	ldr	r3, [pc, #500]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 8005f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f3a:	4a7c      	ldr	r2, [pc, #496]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 8005f3c:	f023 0301 	bic.w	r3, r3, #1
 8005f40:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f42:	4b7a      	ldr	r3, [pc, #488]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 8005f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f46:	4a79      	ldr	r2, [pc, #484]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 8005f48:	f023 0304 	bic.w	r3, r3, #4
 8005f4c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d015      	beq.n	8005f82 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f56:	f7fc f8b7 	bl	80020c8 <HAL_GetTick>
 8005f5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f5c:	e00a      	b.n	8005f74 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f5e:	f7fc f8b3 	bl	80020c8 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d901      	bls.n	8005f74 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e14b      	b.n	800620c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f74:	4b6d      	ldr	r3, [pc, #436]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 8005f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f78:	f003 0302 	and.w	r3, r3, #2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d0ee      	beq.n	8005f5e <HAL_RCC_OscConfig+0x4f6>
 8005f80:	e014      	b.n	8005fac <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f82:	f7fc f8a1 	bl	80020c8 <HAL_GetTick>
 8005f86:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f88:	e00a      	b.n	8005fa0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f8a:	f7fc f89d 	bl	80020c8 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d901      	bls.n	8005fa0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e135      	b.n	800620c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005fa0:	4b62      	ldr	r3, [pc, #392]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 8005fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1ee      	bne.n	8005f8a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 812a 	beq.w	800620a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005fb6:	4b5d      	ldr	r3, [pc, #372]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fbe:	2b18      	cmp	r3, #24
 8005fc0:	f000 80ba 	beq.w	8006138 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	f040 8095 	bne.w	80060f8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fce:	4b57      	ldr	r3, [pc, #348]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a56      	ldr	r2, [pc, #344]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 8005fd4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fda:	f7fc f875 	bl	80020c8 <HAL_GetTick>
 8005fde:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005fe0:	e008      	b.n	8005ff4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fe2:	f7fc f871 	bl	80020c8 <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d901      	bls.n	8005ff4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e10b      	b.n	800620c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ff4:	4b4d      	ldr	r3, [pc, #308]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1f0      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006000:	4b4a      	ldr	r3, [pc, #296]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 8006002:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006004:	4b4a      	ldr	r3, [pc, #296]	@ (8006130 <HAL_RCC_OscConfig+0x6c8>)
 8006006:	4013      	ands	r3, r2
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006010:	0112      	lsls	r2, r2, #4
 8006012:	430a      	orrs	r2, r1
 8006014:	4945      	ldr	r1, [pc, #276]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 8006016:	4313      	orrs	r3, r2
 8006018:	628b      	str	r3, [r1, #40]	@ 0x28
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800601e:	3b01      	subs	r3, #1
 8006020:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006028:	3b01      	subs	r3, #1
 800602a:	025b      	lsls	r3, r3, #9
 800602c:	b29b      	uxth	r3, r3
 800602e:	431a      	orrs	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006034:	3b01      	subs	r3, #1
 8006036:	041b      	lsls	r3, r3, #16
 8006038:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800603c:	431a      	orrs	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006042:	3b01      	subs	r3, #1
 8006044:	061b      	lsls	r3, r3, #24
 8006046:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800604a:	4938      	ldr	r1, [pc, #224]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 800604c:	4313      	orrs	r3, r2
 800604e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006050:	4b36      	ldr	r3, [pc, #216]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 8006052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006054:	4a35      	ldr	r2, [pc, #212]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 8006056:	f023 0301 	bic.w	r3, r3, #1
 800605a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800605c:	4b33      	ldr	r3, [pc, #204]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 800605e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006060:	4b34      	ldr	r3, [pc, #208]	@ (8006134 <HAL_RCC_OscConfig+0x6cc>)
 8006062:	4013      	ands	r3, r2
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006068:	00d2      	lsls	r2, r2, #3
 800606a:	4930      	ldr	r1, [pc, #192]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 800606c:	4313      	orrs	r3, r2
 800606e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006070:	4b2e      	ldr	r3, [pc, #184]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 8006072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006074:	f023 020c 	bic.w	r2, r3, #12
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607c:	492b      	ldr	r1, [pc, #172]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 800607e:	4313      	orrs	r3, r2
 8006080:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006082:	4b2a      	ldr	r3, [pc, #168]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 8006084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006086:	f023 0202 	bic.w	r2, r3, #2
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800608e:	4927      	ldr	r1, [pc, #156]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 8006090:	4313      	orrs	r3, r2
 8006092:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006094:	4b25      	ldr	r3, [pc, #148]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 8006096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006098:	4a24      	ldr	r2, [pc, #144]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 800609a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800609e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060a0:	4b22      	ldr	r3, [pc, #136]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 80060a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a4:	4a21      	ldr	r2, [pc, #132]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 80060a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80060ac:	4b1f      	ldr	r3, [pc, #124]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 80060ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b0:	4a1e      	ldr	r2, [pc, #120]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 80060b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80060b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80060b8:	4b1c      	ldr	r3, [pc, #112]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 80060ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060bc:	4a1b      	ldr	r2, [pc, #108]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 80060be:	f043 0301 	orr.w	r3, r3, #1
 80060c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060c4:	4b19      	ldr	r3, [pc, #100]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a18      	ldr	r2, [pc, #96]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 80060ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80060ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d0:	f7fb fffa 	bl	80020c8 <HAL_GetTick>
 80060d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060d6:	e008      	b.n	80060ea <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060d8:	f7fb fff6 	bl	80020c8 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e090      	b.n	800620c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060ea:	4b10      	ldr	r3, [pc, #64]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d0f0      	beq.n	80060d8 <HAL_RCC_OscConfig+0x670>
 80060f6:	e088      	b.n	800620a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060f8:	4b0c      	ldr	r3, [pc, #48]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a0b      	ldr	r2, [pc, #44]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 80060fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006104:	f7fb ffe0 	bl	80020c8 <HAL_GetTick>
 8006108:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800610a:	e008      	b.n	800611e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800610c:	f7fb ffdc 	bl	80020c8 <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	2b02      	cmp	r3, #2
 8006118:	d901      	bls.n	800611e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e076      	b.n	800620c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800611e:	4b03      	ldr	r3, [pc, #12]	@ (800612c <HAL_RCC_OscConfig+0x6c4>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1f0      	bne.n	800610c <HAL_RCC_OscConfig+0x6a4>
 800612a:	e06e      	b.n	800620a <HAL_RCC_OscConfig+0x7a2>
 800612c:	58024400 	.word	0x58024400
 8006130:	fffffc0c 	.word	0xfffffc0c
 8006134:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006138:	4b36      	ldr	r3, [pc, #216]	@ (8006214 <HAL_RCC_OscConfig+0x7ac>)
 800613a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800613c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800613e:	4b35      	ldr	r3, [pc, #212]	@ (8006214 <HAL_RCC_OscConfig+0x7ac>)
 8006140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006142:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006148:	2b01      	cmp	r3, #1
 800614a:	d031      	beq.n	80061b0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	f003 0203 	and.w	r2, r3, #3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006156:	429a      	cmp	r2, r3
 8006158:	d12a      	bne.n	80061b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	091b      	lsrs	r3, r3, #4
 800615e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006166:	429a      	cmp	r2, r3
 8006168:	d122      	bne.n	80061b0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006174:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006176:	429a      	cmp	r2, r3
 8006178:	d11a      	bne.n	80061b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	0a5b      	lsrs	r3, r3, #9
 800617e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006186:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006188:	429a      	cmp	r2, r3
 800618a:	d111      	bne.n	80061b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	0c1b      	lsrs	r3, r3, #16
 8006190:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006198:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800619a:	429a      	cmp	r2, r3
 800619c:	d108      	bne.n	80061b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	0e1b      	lsrs	r3, r3, #24
 80061a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061aa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d001      	beq.n	80061b4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e02b      	b.n	800620c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80061b4:	4b17      	ldr	r3, [pc, #92]	@ (8006214 <HAL_RCC_OscConfig+0x7ac>)
 80061b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061b8:	08db      	lsrs	r3, r3, #3
 80061ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061be:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d01f      	beq.n	800620a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80061ca:	4b12      	ldr	r3, [pc, #72]	@ (8006214 <HAL_RCC_OscConfig+0x7ac>)
 80061cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ce:	4a11      	ldr	r2, [pc, #68]	@ (8006214 <HAL_RCC_OscConfig+0x7ac>)
 80061d0:	f023 0301 	bic.w	r3, r3, #1
 80061d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80061d6:	f7fb ff77 	bl	80020c8 <HAL_GetTick>
 80061da:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80061dc:	bf00      	nop
 80061de:	f7fb ff73 	bl	80020c8 <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d0f9      	beq.n	80061de <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80061ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006214 <HAL_RCC_OscConfig+0x7ac>)
 80061ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061ee:	4b0a      	ldr	r3, [pc, #40]	@ (8006218 <HAL_RCC_OscConfig+0x7b0>)
 80061f0:	4013      	ands	r3, r2
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80061f6:	00d2      	lsls	r2, r2, #3
 80061f8:	4906      	ldr	r1, [pc, #24]	@ (8006214 <HAL_RCC_OscConfig+0x7ac>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80061fe:	4b05      	ldr	r3, [pc, #20]	@ (8006214 <HAL_RCC_OscConfig+0x7ac>)
 8006200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006202:	4a04      	ldr	r2, [pc, #16]	@ (8006214 <HAL_RCC_OscConfig+0x7ac>)
 8006204:	f043 0301 	orr.w	r3, r3, #1
 8006208:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3730      	adds	r7, #48	@ 0x30
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	58024400 	.word	0x58024400
 8006218:	ffff0007 	.word	0xffff0007

0800621c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d101      	bne.n	8006230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e19c      	b.n	800656a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006230:	4b8a      	ldr	r3, [pc, #552]	@ (800645c <HAL_RCC_ClockConfig+0x240>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 030f 	and.w	r3, r3, #15
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	429a      	cmp	r2, r3
 800623c:	d910      	bls.n	8006260 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800623e:	4b87      	ldr	r3, [pc, #540]	@ (800645c <HAL_RCC_ClockConfig+0x240>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f023 020f 	bic.w	r2, r3, #15
 8006246:	4985      	ldr	r1, [pc, #532]	@ (800645c <HAL_RCC_ClockConfig+0x240>)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	4313      	orrs	r3, r2
 800624c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800624e:	4b83      	ldr	r3, [pc, #524]	@ (800645c <HAL_RCC_ClockConfig+0x240>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 030f 	and.w	r3, r3, #15
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d001      	beq.n	8006260 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e184      	b.n	800656a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0304 	and.w	r3, r3, #4
 8006268:	2b00      	cmp	r3, #0
 800626a:	d010      	beq.n	800628e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	691a      	ldr	r2, [r3, #16]
 8006270:	4b7b      	ldr	r3, [pc, #492]	@ (8006460 <HAL_RCC_ClockConfig+0x244>)
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006278:	429a      	cmp	r2, r3
 800627a:	d908      	bls.n	800628e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800627c:	4b78      	ldr	r3, [pc, #480]	@ (8006460 <HAL_RCC_ClockConfig+0x244>)
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	4975      	ldr	r1, [pc, #468]	@ (8006460 <HAL_RCC_ClockConfig+0x244>)
 800628a:	4313      	orrs	r3, r2
 800628c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0308 	and.w	r3, r3, #8
 8006296:	2b00      	cmp	r3, #0
 8006298:	d010      	beq.n	80062bc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	695a      	ldr	r2, [r3, #20]
 800629e:	4b70      	ldr	r3, [pc, #448]	@ (8006460 <HAL_RCC_ClockConfig+0x244>)
 80062a0:	69db      	ldr	r3, [r3, #28]
 80062a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d908      	bls.n	80062bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80062aa:	4b6d      	ldr	r3, [pc, #436]	@ (8006460 <HAL_RCC_ClockConfig+0x244>)
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	496a      	ldr	r1, [pc, #424]	@ (8006460 <HAL_RCC_ClockConfig+0x244>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0310 	and.w	r3, r3, #16
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d010      	beq.n	80062ea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	699a      	ldr	r2, [r3, #24]
 80062cc:	4b64      	ldr	r3, [pc, #400]	@ (8006460 <HAL_RCC_ClockConfig+0x244>)
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d908      	bls.n	80062ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062d8:	4b61      	ldr	r3, [pc, #388]	@ (8006460 <HAL_RCC_ClockConfig+0x244>)
 80062da:	69db      	ldr	r3, [r3, #28]
 80062dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	495e      	ldr	r1, [pc, #376]	@ (8006460 <HAL_RCC_ClockConfig+0x244>)
 80062e6:	4313      	orrs	r3, r2
 80062e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0320 	and.w	r3, r3, #32
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d010      	beq.n	8006318 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	69da      	ldr	r2, [r3, #28]
 80062fa:	4b59      	ldr	r3, [pc, #356]	@ (8006460 <HAL_RCC_ClockConfig+0x244>)
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006302:	429a      	cmp	r2, r3
 8006304:	d908      	bls.n	8006318 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006306:	4b56      	ldr	r3, [pc, #344]	@ (8006460 <HAL_RCC_ClockConfig+0x244>)
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	4953      	ldr	r1, [pc, #332]	@ (8006460 <HAL_RCC_ClockConfig+0x244>)
 8006314:	4313      	orrs	r3, r2
 8006316:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0302 	and.w	r3, r3, #2
 8006320:	2b00      	cmp	r3, #0
 8006322:	d010      	beq.n	8006346 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	68da      	ldr	r2, [r3, #12]
 8006328:	4b4d      	ldr	r3, [pc, #308]	@ (8006460 <HAL_RCC_ClockConfig+0x244>)
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	f003 030f 	and.w	r3, r3, #15
 8006330:	429a      	cmp	r2, r3
 8006332:	d908      	bls.n	8006346 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006334:	4b4a      	ldr	r3, [pc, #296]	@ (8006460 <HAL_RCC_ClockConfig+0x244>)
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	f023 020f 	bic.w	r2, r3, #15
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	4947      	ldr	r1, [pc, #284]	@ (8006460 <HAL_RCC_ClockConfig+0x244>)
 8006342:	4313      	orrs	r3, r2
 8006344:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d055      	beq.n	80063fe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006352:	4b43      	ldr	r3, [pc, #268]	@ (8006460 <HAL_RCC_ClockConfig+0x244>)
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	4940      	ldr	r1, [pc, #256]	@ (8006460 <HAL_RCC_ClockConfig+0x244>)
 8006360:	4313      	orrs	r3, r2
 8006362:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	2b02      	cmp	r3, #2
 800636a:	d107      	bne.n	800637c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800636c:	4b3c      	ldr	r3, [pc, #240]	@ (8006460 <HAL_RCC_ClockConfig+0x244>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d121      	bne.n	80063bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e0f6      	b.n	800656a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	2b03      	cmp	r3, #3
 8006382:	d107      	bne.n	8006394 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006384:	4b36      	ldr	r3, [pc, #216]	@ (8006460 <HAL_RCC_ClockConfig+0x244>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d115      	bne.n	80063bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e0ea      	b.n	800656a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d107      	bne.n	80063ac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800639c:	4b30      	ldr	r3, [pc, #192]	@ (8006460 <HAL_RCC_ClockConfig+0x244>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d109      	bne.n	80063bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e0de      	b.n	800656a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063ac:	4b2c      	ldr	r3, [pc, #176]	@ (8006460 <HAL_RCC_ClockConfig+0x244>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0304 	and.w	r3, r3, #4
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d101      	bne.n	80063bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e0d6      	b.n	800656a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063bc:	4b28      	ldr	r3, [pc, #160]	@ (8006460 <HAL_RCC_ClockConfig+0x244>)
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	f023 0207 	bic.w	r2, r3, #7
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	4925      	ldr	r1, [pc, #148]	@ (8006460 <HAL_RCC_ClockConfig+0x244>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063ce:	f7fb fe7b 	bl	80020c8 <HAL_GetTick>
 80063d2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063d4:	e00a      	b.n	80063ec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063d6:	f7fb fe77 	bl	80020c8 <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d901      	bls.n	80063ec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e0be      	b.n	800656a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ec:	4b1c      	ldr	r3, [pc, #112]	@ (8006460 <HAL_RCC_ClockConfig+0x244>)
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d1eb      	bne.n	80063d6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d010      	beq.n	800642c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68da      	ldr	r2, [r3, #12]
 800640e:	4b14      	ldr	r3, [pc, #80]	@ (8006460 <HAL_RCC_ClockConfig+0x244>)
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	f003 030f 	and.w	r3, r3, #15
 8006416:	429a      	cmp	r2, r3
 8006418:	d208      	bcs.n	800642c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800641a:	4b11      	ldr	r3, [pc, #68]	@ (8006460 <HAL_RCC_ClockConfig+0x244>)
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	f023 020f 	bic.w	r2, r3, #15
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	490e      	ldr	r1, [pc, #56]	@ (8006460 <HAL_RCC_ClockConfig+0x244>)
 8006428:	4313      	orrs	r3, r2
 800642a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800642c:	4b0b      	ldr	r3, [pc, #44]	@ (800645c <HAL_RCC_ClockConfig+0x240>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 030f 	and.w	r3, r3, #15
 8006434:	683a      	ldr	r2, [r7, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d214      	bcs.n	8006464 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800643a:	4b08      	ldr	r3, [pc, #32]	@ (800645c <HAL_RCC_ClockConfig+0x240>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f023 020f 	bic.w	r2, r3, #15
 8006442:	4906      	ldr	r1, [pc, #24]	@ (800645c <HAL_RCC_ClockConfig+0x240>)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	4313      	orrs	r3, r2
 8006448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800644a:	4b04      	ldr	r3, [pc, #16]	@ (800645c <HAL_RCC_ClockConfig+0x240>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 030f 	and.w	r3, r3, #15
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	429a      	cmp	r2, r3
 8006456:	d005      	beq.n	8006464 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e086      	b.n	800656a <HAL_RCC_ClockConfig+0x34e>
 800645c:	52002000 	.word	0x52002000
 8006460:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0304 	and.w	r3, r3, #4
 800646c:	2b00      	cmp	r3, #0
 800646e:	d010      	beq.n	8006492 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	691a      	ldr	r2, [r3, #16]
 8006474:	4b3f      	ldr	r3, [pc, #252]	@ (8006574 <HAL_RCC_ClockConfig+0x358>)
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800647c:	429a      	cmp	r2, r3
 800647e:	d208      	bcs.n	8006492 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006480:	4b3c      	ldr	r3, [pc, #240]	@ (8006574 <HAL_RCC_ClockConfig+0x358>)
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	4939      	ldr	r1, [pc, #228]	@ (8006574 <HAL_RCC_ClockConfig+0x358>)
 800648e:	4313      	orrs	r3, r2
 8006490:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0308 	and.w	r3, r3, #8
 800649a:	2b00      	cmp	r3, #0
 800649c:	d010      	beq.n	80064c0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	695a      	ldr	r2, [r3, #20]
 80064a2:	4b34      	ldr	r3, [pc, #208]	@ (8006574 <HAL_RCC_ClockConfig+0x358>)
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d208      	bcs.n	80064c0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80064ae:	4b31      	ldr	r3, [pc, #196]	@ (8006574 <HAL_RCC_ClockConfig+0x358>)
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	492e      	ldr	r1, [pc, #184]	@ (8006574 <HAL_RCC_ClockConfig+0x358>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0310 	and.w	r3, r3, #16
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d010      	beq.n	80064ee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	699a      	ldr	r2, [r3, #24]
 80064d0:	4b28      	ldr	r3, [pc, #160]	@ (8006574 <HAL_RCC_ClockConfig+0x358>)
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80064d8:	429a      	cmp	r2, r3
 80064da:	d208      	bcs.n	80064ee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80064dc:	4b25      	ldr	r3, [pc, #148]	@ (8006574 <HAL_RCC_ClockConfig+0x358>)
 80064de:	69db      	ldr	r3, [r3, #28]
 80064e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	4922      	ldr	r1, [pc, #136]	@ (8006574 <HAL_RCC_ClockConfig+0x358>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0320 	and.w	r3, r3, #32
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d010      	beq.n	800651c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	69da      	ldr	r2, [r3, #28]
 80064fe:	4b1d      	ldr	r3, [pc, #116]	@ (8006574 <HAL_RCC_ClockConfig+0x358>)
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006506:	429a      	cmp	r2, r3
 8006508:	d208      	bcs.n	800651c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800650a:	4b1a      	ldr	r3, [pc, #104]	@ (8006574 <HAL_RCC_ClockConfig+0x358>)
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	4917      	ldr	r1, [pc, #92]	@ (8006574 <HAL_RCC_ClockConfig+0x358>)
 8006518:	4313      	orrs	r3, r2
 800651a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800651c:	f000 f834 	bl	8006588 <HAL_RCC_GetSysClockFreq>
 8006520:	4602      	mov	r2, r0
 8006522:	4b14      	ldr	r3, [pc, #80]	@ (8006574 <HAL_RCC_ClockConfig+0x358>)
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	0a1b      	lsrs	r3, r3, #8
 8006528:	f003 030f 	and.w	r3, r3, #15
 800652c:	4912      	ldr	r1, [pc, #72]	@ (8006578 <HAL_RCC_ClockConfig+0x35c>)
 800652e:	5ccb      	ldrb	r3, [r1, r3]
 8006530:	f003 031f 	and.w	r3, r3, #31
 8006534:	fa22 f303 	lsr.w	r3, r2, r3
 8006538:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800653a:	4b0e      	ldr	r3, [pc, #56]	@ (8006574 <HAL_RCC_ClockConfig+0x358>)
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	f003 030f 	and.w	r3, r3, #15
 8006542:	4a0d      	ldr	r2, [pc, #52]	@ (8006578 <HAL_RCC_ClockConfig+0x35c>)
 8006544:	5cd3      	ldrb	r3, [r2, r3]
 8006546:	f003 031f 	and.w	r3, r3, #31
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	fa22 f303 	lsr.w	r3, r2, r3
 8006550:	4a0a      	ldr	r2, [pc, #40]	@ (800657c <HAL_RCC_ClockConfig+0x360>)
 8006552:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006554:	4a0a      	ldr	r2, [pc, #40]	@ (8006580 <HAL_RCC_ClockConfig+0x364>)
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800655a:	4b0a      	ldr	r3, [pc, #40]	@ (8006584 <HAL_RCC_ClockConfig+0x368>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4618      	mov	r0, r3
 8006560:	f7fb fd68 	bl	8002034 <HAL_InitTick>
 8006564:	4603      	mov	r3, r0
 8006566:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006568:	7bfb      	ldrb	r3, [r7, #15]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3718      	adds	r7, #24
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	58024400 	.word	0x58024400
 8006578:	0800c5d4 	.word	0x0800c5d4
 800657c:	24000014 	.word	0x24000014
 8006580:	24000010 	.word	0x24000010
 8006584:	24000018 	.word	0x24000018

08006588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006588:	b480      	push	{r7}
 800658a:	b089      	sub	sp, #36	@ 0x24
 800658c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800658e:	4bb3      	ldr	r3, [pc, #716]	@ (800685c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006596:	2b18      	cmp	r3, #24
 8006598:	f200 8155 	bhi.w	8006846 <HAL_RCC_GetSysClockFreq+0x2be>
 800659c:	a201      	add	r2, pc, #4	@ (adr r2, 80065a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800659e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a2:	bf00      	nop
 80065a4:	08006609 	.word	0x08006609
 80065a8:	08006847 	.word	0x08006847
 80065ac:	08006847 	.word	0x08006847
 80065b0:	08006847 	.word	0x08006847
 80065b4:	08006847 	.word	0x08006847
 80065b8:	08006847 	.word	0x08006847
 80065bc:	08006847 	.word	0x08006847
 80065c0:	08006847 	.word	0x08006847
 80065c4:	0800662f 	.word	0x0800662f
 80065c8:	08006847 	.word	0x08006847
 80065cc:	08006847 	.word	0x08006847
 80065d0:	08006847 	.word	0x08006847
 80065d4:	08006847 	.word	0x08006847
 80065d8:	08006847 	.word	0x08006847
 80065dc:	08006847 	.word	0x08006847
 80065e0:	08006847 	.word	0x08006847
 80065e4:	08006635 	.word	0x08006635
 80065e8:	08006847 	.word	0x08006847
 80065ec:	08006847 	.word	0x08006847
 80065f0:	08006847 	.word	0x08006847
 80065f4:	08006847 	.word	0x08006847
 80065f8:	08006847 	.word	0x08006847
 80065fc:	08006847 	.word	0x08006847
 8006600:	08006847 	.word	0x08006847
 8006604:	0800663b 	.word	0x0800663b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006608:	4b94      	ldr	r3, [pc, #592]	@ (800685c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0320 	and.w	r3, r3, #32
 8006610:	2b00      	cmp	r3, #0
 8006612:	d009      	beq.n	8006628 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006614:	4b91      	ldr	r3, [pc, #580]	@ (800685c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	08db      	lsrs	r3, r3, #3
 800661a:	f003 0303 	and.w	r3, r3, #3
 800661e:	4a90      	ldr	r2, [pc, #576]	@ (8006860 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006620:	fa22 f303 	lsr.w	r3, r2, r3
 8006624:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006626:	e111      	b.n	800684c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006628:	4b8d      	ldr	r3, [pc, #564]	@ (8006860 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800662a:	61bb      	str	r3, [r7, #24]
      break;
 800662c:	e10e      	b.n	800684c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800662e:	4b8d      	ldr	r3, [pc, #564]	@ (8006864 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006630:	61bb      	str	r3, [r7, #24]
      break;
 8006632:	e10b      	b.n	800684c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006634:	4b8c      	ldr	r3, [pc, #560]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006636:	61bb      	str	r3, [r7, #24]
      break;
 8006638:	e108      	b.n	800684c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800663a:	4b88      	ldr	r3, [pc, #544]	@ (800685c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800663c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800663e:	f003 0303 	and.w	r3, r3, #3
 8006642:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006644:	4b85      	ldr	r3, [pc, #532]	@ (800685c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006648:	091b      	lsrs	r3, r3, #4
 800664a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800664e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006650:	4b82      	ldr	r3, [pc, #520]	@ (800685c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800665a:	4b80      	ldr	r3, [pc, #512]	@ (800685c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800665c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800665e:	08db      	lsrs	r3, r3, #3
 8006660:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	fb02 f303 	mul.w	r3, r2, r3
 800666a:	ee07 3a90 	vmov	s15, r3
 800666e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006672:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 80e1 	beq.w	8006840 <HAL_RCC_GetSysClockFreq+0x2b8>
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2b02      	cmp	r3, #2
 8006682:	f000 8083 	beq.w	800678c <HAL_RCC_GetSysClockFreq+0x204>
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	2b02      	cmp	r3, #2
 800668a:	f200 80a1 	bhi.w	80067d0 <HAL_RCC_GetSysClockFreq+0x248>
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d003      	beq.n	800669c <HAL_RCC_GetSysClockFreq+0x114>
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d056      	beq.n	8006748 <HAL_RCC_GetSysClockFreq+0x1c0>
 800669a:	e099      	b.n	80067d0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800669c:	4b6f      	ldr	r3, [pc, #444]	@ (800685c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0320 	and.w	r3, r3, #32
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d02d      	beq.n	8006704 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066a8:	4b6c      	ldr	r3, [pc, #432]	@ (800685c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	08db      	lsrs	r3, r3, #3
 80066ae:	f003 0303 	and.w	r3, r3, #3
 80066b2:	4a6b      	ldr	r2, [pc, #428]	@ (8006860 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80066b4:	fa22 f303 	lsr.w	r3, r2, r3
 80066b8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	ee07 3a90 	vmov	s15, r3
 80066c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	ee07 3a90 	vmov	s15, r3
 80066ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066d2:	4b62      	ldr	r3, [pc, #392]	@ (800685c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066da:	ee07 3a90 	vmov	s15, r3
 80066de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80066e6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800686c <HAL_RCC_GetSysClockFreq+0x2e4>
 80066ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066fe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006702:	e087      	b.n	8006814 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	ee07 3a90 	vmov	s15, r3
 800670a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800670e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006870 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006716:	4b51      	ldr	r3, [pc, #324]	@ (800685c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800671a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800671e:	ee07 3a90 	vmov	s15, r3
 8006722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006726:	ed97 6a02 	vldr	s12, [r7, #8]
 800672a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800686c <HAL_RCC_GetSysClockFreq+0x2e4>
 800672e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006736:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800673a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800673e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006742:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006746:	e065      	b.n	8006814 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	ee07 3a90 	vmov	s15, r3
 800674e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006752:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006874 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800675a:	4b40      	ldr	r3, [pc, #256]	@ (800685c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800675c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800675e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006762:	ee07 3a90 	vmov	s15, r3
 8006766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800676a:	ed97 6a02 	vldr	s12, [r7, #8]
 800676e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800686c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800677a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800677e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006786:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800678a:	e043      	b.n	8006814 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	ee07 3a90 	vmov	s15, r3
 8006792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006796:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006878 <HAL_RCC_GetSysClockFreq+0x2f0>
 800679a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800679e:	4b2f      	ldr	r3, [pc, #188]	@ (800685c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067a6:	ee07 3a90 	vmov	s15, r3
 80067aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80067b2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800686c <HAL_RCC_GetSysClockFreq+0x2e4>
 80067b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80067ce:	e021      	b.n	8006814 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	ee07 3a90 	vmov	s15, r3
 80067d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067da:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006874 <HAL_RCC_GetSysClockFreq+0x2ec>
 80067de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067e2:	4b1e      	ldr	r3, [pc, #120]	@ (800685c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ea:	ee07 3a90 	vmov	s15, r3
 80067ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80067f6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800686c <HAL_RCC_GetSysClockFreq+0x2e4>
 80067fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006802:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800680a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800680e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006812:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006814:	4b11      	ldr	r3, [pc, #68]	@ (800685c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006818:	0a5b      	lsrs	r3, r3, #9
 800681a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800681e:	3301      	adds	r3, #1
 8006820:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	ee07 3a90 	vmov	s15, r3
 8006828:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800682c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006830:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006838:	ee17 3a90 	vmov	r3, s15
 800683c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800683e:	e005      	b.n	800684c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006840:	2300      	movs	r3, #0
 8006842:	61bb      	str	r3, [r7, #24]
      break;
 8006844:	e002      	b.n	800684c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006846:	4b07      	ldr	r3, [pc, #28]	@ (8006864 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006848:	61bb      	str	r3, [r7, #24]
      break;
 800684a:	bf00      	nop
  }

  return sysclockfreq;
 800684c:	69bb      	ldr	r3, [r7, #24]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3724      	adds	r7, #36	@ 0x24
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	58024400 	.word	0x58024400
 8006860:	03d09000 	.word	0x03d09000
 8006864:	003d0900 	.word	0x003d0900
 8006868:	016e3600 	.word	0x016e3600
 800686c:	46000000 	.word	0x46000000
 8006870:	4c742400 	.word	0x4c742400
 8006874:	4a742400 	.word	0x4a742400
 8006878:	4bb71b00 	.word	0x4bb71b00

0800687c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006882:	f7ff fe81 	bl	8006588 <HAL_RCC_GetSysClockFreq>
 8006886:	4602      	mov	r2, r0
 8006888:	4b10      	ldr	r3, [pc, #64]	@ (80068cc <HAL_RCC_GetHCLKFreq+0x50>)
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	0a1b      	lsrs	r3, r3, #8
 800688e:	f003 030f 	and.w	r3, r3, #15
 8006892:	490f      	ldr	r1, [pc, #60]	@ (80068d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006894:	5ccb      	ldrb	r3, [r1, r3]
 8006896:	f003 031f 	and.w	r3, r3, #31
 800689a:	fa22 f303 	lsr.w	r3, r2, r3
 800689e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80068a0:	4b0a      	ldr	r3, [pc, #40]	@ (80068cc <HAL_RCC_GetHCLKFreq+0x50>)
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	f003 030f 	and.w	r3, r3, #15
 80068a8:	4a09      	ldr	r2, [pc, #36]	@ (80068d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80068aa:	5cd3      	ldrb	r3, [r2, r3]
 80068ac:	f003 031f 	and.w	r3, r3, #31
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	fa22 f303 	lsr.w	r3, r2, r3
 80068b6:	4a07      	ldr	r2, [pc, #28]	@ (80068d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80068b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80068ba:	4a07      	ldr	r2, [pc, #28]	@ (80068d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80068c0:	4b04      	ldr	r3, [pc, #16]	@ (80068d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80068c2:	681b      	ldr	r3, [r3, #0]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3708      	adds	r7, #8
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	58024400 	.word	0x58024400
 80068d0:	0800c5d4 	.word	0x0800c5d4
 80068d4:	24000014 	.word	0x24000014
 80068d8:	24000010 	.word	0x24000010

080068dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80068e0:	f7ff ffcc 	bl	800687c <HAL_RCC_GetHCLKFreq>
 80068e4:	4602      	mov	r2, r0
 80068e6:	4b06      	ldr	r3, [pc, #24]	@ (8006900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	091b      	lsrs	r3, r3, #4
 80068ec:	f003 0307 	and.w	r3, r3, #7
 80068f0:	4904      	ldr	r1, [pc, #16]	@ (8006904 <HAL_RCC_GetPCLK1Freq+0x28>)
 80068f2:	5ccb      	ldrb	r3, [r1, r3]
 80068f4:	f003 031f 	and.w	r3, r3, #31
 80068f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	58024400 	.word	0x58024400
 8006904:	0800c5d4 	.word	0x0800c5d4

08006908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800690c:	f7ff ffb6 	bl	800687c <HAL_RCC_GetHCLKFreq>
 8006910:	4602      	mov	r2, r0
 8006912:	4b06      	ldr	r3, [pc, #24]	@ (800692c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	0a1b      	lsrs	r3, r3, #8
 8006918:	f003 0307 	and.w	r3, r3, #7
 800691c:	4904      	ldr	r1, [pc, #16]	@ (8006930 <HAL_RCC_GetPCLK2Freq+0x28>)
 800691e:	5ccb      	ldrb	r3, [r1, r3]
 8006920:	f003 031f 	and.w	r3, r3, #31
 8006924:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006928:	4618      	mov	r0, r3
 800692a:	bd80      	pop	{r7, pc}
 800692c:	58024400 	.word	0x58024400
 8006930:	0800c5d4 	.word	0x0800c5d4

08006934 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006938:	b0c6      	sub	sp, #280	@ 0x118
 800693a:	af00      	add	r7, sp, #0
 800693c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006940:	2300      	movs	r3, #0
 8006942:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006946:	2300      	movs	r3, #0
 8006948:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800694c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006954:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006958:	2500      	movs	r5, #0
 800695a:	ea54 0305 	orrs.w	r3, r4, r5
 800695e:	d049      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006964:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006966:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800696a:	d02f      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800696c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006970:	d828      	bhi.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006972:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006976:	d01a      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006978:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800697c:	d822      	bhi.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006982:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006986:	d007      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006988:	e01c      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800698a:	4bab      	ldr	r3, [pc, #684]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800698c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800698e:	4aaa      	ldr	r2, [pc, #680]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006994:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006996:	e01a      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800699c:	3308      	adds	r3, #8
 800699e:	2102      	movs	r1, #2
 80069a0:	4618      	mov	r0, r3
 80069a2:	f002 fa49 	bl	8008e38 <RCCEx_PLL2_Config>
 80069a6:	4603      	mov	r3, r0
 80069a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80069ac:	e00f      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b2:	3328      	adds	r3, #40	@ 0x28
 80069b4:	2102      	movs	r1, #2
 80069b6:	4618      	mov	r0, r3
 80069b8:	f002 faf0 	bl	8008f9c <RCCEx_PLL3_Config>
 80069bc:	4603      	mov	r3, r0
 80069be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80069c2:	e004      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069ca:	e000      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80069cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10a      	bne.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80069d6:	4b98      	ldr	r3, [pc, #608]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80069d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80069de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069e4:	4a94      	ldr	r2, [pc, #592]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80069e6:	430b      	orrs	r3, r1
 80069e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80069ea:	e003      	b.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80069f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006a00:	f04f 0900 	mov.w	r9, #0
 8006a04:	ea58 0309 	orrs.w	r3, r8, r9
 8006a08:	d047      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a10:	2b04      	cmp	r3, #4
 8006a12:	d82a      	bhi.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006a14:	a201      	add	r2, pc, #4	@ (adr r2, 8006a1c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1a:	bf00      	nop
 8006a1c:	08006a31 	.word	0x08006a31
 8006a20:	08006a3f 	.word	0x08006a3f
 8006a24:	08006a55 	.word	0x08006a55
 8006a28:	08006a73 	.word	0x08006a73
 8006a2c:	08006a73 	.word	0x08006a73
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a30:	4b81      	ldr	r3, [pc, #516]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a34:	4a80      	ldr	r2, [pc, #512]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a3c:	e01a      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a42:	3308      	adds	r3, #8
 8006a44:	2100      	movs	r1, #0
 8006a46:	4618      	mov	r0, r3
 8006a48:	f002 f9f6 	bl	8008e38 <RCCEx_PLL2_Config>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a52:	e00f      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a58:	3328      	adds	r3, #40	@ 0x28
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f002 fa9d 	bl	8008f9c <RCCEx_PLL3_Config>
 8006a62:	4603      	mov	r3, r0
 8006a64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a68:	e004      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a70:	e000      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006a72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10a      	bne.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a7c:	4b6e      	ldr	r3, [pc, #440]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a80:	f023 0107 	bic.w	r1, r3, #7
 8006a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a8a:	4a6b      	ldr	r2, [pc, #428]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006a90:	e003      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a96:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006aa6:	f04f 0b00 	mov.w	fp, #0
 8006aaa:	ea5a 030b 	orrs.w	r3, sl, fp
 8006aae:	d05b      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ab4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006ab8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006abc:	d03b      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006abe:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006ac2:	d834      	bhi.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006ac4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ac8:	d037      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006aca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ace:	d82e      	bhi.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006ad0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006ad4:	d033      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006ad6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006ada:	d828      	bhi.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006adc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ae0:	d01a      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006ae2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ae6:	d822      	bhi.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d003      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006aec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006af0:	d007      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006af2:	e01c      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006af4:	4b50      	ldr	r3, [pc, #320]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af8:	4a4f      	ldr	r2, [pc, #316]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006afa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006afe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b00:	e01e      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b06:	3308      	adds	r3, #8
 8006b08:	2100      	movs	r1, #0
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f002 f994 	bl	8008e38 <RCCEx_PLL2_Config>
 8006b10:	4603      	mov	r3, r0
 8006b12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006b16:	e013      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b1c:	3328      	adds	r3, #40	@ 0x28
 8006b1e:	2100      	movs	r1, #0
 8006b20:	4618      	mov	r0, r3
 8006b22:	f002 fa3b 	bl	8008f9c <RCCEx_PLL3_Config>
 8006b26:	4603      	mov	r3, r0
 8006b28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b2c:	e008      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b34:	e004      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006b36:	bf00      	nop
 8006b38:	e002      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006b3a:	bf00      	nop
 8006b3c:	e000      	b.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006b3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10b      	bne.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006b48:	4b3b      	ldr	r3, [pc, #236]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b4c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006b58:	4a37      	ldr	r2, [pc, #220]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b5a:	430b      	orrs	r3, r1
 8006b5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b5e:	e003      	b.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b70:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006b74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006b7e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006b82:	460b      	mov	r3, r1
 8006b84:	4313      	orrs	r3, r2
 8006b86:	d05d      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b8c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006b90:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006b94:	d03b      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006b96:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006b9a:	d834      	bhi.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006b9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ba0:	d037      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006ba2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ba6:	d82e      	bhi.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006ba8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006bac:	d033      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006bae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006bb2:	d828      	bhi.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006bb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bb8:	d01a      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006bba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bbe:	d822      	bhi.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d003      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006bc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006bc8:	d007      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006bca:	e01c      	b.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd0:	4a19      	ldr	r2, [pc, #100]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bd8:	e01e      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bde:	3308      	adds	r3, #8
 8006be0:	2100      	movs	r1, #0
 8006be2:	4618      	mov	r0, r3
 8006be4:	f002 f928 	bl	8008e38 <RCCEx_PLL2_Config>
 8006be8:	4603      	mov	r3, r0
 8006bea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006bee:	e013      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf4:	3328      	adds	r3, #40	@ 0x28
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f002 f9cf 	bl	8008f9c <RCCEx_PLL3_Config>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c04:	e008      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c0c:	e004      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006c0e:	bf00      	nop
 8006c10:	e002      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006c12:	bf00      	nop
 8006c14:	e000      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006c16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10d      	bne.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006c20:	4b05      	ldr	r3, [pc, #20]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c24:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006c30:	4a01      	ldr	r2, [pc, #4]	@ (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c32:	430b      	orrs	r3, r1
 8006c34:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c36:	e005      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006c38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006c50:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006c54:	2300      	movs	r3, #0
 8006c56:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006c5a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4313      	orrs	r3, r2
 8006c62:	d03a      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c6a:	2b30      	cmp	r3, #48	@ 0x30
 8006c6c:	d01f      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006c6e:	2b30      	cmp	r3, #48	@ 0x30
 8006c70:	d819      	bhi.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006c72:	2b20      	cmp	r3, #32
 8006c74:	d00c      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006c76:	2b20      	cmp	r3, #32
 8006c78:	d815      	bhi.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d019      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006c7e:	2b10      	cmp	r3, #16
 8006c80:	d111      	bne.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c82:	4baa      	ldr	r3, [pc, #680]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c86:	4aa9      	ldr	r2, [pc, #676]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006c8e:	e011      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c94:	3308      	adds	r3, #8
 8006c96:	2102      	movs	r1, #2
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f002 f8cd 	bl	8008e38 <RCCEx_PLL2_Config>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006ca4:	e006      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006cac:	e002      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006cae:	bf00      	nop
 8006cb0:	e000      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006cb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cb4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10a      	bne.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006cbc:	4b9b      	ldr	r3, [pc, #620]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cc0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cca:	4a98      	ldr	r2, [pc, #608]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ccc:	430b      	orrs	r3, r1
 8006cce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006cd0:	e003      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cd6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006ce6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006cea:	2300      	movs	r3, #0
 8006cec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006cf0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	d051      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d04:	d035      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006d06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d0a:	d82e      	bhi.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006d0c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006d10:	d031      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006d12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006d16:	d828      	bhi.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006d18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d1c:	d01a      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006d1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d22:	d822      	bhi.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d003      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006d28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d2c:	d007      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006d2e:	e01c      	b.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d30:	4b7e      	ldr	r3, [pc, #504]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d34:	4a7d      	ldr	r2, [pc, #500]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d3c:	e01c      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d42:	3308      	adds	r3, #8
 8006d44:	2100      	movs	r1, #0
 8006d46:	4618      	mov	r0, r3
 8006d48:	f002 f876 	bl	8008e38 <RCCEx_PLL2_Config>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d52:	e011      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d58:	3328      	adds	r3, #40	@ 0x28
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f002 f91d 	bl	8008f9c <RCCEx_PLL3_Config>
 8006d62:	4603      	mov	r3, r0
 8006d64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d68:	e006      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d70:	e002      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006d72:	bf00      	nop
 8006d74:	e000      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006d76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10a      	bne.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006d80:	4b6a      	ldr	r3, [pc, #424]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d84:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d8e:	4a67      	ldr	r2, [pc, #412]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d90:	430b      	orrs	r3, r1
 8006d92:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d94:	e003      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d9a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006daa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006dae:	2300      	movs	r3, #0
 8006db0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006db4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006db8:	460b      	mov	r3, r1
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	d053      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006dc8:	d033      	beq.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006dca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006dce:	d82c      	bhi.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006dd0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006dd4:	d02f      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006dd6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006dda:	d826      	bhi.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006ddc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006de0:	d02b      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006de2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006de6:	d820      	bhi.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006de8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dec:	d012      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006dee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006df2:	d81a      	bhi.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d022      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dfc:	d115      	bne.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e02:	3308      	adds	r3, #8
 8006e04:	2101      	movs	r1, #1
 8006e06:	4618      	mov	r0, r3
 8006e08:	f002 f816 	bl	8008e38 <RCCEx_PLL2_Config>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006e12:	e015      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e18:	3328      	adds	r3, #40	@ 0x28
 8006e1a:	2101      	movs	r1, #1
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f002 f8bd 	bl	8008f9c <RCCEx_PLL3_Config>
 8006e22:	4603      	mov	r3, r0
 8006e24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006e28:	e00a      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e30:	e006      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006e32:	bf00      	nop
 8006e34:	e004      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006e36:	bf00      	nop
 8006e38:	e002      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006e3a:	bf00      	nop
 8006e3c:	e000      	b.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10a      	bne.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006e48:	4b38      	ldr	r3, [pc, #224]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e4c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e56:	4a35      	ldr	r2, [pc, #212]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e58:	430b      	orrs	r3, r1
 8006e5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e5c:	e003      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e62:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006e72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e76:	2300      	movs	r3, #0
 8006e78:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006e7c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006e80:	460b      	mov	r3, r1
 8006e82:	4313      	orrs	r3, r2
 8006e84:	d058      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e92:	d033      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e98:	d82c      	bhi.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e9e:	d02f      	beq.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ea4:	d826      	bhi.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006ea6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006eaa:	d02b      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006eac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006eb0:	d820      	bhi.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006eb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006eb6:	d012      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006eb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ebc:	d81a      	bhi.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d022      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006ec2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ec6:	d115      	bne.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ecc:	3308      	adds	r3, #8
 8006ece:	2101      	movs	r1, #1
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f001 ffb1 	bl	8008e38 <RCCEx_PLL2_Config>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006edc:	e015      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ee2:	3328      	adds	r3, #40	@ 0x28
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f002 f858 	bl	8008f9c <RCCEx_PLL3_Config>
 8006eec:	4603      	mov	r3, r0
 8006eee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ef2:	e00a      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006efa:	e006      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006efc:	bf00      	nop
 8006efe:	e004      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006f00:	bf00      	nop
 8006f02:	e002      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006f04:	bf00      	nop
 8006f06:	e000      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006f08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10e      	bne.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006f12:	4b06      	ldr	r3, [pc, #24]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f16:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006f22:	4a02      	ldr	r2, [pc, #8]	@ (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f24:	430b      	orrs	r3, r1
 8006f26:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f28:	e006      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006f2a:	bf00      	nop
 8006f2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f40:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006f44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006f4e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006f52:	460b      	mov	r3, r1
 8006f54:	4313      	orrs	r3, r2
 8006f56:	d037      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f62:	d00e      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006f64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f68:	d816      	bhi.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d018      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006f6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f72:	d111      	bne.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f74:	4bc4      	ldr	r3, [pc, #784]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f78:	4ac3      	ldr	r2, [pc, #780]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006f80:	e00f      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f86:	3308      	adds	r3, #8
 8006f88:	2101      	movs	r1, #1
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f001 ff54 	bl	8008e38 <RCCEx_PLL2_Config>
 8006f90:	4603      	mov	r3, r0
 8006f92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006f96:	e004      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f9e:	e000      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006fa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fa2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10a      	bne.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006faa:	4bb7      	ldr	r3, [pc, #732]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fb8:	4ab3      	ldr	r2, [pc, #716]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fba:	430b      	orrs	r3, r1
 8006fbc:	6513      	str	r3, [r2, #80]	@ 0x50
 8006fbe:	e003      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fc4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006fd4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006fde:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	d039      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fee:	2b03      	cmp	r3, #3
 8006ff0:	d81c      	bhi.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff8:	08007035 	.word	0x08007035
 8006ffc:	08007009 	.word	0x08007009
 8007000:	08007017 	.word	0x08007017
 8007004:	08007035 	.word	0x08007035
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007008:	4b9f      	ldr	r3, [pc, #636]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800700a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700c:	4a9e      	ldr	r2, [pc, #632]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800700e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007012:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007014:	e00f      	b.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800701a:	3308      	adds	r3, #8
 800701c:	2102      	movs	r1, #2
 800701e:	4618      	mov	r0, r3
 8007020:	f001 ff0a 	bl	8008e38 <RCCEx_PLL2_Config>
 8007024:	4603      	mov	r3, r0
 8007026:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800702a:	e004      	b.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007032:	e000      	b.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007036:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10a      	bne.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800703e:	4b92      	ldr	r3, [pc, #584]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007042:	f023 0103 	bic.w	r1, r3, #3
 8007046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800704a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800704c:	4a8e      	ldr	r2, [pc, #568]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800704e:	430b      	orrs	r3, r1
 8007050:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007052:	e003      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007054:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007058:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800705c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007064:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007068:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800706c:	2300      	movs	r3, #0
 800706e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007072:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007076:	460b      	mov	r3, r1
 8007078:	4313      	orrs	r3, r2
 800707a:	f000 8099 	beq.w	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800707e:	4b83      	ldr	r3, [pc, #524]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a82      	ldr	r2, [pc, #520]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007088:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800708a:	f7fb f81d 	bl	80020c8 <HAL_GetTick>
 800708e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007092:	e00b      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007094:	f7fb f818 	bl	80020c8 <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	2b64      	cmp	r3, #100	@ 0x64
 80070a2:	d903      	bls.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80070aa:	e005      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80070ac:	4b77      	ldr	r3, [pc, #476]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d0ed      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80070b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d173      	bne.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80070c0:	4b71      	ldr	r3, [pc, #452]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80070c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80070cc:	4053      	eors	r3, r2
 80070ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d015      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070d6:	4b6c      	ldr	r3, [pc, #432]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070de:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80070e2:	4b69      	ldr	r3, [pc, #420]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070e6:	4a68      	ldr	r2, [pc, #416]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070ec:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80070ee:	4b66      	ldr	r3, [pc, #408]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070f2:	4a65      	ldr	r2, [pc, #404]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80070f8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80070fa:	4a63      	ldr	r2, [pc, #396]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007100:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007106:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800710a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800710e:	d118      	bne.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007110:	f7fa ffda 	bl	80020c8 <HAL_GetTick>
 8007114:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007118:	e00d      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800711a:	f7fa ffd5 	bl	80020c8 <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007124:	1ad2      	subs	r2, r2, r3
 8007126:	f241 3388 	movw	r3, #5000	@ 0x1388
 800712a:	429a      	cmp	r2, r3
 800712c:	d903      	bls.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007134:	e005      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007136:	4b54      	ldr	r3, [pc, #336]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800713a:	f003 0302 	and.w	r3, r3, #2
 800713e:	2b00      	cmp	r3, #0
 8007140:	d0eb      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007142:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007146:	2b00      	cmp	r3, #0
 8007148:	d129      	bne.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800714a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800714e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007152:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007156:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800715a:	d10e      	bne.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800715c:	4b4a      	ldr	r3, [pc, #296]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007168:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800716c:	091a      	lsrs	r2, r3, #4
 800716e:	4b48      	ldr	r3, [pc, #288]	@ (8007290 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007170:	4013      	ands	r3, r2
 8007172:	4a45      	ldr	r2, [pc, #276]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007174:	430b      	orrs	r3, r1
 8007176:	6113      	str	r3, [r2, #16]
 8007178:	e005      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800717a:	4b43      	ldr	r3, [pc, #268]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	4a42      	ldr	r2, [pc, #264]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007180:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007184:	6113      	str	r3, [r2, #16]
 8007186:	4b40      	ldr	r3, [pc, #256]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007188:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800718a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800718e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007196:	4a3c      	ldr	r2, [pc, #240]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007198:	430b      	orrs	r3, r1
 800719a:	6713      	str	r3, [r2, #112]	@ 0x70
 800719c:	e008      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800719e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80071a6:	e003      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80071b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b8:	f002 0301 	and.w	r3, r2, #1
 80071bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80071c0:	2300      	movs	r3, #0
 80071c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80071c6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80071ca:	460b      	mov	r3, r1
 80071cc:	4313      	orrs	r3, r2
 80071ce:	f000 808f 	beq.w	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80071d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071d8:	2b28      	cmp	r3, #40	@ 0x28
 80071da:	d871      	bhi.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80071dc:	a201      	add	r2, pc, #4	@ (adr r2, 80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80071de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e2:	bf00      	nop
 80071e4:	080072c9 	.word	0x080072c9
 80071e8:	080072c1 	.word	0x080072c1
 80071ec:	080072c1 	.word	0x080072c1
 80071f0:	080072c1 	.word	0x080072c1
 80071f4:	080072c1 	.word	0x080072c1
 80071f8:	080072c1 	.word	0x080072c1
 80071fc:	080072c1 	.word	0x080072c1
 8007200:	080072c1 	.word	0x080072c1
 8007204:	08007295 	.word	0x08007295
 8007208:	080072c1 	.word	0x080072c1
 800720c:	080072c1 	.word	0x080072c1
 8007210:	080072c1 	.word	0x080072c1
 8007214:	080072c1 	.word	0x080072c1
 8007218:	080072c1 	.word	0x080072c1
 800721c:	080072c1 	.word	0x080072c1
 8007220:	080072c1 	.word	0x080072c1
 8007224:	080072ab 	.word	0x080072ab
 8007228:	080072c1 	.word	0x080072c1
 800722c:	080072c1 	.word	0x080072c1
 8007230:	080072c1 	.word	0x080072c1
 8007234:	080072c1 	.word	0x080072c1
 8007238:	080072c1 	.word	0x080072c1
 800723c:	080072c1 	.word	0x080072c1
 8007240:	080072c1 	.word	0x080072c1
 8007244:	080072c9 	.word	0x080072c9
 8007248:	080072c1 	.word	0x080072c1
 800724c:	080072c1 	.word	0x080072c1
 8007250:	080072c1 	.word	0x080072c1
 8007254:	080072c1 	.word	0x080072c1
 8007258:	080072c1 	.word	0x080072c1
 800725c:	080072c1 	.word	0x080072c1
 8007260:	080072c1 	.word	0x080072c1
 8007264:	080072c9 	.word	0x080072c9
 8007268:	080072c1 	.word	0x080072c1
 800726c:	080072c1 	.word	0x080072c1
 8007270:	080072c1 	.word	0x080072c1
 8007274:	080072c1 	.word	0x080072c1
 8007278:	080072c1 	.word	0x080072c1
 800727c:	080072c1 	.word	0x080072c1
 8007280:	080072c1 	.word	0x080072c1
 8007284:	080072c9 	.word	0x080072c9
 8007288:	58024400 	.word	0x58024400
 800728c:	58024800 	.word	0x58024800
 8007290:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007298:	3308      	adds	r3, #8
 800729a:	2101      	movs	r1, #1
 800729c:	4618      	mov	r0, r3
 800729e:	f001 fdcb 	bl	8008e38 <RCCEx_PLL2_Config>
 80072a2:	4603      	mov	r3, r0
 80072a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80072a8:	e00f      	b.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ae:	3328      	adds	r3, #40	@ 0x28
 80072b0:	2101      	movs	r1, #1
 80072b2:	4618      	mov	r0, r3
 80072b4:	f001 fe72 	bl	8008f9c <RCCEx_PLL3_Config>
 80072b8:	4603      	mov	r3, r0
 80072ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80072be:	e004      	b.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80072c6:	e000      	b.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80072c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10a      	bne.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80072d2:	4bbf      	ldr	r3, [pc, #764]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80072d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072d6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80072da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80072e0:	4abb      	ldr	r2, [pc, #748]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80072e2:	430b      	orrs	r3, r1
 80072e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80072e6:	e003      	b.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80072f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f8:	f002 0302 	and.w	r3, r2, #2
 80072fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007300:	2300      	movs	r3, #0
 8007302:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007306:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800730a:	460b      	mov	r3, r1
 800730c:	4313      	orrs	r3, r2
 800730e:	d041      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007316:	2b05      	cmp	r3, #5
 8007318:	d824      	bhi.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800731a:	a201      	add	r2, pc, #4	@ (adr r2, 8007320 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800731c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007320:	0800736d 	.word	0x0800736d
 8007324:	08007339 	.word	0x08007339
 8007328:	0800734f 	.word	0x0800734f
 800732c:	0800736d 	.word	0x0800736d
 8007330:	0800736d 	.word	0x0800736d
 8007334:	0800736d 	.word	0x0800736d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800733c:	3308      	adds	r3, #8
 800733e:	2101      	movs	r1, #1
 8007340:	4618      	mov	r0, r3
 8007342:	f001 fd79 	bl	8008e38 <RCCEx_PLL2_Config>
 8007346:	4603      	mov	r3, r0
 8007348:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800734c:	e00f      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800734e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007352:	3328      	adds	r3, #40	@ 0x28
 8007354:	2101      	movs	r1, #1
 8007356:	4618      	mov	r0, r3
 8007358:	f001 fe20 	bl	8008f9c <RCCEx_PLL3_Config>
 800735c:	4603      	mov	r3, r0
 800735e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007362:	e004      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800736a:	e000      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800736c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800736e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10a      	bne.n	800738c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007376:	4b96      	ldr	r3, [pc, #600]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800737a:	f023 0107 	bic.w	r1, r3, #7
 800737e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007382:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007384:	4a92      	ldr	r2, [pc, #584]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007386:	430b      	orrs	r3, r1
 8007388:	6553      	str	r3, [r2, #84]	@ 0x54
 800738a:	e003      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800738c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007390:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739c:	f002 0304 	and.w	r3, r2, #4
 80073a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80073a4:	2300      	movs	r3, #0
 80073a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80073aa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80073ae:	460b      	mov	r3, r1
 80073b0:	4313      	orrs	r3, r2
 80073b2:	d044      	beq.n	800743e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80073b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073bc:	2b05      	cmp	r3, #5
 80073be:	d825      	bhi.n	800740c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80073c0:	a201      	add	r2, pc, #4	@ (adr r2, 80073c8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80073c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c6:	bf00      	nop
 80073c8:	08007415 	.word	0x08007415
 80073cc:	080073e1 	.word	0x080073e1
 80073d0:	080073f7 	.word	0x080073f7
 80073d4:	08007415 	.word	0x08007415
 80073d8:	08007415 	.word	0x08007415
 80073dc:	08007415 	.word	0x08007415
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e4:	3308      	adds	r3, #8
 80073e6:	2101      	movs	r1, #1
 80073e8:	4618      	mov	r0, r3
 80073ea:	f001 fd25 	bl	8008e38 <RCCEx_PLL2_Config>
 80073ee:	4603      	mov	r3, r0
 80073f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80073f4:	e00f      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073fa:	3328      	adds	r3, #40	@ 0x28
 80073fc:	2101      	movs	r1, #1
 80073fe:	4618      	mov	r0, r3
 8007400:	f001 fdcc 	bl	8008f9c <RCCEx_PLL3_Config>
 8007404:	4603      	mov	r3, r0
 8007406:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800740a:	e004      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007412:	e000      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007416:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10b      	bne.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800741e:	4b6c      	ldr	r3, [pc, #432]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007422:	f023 0107 	bic.w	r1, r3, #7
 8007426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800742a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800742e:	4a68      	ldr	r2, [pc, #416]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007430:	430b      	orrs	r3, r1
 8007432:	6593      	str	r3, [r2, #88]	@ 0x58
 8007434:	e003      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007436:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800743a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800743e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007446:	f002 0320 	and.w	r3, r2, #32
 800744a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800744e:	2300      	movs	r3, #0
 8007450:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007454:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007458:	460b      	mov	r3, r1
 800745a:	4313      	orrs	r3, r2
 800745c:	d055      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800745e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007462:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007466:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800746a:	d033      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800746c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007470:	d82c      	bhi.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007476:	d02f      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800747c:	d826      	bhi.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800747e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007482:	d02b      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007484:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007488:	d820      	bhi.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800748a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800748e:	d012      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007490:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007494:	d81a      	bhi.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007496:	2b00      	cmp	r3, #0
 8007498:	d022      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800749a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800749e:	d115      	bne.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a4:	3308      	adds	r3, #8
 80074a6:	2100      	movs	r1, #0
 80074a8:	4618      	mov	r0, r3
 80074aa:	f001 fcc5 	bl	8008e38 <RCCEx_PLL2_Config>
 80074ae:	4603      	mov	r3, r0
 80074b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80074b4:	e015      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ba:	3328      	adds	r3, #40	@ 0x28
 80074bc:	2102      	movs	r1, #2
 80074be:	4618      	mov	r0, r3
 80074c0:	f001 fd6c 	bl	8008f9c <RCCEx_PLL3_Config>
 80074c4:	4603      	mov	r3, r0
 80074c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80074ca:	e00a      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80074d2:	e006      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80074d4:	bf00      	nop
 80074d6:	e004      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80074d8:	bf00      	nop
 80074da:	e002      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80074dc:	bf00      	nop
 80074de:	e000      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80074e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d10b      	bne.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80074ea:	4b39      	ldr	r3, [pc, #228]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80074ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074ee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80074f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074fa:	4a35      	ldr	r2, [pc, #212]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80074fc:	430b      	orrs	r3, r1
 80074fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8007500:	e003      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007502:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007506:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800750a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800750e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007512:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007516:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800751a:	2300      	movs	r3, #0
 800751c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007520:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007524:	460b      	mov	r3, r1
 8007526:	4313      	orrs	r3, r2
 8007528:	d058      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800752a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800752e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007532:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007536:	d033      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007538:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800753c:	d82c      	bhi.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800753e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007542:	d02f      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007548:	d826      	bhi.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800754a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800754e:	d02b      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007550:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007554:	d820      	bhi.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007556:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800755a:	d012      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800755c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007560:	d81a      	bhi.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007562:	2b00      	cmp	r3, #0
 8007564:	d022      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007566:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800756a:	d115      	bne.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800756c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007570:	3308      	adds	r3, #8
 8007572:	2100      	movs	r1, #0
 8007574:	4618      	mov	r0, r3
 8007576:	f001 fc5f 	bl	8008e38 <RCCEx_PLL2_Config>
 800757a:	4603      	mov	r3, r0
 800757c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007580:	e015      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007586:	3328      	adds	r3, #40	@ 0x28
 8007588:	2102      	movs	r1, #2
 800758a:	4618      	mov	r0, r3
 800758c:	f001 fd06 	bl	8008f9c <RCCEx_PLL3_Config>
 8007590:	4603      	mov	r3, r0
 8007592:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007596:	e00a      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800759e:	e006      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80075a0:	bf00      	nop
 80075a2:	e004      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80075a4:	bf00      	nop
 80075a6:	e002      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80075a8:	bf00      	nop
 80075aa:	e000      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80075ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10e      	bne.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80075b6:	4b06      	ldr	r3, [pc, #24]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80075b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075ba:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80075be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80075c6:	4a02      	ldr	r2, [pc, #8]	@ (80075d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80075c8:	430b      	orrs	r3, r1
 80075ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80075cc:	e006      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80075ce:	bf00      	nop
 80075d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80075dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80075e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075ec:	2300      	movs	r3, #0
 80075ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80075f2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80075f6:	460b      	mov	r3, r1
 80075f8:	4313      	orrs	r3, r2
 80075fa:	d055      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80075fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007600:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007604:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007608:	d033      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800760a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800760e:	d82c      	bhi.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007610:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007614:	d02f      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007616:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800761a:	d826      	bhi.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800761c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007620:	d02b      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007622:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007626:	d820      	bhi.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007628:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800762c:	d012      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800762e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007632:	d81a      	bhi.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007634:	2b00      	cmp	r3, #0
 8007636:	d022      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007638:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800763c:	d115      	bne.n	800766a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800763e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007642:	3308      	adds	r3, #8
 8007644:	2100      	movs	r1, #0
 8007646:	4618      	mov	r0, r3
 8007648:	f001 fbf6 	bl	8008e38 <RCCEx_PLL2_Config>
 800764c:	4603      	mov	r3, r0
 800764e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007652:	e015      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007658:	3328      	adds	r3, #40	@ 0x28
 800765a:	2102      	movs	r1, #2
 800765c:	4618      	mov	r0, r3
 800765e:	f001 fc9d 	bl	8008f9c <RCCEx_PLL3_Config>
 8007662:	4603      	mov	r3, r0
 8007664:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007668:	e00a      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007670:	e006      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007672:	bf00      	nop
 8007674:	e004      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007676:	bf00      	nop
 8007678:	e002      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800767a:	bf00      	nop
 800767c:	e000      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800767e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007680:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10b      	bne.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007688:	4ba0      	ldr	r3, [pc, #640]	@ (800790c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800768a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800768c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007694:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007698:	4a9c      	ldr	r2, [pc, #624]	@ (800790c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800769a:	430b      	orrs	r3, r1
 800769c:	6593      	str	r3, [r2, #88]	@ 0x58
 800769e:	e003      	b.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80076a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b0:	f002 0308 	and.w	r3, r2, #8
 80076b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80076b8:	2300      	movs	r3, #0
 80076ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80076be:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80076c2:	460b      	mov	r3, r1
 80076c4:	4313      	orrs	r3, r2
 80076c6:	d01e      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80076c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076d4:	d10c      	bne.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80076d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076da:	3328      	adds	r3, #40	@ 0x28
 80076dc:	2102      	movs	r1, #2
 80076de:	4618      	mov	r0, r3
 80076e0:	f001 fc5c 	bl	8008f9c <RCCEx_PLL3_Config>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d002      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80076f0:	4b86      	ldr	r3, [pc, #536]	@ (800790c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80076f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076f4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80076f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007700:	4a82      	ldr	r2, [pc, #520]	@ (800790c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007702:	430b      	orrs	r3, r1
 8007704:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800770a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770e:	f002 0310 	and.w	r3, r2, #16
 8007712:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007716:	2300      	movs	r3, #0
 8007718:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800771c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007720:	460b      	mov	r3, r1
 8007722:	4313      	orrs	r3, r2
 8007724:	d01e      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800772a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800772e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007732:	d10c      	bne.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007738:	3328      	adds	r3, #40	@ 0x28
 800773a:	2102      	movs	r1, #2
 800773c:	4618      	mov	r0, r3
 800773e:	f001 fc2d 	bl	8008f9c <RCCEx_PLL3_Config>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d002      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800774e:	4b6f      	ldr	r3, [pc, #444]	@ (800790c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007752:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800775a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800775e:	4a6b      	ldr	r2, [pc, #428]	@ (800790c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007760:	430b      	orrs	r3, r1
 8007762:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007770:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007772:	2300      	movs	r3, #0
 8007774:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007776:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800777a:	460b      	mov	r3, r1
 800777c:	4313      	orrs	r3, r2
 800777e:	d03e      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007784:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007788:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800778c:	d022      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800778e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007792:	d81b      	bhi.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007794:	2b00      	cmp	r3, #0
 8007796:	d003      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800779c:	d00b      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800779e:	e015      	b.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a4:	3308      	adds	r3, #8
 80077a6:	2100      	movs	r1, #0
 80077a8:	4618      	mov	r0, r3
 80077aa:	f001 fb45 	bl	8008e38 <RCCEx_PLL2_Config>
 80077ae:	4603      	mov	r3, r0
 80077b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80077b4:	e00f      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80077b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ba:	3328      	adds	r3, #40	@ 0x28
 80077bc:	2102      	movs	r1, #2
 80077be:	4618      	mov	r0, r3
 80077c0:	f001 fbec 	bl	8008f9c <RCCEx_PLL3_Config>
 80077c4:	4603      	mov	r3, r0
 80077c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80077ca:	e004      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80077d2:	e000      	b.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80077d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10b      	bne.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80077de:	4b4b      	ldr	r3, [pc, #300]	@ (800790c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077e2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80077e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80077ee:	4a47      	ldr	r2, [pc, #284]	@ (800790c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077f0:	430b      	orrs	r3, r1
 80077f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80077f4:	e003      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80077fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007806:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800780a:	673b      	str	r3, [r7, #112]	@ 0x70
 800780c:	2300      	movs	r3, #0
 800780e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007810:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007814:	460b      	mov	r3, r1
 8007816:	4313      	orrs	r3, r2
 8007818:	d03b      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800781a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800781e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007822:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007826:	d01f      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007828:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800782c:	d818      	bhi.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800782e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007832:	d003      	beq.n	800783c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007834:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007838:	d007      	beq.n	800784a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800783a:	e011      	b.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800783c:	4b33      	ldr	r3, [pc, #204]	@ (800790c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800783e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007840:	4a32      	ldr	r2, [pc, #200]	@ (800790c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007842:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007846:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007848:	e00f      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800784a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800784e:	3328      	adds	r3, #40	@ 0x28
 8007850:	2101      	movs	r1, #1
 8007852:	4618      	mov	r0, r3
 8007854:	f001 fba2 	bl	8008f9c <RCCEx_PLL3_Config>
 8007858:	4603      	mov	r3, r0
 800785a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800785e:	e004      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007866:	e000      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800786a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10b      	bne.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007872:	4b26      	ldr	r3, [pc, #152]	@ (800790c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007876:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800787a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800787e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007882:	4a22      	ldr	r2, [pc, #136]	@ (800790c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007884:	430b      	orrs	r3, r1
 8007886:	6553      	str	r3, [r2, #84]	@ 0x54
 8007888:	e003      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800788a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800788e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800789e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80078a0:	2300      	movs	r3, #0
 80078a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80078a4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80078a8:	460b      	mov	r3, r1
 80078aa:	4313      	orrs	r3, r2
 80078ac:	d034      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80078ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d003      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80078b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078bc:	d007      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80078be:	e011      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078c0:	4b12      	ldr	r3, [pc, #72]	@ (800790c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c4:	4a11      	ldr	r2, [pc, #68]	@ (800790c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80078cc:	e00e      	b.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078d2:	3308      	adds	r3, #8
 80078d4:	2102      	movs	r1, #2
 80078d6:	4618      	mov	r0, r3
 80078d8:	f001 faae 	bl	8008e38 <RCCEx_PLL2_Config>
 80078dc:	4603      	mov	r3, r0
 80078de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80078e2:	e003      	b.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80078ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10d      	bne.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80078f4:	4b05      	ldr	r3, [pc, #20]	@ (800790c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078f8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80078fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007902:	4a02      	ldr	r2, [pc, #8]	@ (800790c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007904:	430b      	orrs	r3, r1
 8007906:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007908:	e006      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800790a:	bf00      	nop
 800790c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007910:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007914:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800791c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007920:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007924:	663b      	str	r3, [r7, #96]	@ 0x60
 8007926:	2300      	movs	r3, #0
 8007928:	667b      	str	r3, [r7, #100]	@ 0x64
 800792a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800792e:	460b      	mov	r3, r1
 8007930:	4313      	orrs	r3, r2
 8007932:	d00c      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007934:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007938:	3328      	adds	r3, #40	@ 0x28
 800793a:	2102      	movs	r1, #2
 800793c:	4618      	mov	r0, r3
 800793e:	f001 fb2d 	bl	8008f9c <RCCEx_PLL3_Config>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800794e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007956:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800795a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800795c:	2300      	movs	r3, #0
 800795e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007960:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007964:	460b      	mov	r3, r1
 8007966:	4313      	orrs	r3, r2
 8007968:	d036      	beq.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800796a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800796e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007970:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007974:	d018      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007976:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800797a:	d811      	bhi.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800797c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007980:	d014      	beq.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007982:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007986:	d80b      	bhi.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007988:	2b00      	cmp	r3, #0
 800798a:	d011      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800798c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007990:	d106      	bne.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007992:	4bb7      	ldr	r3, [pc, #732]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007996:	4ab6      	ldr	r2, [pc, #728]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800799c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800799e:	e008      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80079a6:	e004      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80079a8:	bf00      	nop
 80079aa:	e002      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80079ac:	bf00      	nop
 80079ae:	e000      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80079b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10a      	bne.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80079ba:	4bad      	ldr	r3, [pc, #692]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80079c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079c8:	4aa9      	ldr	r2, [pc, #676]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079ca:	430b      	orrs	r3, r1
 80079cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80079ce:	e003      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80079d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80079e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80079e6:	2300      	movs	r3, #0
 80079e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80079ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80079ee:	460b      	mov	r3, r1
 80079f0:	4313      	orrs	r3, r2
 80079f2:	d009      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80079f4:	4b9e      	ldr	r3, [pc, #632]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80079fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a02:	4a9b      	ldr	r2, [pc, #620]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a04:	430b      	orrs	r3, r1
 8007a06:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a10:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007a14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a16:	2300      	movs	r3, #0
 8007a18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a1a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007a1e:	460b      	mov	r3, r1
 8007a20:	4313      	orrs	r3, r2
 8007a22:	d009      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007a24:	4b92      	ldr	r3, [pc, #584]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a28:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a32:	4a8f      	ldr	r2, [pc, #572]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a34:	430b      	orrs	r3, r1
 8007a36:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a40:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007a44:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a46:	2300      	movs	r3, #0
 8007a48:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a4a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007a4e:	460b      	mov	r3, r1
 8007a50:	4313      	orrs	r3, r2
 8007a52:	d00e      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a54:	4b86      	ldr	r3, [pc, #536]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	4a85      	ldr	r2, [pc, #532]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a5a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007a5e:	6113      	str	r3, [r2, #16]
 8007a60:	4b83      	ldr	r3, [pc, #524]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a62:	6919      	ldr	r1, [r3, #16]
 8007a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a6c:	4a80      	ldr	r2, [pc, #512]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a6e:	430b      	orrs	r3, r1
 8007a70:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007a80:	2300      	movs	r3, #0
 8007a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a84:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007a88:	460b      	mov	r3, r1
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	d009      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007a8e:	4b78      	ldr	r3, [pc, #480]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a92:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a9c:	4a74      	ldr	r2, [pc, #464]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a9e:	430b      	orrs	r3, r1
 8007aa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aaa:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007aae:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ab4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007ab8:	460b      	mov	r3, r1
 8007aba:	4313      	orrs	r3, r2
 8007abc:	d00a      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007abe:	4b6c      	ldr	r3, [pc, #432]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ac2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ace:	4a68      	ldr	r2, [pc, #416]	@ (8007c70 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007ad0:	430b      	orrs	r3, r1
 8007ad2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007adc:	2100      	movs	r1, #0
 8007ade:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007ae0:	f003 0301 	and.w	r3, r3, #1
 8007ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ae6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007aea:	460b      	mov	r3, r1
 8007aec:	4313      	orrs	r3, r2
 8007aee:	d011      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007af4:	3308      	adds	r3, #8
 8007af6:	2100      	movs	r1, #0
 8007af8:	4618      	mov	r0, r3
 8007afa:	f001 f99d 	bl	8008e38 <RCCEx_PLL2_Config>
 8007afe:	4603      	mov	r3, r0
 8007b00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007b04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d003      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	6239      	str	r1, [r7, #32]
 8007b20:	f003 0302 	and.w	r3, r3, #2
 8007b24:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b26:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	d011      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b34:	3308      	adds	r3, #8
 8007b36:	2101      	movs	r1, #1
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f001 f97d 	bl	8008e38 <RCCEx_PLL2_Config>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007b44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d003      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	61b9      	str	r1, [r7, #24]
 8007b60:	f003 0304 	and.w	r3, r3, #4
 8007b64:	61fb      	str	r3, [r7, #28]
 8007b66:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	d011      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b74:	3308      	adds	r3, #8
 8007b76:	2102      	movs	r1, #2
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f001 f95d 	bl	8008e38 <RCCEx_PLL2_Config>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007b84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d003      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	6139      	str	r1, [r7, #16]
 8007ba0:	f003 0308 	and.w	r3, r3, #8
 8007ba4:	617b      	str	r3, [r7, #20]
 8007ba6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007baa:	460b      	mov	r3, r1
 8007bac:	4313      	orrs	r3, r2
 8007bae:	d011      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb4:	3328      	adds	r3, #40	@ 0x28
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f001 f9ef 	bl	8008f9c <RCCEx_PLL3_Config>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007bc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d003      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bdc:	2100      	movs	r1, #0
 8007bde:	60b9      	str	r1, [r7, #8]
 8007be0:	f003 0310 	and.w	r3, r3, #16
 8007be4:	60fb      	str	r3, [r7, #12]
 8007be6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007bea:	460b      	mov	r3, r1
 8007bec:	4313      	orrs	r3, r2
 8007bee:	d011      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf4:	3328      	adds	r3, #40	@ 0x28
 8007bf6:	2101      	movs	r1, #1
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f001 f9cf 	bl	8008f9c <RCCEx_PLL3_Config>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007c04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d003      	beq.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	6039      	str	r1, [r7, #0]
 8007c20:	f003 0320 	and.w	r3, r3, #32
 8007c24:	607b      	str	r3, [r7, #4]
 8007c26:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	d011      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c34:	3328      	adds	r3, #40	@ 0x28
 8007c36:	2102      	movs	r1, #2
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f001 f9af 	bl	8008f9c <RCCEx_PLL3_Config>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007c44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d003      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007c54:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d101      	bne.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	e000      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c6e:	bf00      	nop
 8007c70:	58024400 	.word	0x58024400

08007c74 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b090      	sub	sp, #64	@ 0x40
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007c7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c82:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007c86:	430b      	orrs	r3, r1
 8007c88:	f040 8094 	bne.w	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007c8c:	4b9b      	ldr	r3, [pc, #620]	@ (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c90:	f003 0307 	and.w	r3, r3, #7
 8007c94:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c98:	2b04      	cmp	r3, #4
 8007c9a:	f200 8087 	bhi.w	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca4:	08007cb9 	.word	0x08007cb9
 8007ca8:	08007ce1 	.word	0x08007ce1
 8007cac:	08007d09 	.word	0x08007d09
 8007cb0:	08007da5 	.word	0x08007da5
 8007cb4:	08007d31 	.word	0x08007d31
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cb8:	4b90      	ldr	r3, [pc, #576]	@ (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cc0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007cc4:	d108      	bne.n	8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f000 ff62 	bl	8008b94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cd4:	f000 bc93 	b.w	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cdc:	f000 bc8f 	b.w	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ce0:	4b86      	ldr	r3, [pc, #536]	@ (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ce8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cec:	d108      	bne.n	8007d00 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cee:	f107 0318 	add.w	r3, r7, #24
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f000 fca6 	bl	8008644 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cfc:	f000 bc7f 	b.w	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d00:	2300      	movs	r3, #0
 8007d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d04:	f000 bc7b 	b.w	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d08:	4b7c      	ldr	r3, [pc, #496]	@ (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d14:	d108      	bne.n	8007d28 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d16:	f107 030c 	add.w	r3, r7, #12
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f000 fde6 	bl	80088ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d24:	f000 bc6b 	b.w	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d2c:	f000 bc67 	b.w	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d30:	4b72      	ldr	r3, [pc, #456]	@ (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d34:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007d38:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d3a:	4b70      	ldr	r3, [pc, #448]	@ (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 0304 	and.w	r3, r3, #4
 8007d42:	2b04      	cmp	r3, #4
 8007d44:	d10c      	bne.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d109      	bne.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d4c:	4b6b      	ldr	r3, [pc, #428]	@ (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	08db      	lsrs	r3, r3, #3
 8007d52:	f003 0303 	and.w	r3, r3, #3
 8007d56:	4a6a      	ldr	r2, [pc, #424]	@ (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007d58:	fa22 f303 	lsr.w	r3, r2, r3
 8007d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d5e:	e01f      	b.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d60:	4b66      	ldr	r3, [pc, #408]	@ (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d6c:	d106      	bne.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d74:	d102      	bne.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007d76:	4b63      	ldr	r3, [pc, #396]	@ (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d7a:	e011      	b.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d7c:	4b5f      	ldr	r3, [pc, #380]	@ (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d88:	d106      	bne.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d90:	d102      	bne.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007d92:	4b5d      	ldr	r3, [pc, #372]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d96:	e003      	b.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007d9c:	f000 bc2f 	b.w	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007da0:	f000 bc2d 	b.w	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007da4:	4b59      	ldr	r3, [pc, #356]	@ (8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007da8:	f000 bc29 	b.w	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007dac:	2300      	movs	r3, #0
 8007dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007db0:	f000 bc25 	b.w	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007db4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007db8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007dbc:	430b      	orrs	r3, r1
 8007dbe:	f040 80a7 	bne.w	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007dc2:	4b4e      	ldr	r3, [pc, #312]	@ (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dc6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007dca:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007dd2:	d054      	beq.n	8007e7e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007dda:	f200 808b 	bhi.w	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007de4:	f000 8083 	beq.w	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007dee:	f200 8081 	bhi.w	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007df8:	d02f      	beq.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e00:	d878      	bhi.n	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d004      	beq.n	8007e12 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8007e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e0e:	d012      	beq.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8007e10:	e070      	b.n	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e12:	4b3a      	ldr	r3, [pc, #232]	@ (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e1e:	d107      	bne.n	8007e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e24:	4618      	mov	r0, r3
 8007e26:	f000 feb5 	bl	8008b94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e2e:	e3e6      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e30:	2300      	movs	r3, #0
 8007e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e34:	e3e3      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e36:	4b31      	ldr	r3, [pc, #196]	@ (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e42:	d107      	bne.n	8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e44:	f107 0318 	add.w	r3, r7, #24
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f000 fbfb 	bl	8008644 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e52:	e3d4      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e54:	2300      	movs	r3, #0
 8007e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e58:	e3d1      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e5a:	4b28      	ldr	r3, [pc, #160]	@ (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e66:	d107      	bne.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e68:	f107 030c 	add.w	r3, r7, #12
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f000 fd3d 	bl	80088ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e76:	e3c2      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e7c:	e3bf      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007e86:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e88:	4b1c      	ldr	r3, [pc, #112]	@ (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0304 	and.w	r3, r3, #4
 8007e90:	2b04      	cmp	r3, #4
 8007e92:	d10c      	bne.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8007e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d109      	bne.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e9a:	4b18      	ldr	r3, [pc, #96]	@ (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	08db      	lsrs	r3, r3, #3
 8007ea0:	f003 0303 	and.w	r3, r3, #3
 8007ea4:	4a16      	ldr	r2, [pc, #88]	@ (8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8007eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007eac:	e01e      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007eae:	4b13      	ldr	r3, [pc, #76]	@ (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007eba:	d106      	bne.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8007ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ebe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ec2:	d102      	bne.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ec8:	e010      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007eca:	4b0c      	ldr	r3, [pc, #48]	@ (8007efc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ed2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ed6:	d106      	bne.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ede:	d102      	bne.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007ee0:	4b09      	ldr	r3, [pc, #36]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ee4:	e002      	b.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007eea:	e388      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007eec:	e387      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007eee:	4b07      	ldr	r3, [pc, #28]	@ (8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ef2:	e384      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ef8:	e381      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007efa:	bf00      	nop
 8007efc:	58024400 	.word	0x58024400
 8007f00:	03d09000 	.word	0x03d09000
 8007f04:	003d0900 	.word	0x003d0900
 8007f08:	016e3600 	.word	0x016e3600
 8007f0c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f14:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007f18:	430b      	orrs	r3, r1
 8007f1a:	f040 809c 	bne.w	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007f1e:	4b9e      	ldr	r3, [pc, #632]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f22:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007f26:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f2e:	d054      	beq.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8007f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f36:	f200 808b 	bhi.w	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007f40:	f000 8083 	beq.w	800804a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8007f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f46:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007f4a:	f200 8081 	bhi.w	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f54:	d02f      	beq.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8007f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f5c:	d878      	bhi.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d004      	beq.n	8007f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f6a:	d012      	beq.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8007f6c:	e070      	b.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f6e:	4b8a      	ldr	r3, [pc, #552]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f7a:	d107      	bne.n	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f80:	4618      	mov	r0, r3
 8007f82:	f000 fe07 	bl	8008b94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f8a:	e338      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f90:	e335      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f92:	4b81      	ldr	r3, [pc, #516]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f9e:	d107      	bne.n	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fa0:	f107 0318 	add.w	r3, r7, #24
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 fb4d 	bl	8008644 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fae:	e326      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fb4:	e323      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fb6:	4b78      	ldr	r3, [pc, #480]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fc2:	d107      	bne.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fc4:	f107 030c 	add.w	r3, r7, #12
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 fc8f 	bl	80088ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fd2:	e314      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fd8:	e311      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fda:	4b6f      	ldr	r3, [pc, #444]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fde:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007fe2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fe4:	4b6c      	ldr	r3, [pc, #432]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 0304 	and.w	r3, r3, #4
 8007fec:	2b04      	cmp	r3, #4
 8007fee:	d10c      	bne.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d109      	bne.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ff6:	4b68      	ldr	r3, [pc, #416]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	08db      	lsrs	r3, r3, #3
 8007ffc:	f003 0303 	and.w	r3, r3, #3
 8008000:	4a66      	ldr	r2, [pc, #408]	@ (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008002:	fa22 f303 	lsr.w	r3, r2, r3
 8008006:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008008:	e01e      	b.n	8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800800a:	4b63      	ldr	r3, [pc, #396]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008012:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008016:	d106      	bne.n	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800801a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800801e:	d102      	bne.n	8008026 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008020:	4b5f      	ldr	r3, [pc, #380]	@ (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008022:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008024:	e010      	b.n	8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008026:	4b5c      	ldr	r3, [pc, #368]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800802e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008032:	d106      	bne.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008036:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800803a:	d102      	bne.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800803c:	4b59      	ldr	r3, [pc, #356]	@ (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800803e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008040:	e002      	b.n	8008048 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008042:	2300      	movs	r3, #0
 8008044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008046:	e2da      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008048:	e2d9      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800804a:	4b57      	ldr	r3, [pc, #348]	@ (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800804c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800804e:	e2d6      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008050:	2300      	movs	r3, #0
 8008052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008054:	e2d3      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008056:	e9d7 2300 	ldrd	r2, r3, [r7]
 800805a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800805e:	430b      	orrs	r3, r1
 8008060:	f040 80a7 	bne.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008064:	4b4c      	ldr	r3, [pc, #304]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008068:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800806c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800806e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008070:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008074:	d055      	beq.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008078:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800807c:	f200 8096 	bhi.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008082:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008086:	f000 8084 	beq.w	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800808a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800808c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008090:	f200 808c 	bhi.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008096:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800809a:	d030      	beq.n	80080fe <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800809c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800809e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080a2:	f200 8083 	bhi.w	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80080a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d004      	beq.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80080ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080b2:	d012      	beq.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80080b4:	e07a      	b.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080b6:	4b38      	ldr	r3, [pc, #224]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080c2:	d107      	bne.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080c8:	4618      	mov	r0, r3
 80080ca:	f000 fd63 	bl	8008b94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080d2:	e294      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080d4:	2300      	movs	r3, #0
 80080d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080d8:	e291      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080da:	4b2f      	ldr	r3, [pc, #188]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080e6:	d107      	bne.n	80080f8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080e8:	f107 0318 	add.w	r3, r7, #24
 80080ec:	4618      	mov	r0, r3
 80080ee:	f000 faa9 	bl	8008644 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080f6:	e282      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080f8:	2300      	movs	r3, #0
 80080fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080fc:	e27f      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80080fe:	4b26      	ldr	r3, [pc, #152]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008106:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800810a:	d107      	bne.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800810c:	f107 030c 	add.w	r3, r7, #12
 8008110:	4618      	mov	r0, r3
 8008112:	f000 fbeb 	bl	80088ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800811a:	e270      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800811c:	2300      	movs	r3, #0
 800811e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008120:	e26d      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008122:	4b1d      	ldr	r3, [pc, #116]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008126:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800812a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800812c:	4b1a      	ldr	r3, [pc, #104]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 0304 	and.w	r3, r3, #4
 8008134:	2b04      	cmp	r3, #4
 8008136:	d10c      	bne.n	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800813a:	2b00      	cmp	r3, #0
 800813c:	d109      	bne.n	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800813e:	4b16      	ldr	r3, [pc, #88]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	08db      	lsrs	r3, r3, #3
 8008144:	f003 0303 	and.w	r3, r3, #3
 8008148:	4a14      	ldr	r2, [pc, #80]	@ (800819c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800814a:	fa22 f303 	lsr.w	r3, r2, r3
 800814e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008150:	e01e      	b.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008152:	4b11      	ldr	r3, [pc, #68]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800815a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800815e:	d106      	bne.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008162:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008166:	d102      	bne.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008168:	4b0d      	ldr	r3, [pc, #52]	@ (80081a0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800816a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800816c:	e010      	b.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800816e:	4b0a      	ldr	r3, [pc, #40]	@ (8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008176:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800817a:	d106      	bne.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800817c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800817e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008182:	d102      	bne.n	800818a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008184:	4b07      	ldr	r3, [pc, #28]	@ (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008186:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008188:	e002      	b.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800818a:	2300      	movs	r3, #0
 800818c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800818e:	e236      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008190:	e235      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008192:	4b05      	ldr	r3, [pc, #20]	@ (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008196:	e232      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008198:	58024400 	.word	0x58024400
 800819c:	03d09000 	.word	0x03d09000
 80081a0:	003d0900 	.word	0x003d0900
 80081a4:	016e3600 	.word	0x016e3600
 80081a8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80081ac:	2300      	movs	r3, #0
 80081ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081b0:	e225      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80081b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081b6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80081ba:	430b      	orrs	r3, r1
 80081bc:	f040 8085 	bne.w	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80081c0:	4b9c      	ldr	r3, [pc, #624]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80081c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081c4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80081c8:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80081ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80081d0:	d06b      	beq.n	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80081d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80081d8:	d874      	bhi.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80081da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80081e0:	d056      	beq.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80081e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80081e8:	d86c      	bhi.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80081ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80081f0:	d03b      	beq.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80081f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80081f8:	d864      	bhi.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80081fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008200:	d021      	beq.n	8008246 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008204:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008208:	d85c      	bhi.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800820a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800820c:	2b00      	cmp	r3, #0
 800820e:	d004      	beq.n	800821a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8008210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008212:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008216:	d004      	beq.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008218:	e054      	b.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800821a:	f7fe fb5f 	bl	80068dc <HAL_RCC_GetPCLK1Freq>
 800821e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008220:	e1ed      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008222:	4b84      	ldr	r3, [pc, #528]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800822a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800822e:	d107      	bne.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008230:	f107 0318 	add.w	r3, r7, #24
 8008234:	4618      	mov	r0, r3
 8008236:	f000 fa05 	bl	8008644 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800823e:	e1de      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008240:	2300      	movs	r3, #0
 8008242:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008244:	e1db      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008246:	4b7b      	ldr	r3, [pc, #492]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800824e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008252:	d107      	bne.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008254:	f107 030c 	add.w	r3, r7, #12
 8008258:	4618      	mov	r0, r3
 800825a:	f000 fb47 	bl	80088ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008262:	e1cc      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008264:	2300      	movs	r3, #0
 8008266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008268:	e1c9      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800826a:	4b72      	ldr	r3, [pc, #456]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 0304 	and.w	r3, r3, #4
 8008272:	2b04      	cmp	r3, #4
 8008274:	d109      	bne.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008276:	4b6f      	ldr	r3, [pc, #444]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	08db      	lsrs	r3, r3, #3
 800827c:	f003 0303 	and.w	r3, r3, #3
 8008280:	4a6d      	ldr	r2, [pc, #436]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008282:	fa22 f303 	lsr.w	r3, r2, r3
 8008286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008288:	e1b9      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800828a:	2300      	movs	r3, #0
 800828c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800828e:	e1b6      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008290:	4b68      	ldr	r3, [pc, #416]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008298:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800829c:	d102      	bne.n	80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800829e:	4b67      	ldr	r3, [pc, #412]	@ (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80082a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082a2:	e1ac      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80082a4:	2300      	movs	r3, #0
 80082a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082a8:	e1a9      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80082aa:	4b62      	ldr	r3, [pc, #392]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082b6:	d102      	bne.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80082b8:	4b61      	ldr	r3, [pc, #388]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80082ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082bc:	e19f      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80082be:	2300      	movs	r3, #0
 80082c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082c2:	e19c      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80082c4:	2300      	movs	r3, #0
 80082c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082c8:	e199      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80082ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082ce:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80082d2:	430b      	orrs	r3, r1
 80082d4:	d173      	bne.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80082d6:	4b57      	ldr	r3, [pc, #348]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80082d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80082de:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80082e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082e6:	d02f      	beq.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80082e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082ee:	d863      	bhi.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80082f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d004      	beq.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80082f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082fc:	d012      	beq.n	8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80082fe:	e05b      	b.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008300:	4b4c      	ldr	r3, [pc, #304]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008308:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800830c:	d107      	bne.n	800831e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800830e:	f107 0318 	add.w	r3, r7, #24
 8008312:	4618      	mov	r0, r3
 8008314:	f000 f996 	bl	8008644 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800831c:	e16f      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800831e:	2300      	movs	r3, #0
 8008320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008322:	e16c      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008324:	4b43      	ldr	r3, [pc, #268]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800832c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008330:	d107      	bne.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008332:	f107 030c 	add.w	r3, r7, #12
 8008336:	4618      	mov	r0, r3
 8008338:	f000 fad8 	bl	80088ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008340:	e15d      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008342:	2300      	movs	r3, #0
 8008344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008346:	e15a      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008348:	4b3a      	ldr	r3, [pc, #232]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800834a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800834c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008350:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008352:	4b38      	ldr	r3, [pc, #224]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f003 0304 	and.w	r3, r3, #4
 800835a:	2b04      	cmp	r3, #4
 800835c:	d10c      	bne.n	8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800835e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008360:	2b00      	cmp	r3, #0
 8008362:	d109      	bne.n	8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008364:	4b33      	ldr	r3, [pc, #204]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	08db      	lsrs	r3, r3, #3
 800836a:	f003 0303 	and.w	r3, r3, #3
 800836e:	4a32      	ldr	r2, [pc, #200]	@ (8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008370:	fa22 f303 	lsr.w	r3, r2, r3
 8008374:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008376:	e01e      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008378:	4b2e      	ldr	r3, [pc, #184]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008380:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008384:	d106      	bne.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008388:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800838c:	d102      	bne.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800838e:	4b2b      	ldr	r3, [pc, #172]	@ (800843c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008390:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008392:	e010      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008394:	4b27      	ldr	r3, [pc, #156]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800839c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083a0:	d106      	bne.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80083a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083a8:	d102      	bne.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80083aa:	4b25      	ldr	r3, [pc, #148]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80083ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083ae:	e002      	b.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80083b0:	2300      	movs	r3, #0
 80083b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80083b4:	e123      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80083b6:	e122      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80083b8:	2300      	movs	r3, #0
 80083ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083bc:	e11f      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80083be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083c2:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80083c6:	430b      	orrs	r3, r1
 80083c8:	d13c      	bne.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80083ca:	4b1a      	ldr	r3, [pc, #104]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80083cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80083d2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80083d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d004      	beq.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80083da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083e0:	d012      	beq.n	8008408 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80083e2:	e023      	b.n	800842c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80083e4:	4b13      	ldr	r3, [pc, #76]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083f0:	d107      	bne.n	8008402 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083f6:	4618      	mov	r0, r3
 80083f8:	f000 fbcc 	bl	8008b94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008400:	e0fd      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008402:	2300      	movs	r3, #0
 8008404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008406:	e0fa      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008408:	4b0a      	ldr	r3, [pc, #40]	@ (8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008410:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008414:	d107      	bne.n	8008426 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008416:	f107 0318 	add.w	r3, r7, #24
 800841a:	4618      	mov	r0, r3
 800841c:	f000 f912 	bl	8008644 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008420:	6a3b      	ldr	r3, [r7, #32]
 8008422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008424:	e0eb      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008426:	2300      	movs	r3, #0
 8008428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800842a:	e0e8      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800842c:	2300      	movs	r3, #0
 800842e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008430:	e0e5      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008432:	bf00      	nop
 8008434:	58024400 	.word	0x58024400
 8008438:	03d09000 	.word	0x03d09000
 800843c:	003d0900 	.word	0x003d0900
 8008440:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008444:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008448:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800844c:	430b      	orrs	r3, r1
 800844e:	f040 8085 	bne.w	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008452:	4b6d      	ldr	r3, [pc, #436]	@ (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008456:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800845a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800845c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800845e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008462:	d06b      	beq.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008466:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800846a:	d874      	bhi.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800846c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800846e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008472:	d056      	beq.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008476:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800847a:	d86c      	bhi.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800847c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800847e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008482:	d03b      	beq.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008486:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800848a:	d864      	bhi.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800848c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800848e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008492:	d021      	beq.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008496:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800849a:	d85c      	bhi.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800849c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d004      	beq.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80084a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084a8:	d004      	beq.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80084aa:	e054      	b.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80084ac:	f000 f8b4 	bl	8008618 <HAL_RCCEx_GetD3PCLK1Freq>
 80084b0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80084b2:	e0a4      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084b4:	4b54      	ldr	r3, [pc, #336]	@ (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084c0:	d107      	bne.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084c2:	f107 0318 	add.w	r3, r7, #24
 80084c6:	4618      	mov	r0, r3
 80084c8:	f000 f8bc 	bl	8008644 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084d0:	e095      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084d2:	2300      	movs	r3, #0
 80084d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084d6:	e092      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084d8:	4b4b      	ldr	r3, [pc, #300]	@ (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084e4:	d107      	bne.n	80084f6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084e6:	f107 030c 	add.w	r3, r7, #12
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 f9fe 	bl	80088ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084f4:	e083      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084f6:	2300      	movs	r3, #0
 80084f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084fa:	e080      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084fc:	4b42      	ldr	r3, [pc, #264]	@ (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 0304 	and.w	r3, r3, #4
 8008504:	2b04      	cmp	r3, #4
 8008506:	d109      	bne.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008508:	4b3f      	ldr	r3, [pc, #252]	@ (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	08db      	lsrs	r3, r3, #3
 800850e:	f003 0303 	and.w	r3, r3, #3
 8008512:	4a3e      	ldr	r2, [pc, #248]	@ (800860c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008514:	fa22 f303 	lsr.w	r3, r2, r3
 8008518:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800851a:	e070      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800851c:	2300      	movs	r3, #0
 800851e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008520:	e06d      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008522:	4b39      	ldr	r3, [pc, #228]	@ (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800852a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800852e:	d102      	bne.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8008530:	4b37      	ldr	r3, [pc, #220]	@ (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008534:	e063      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008536:	2300      	movs	r3, #0
 8008538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800853a:	e060      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800853c:	4b32      	ldr	r3, [pc, #200]	@ (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008544:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008548:	d102      	bne.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800854a:	4b32      	ldr	r3, [pc, #200]	@ (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800854c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800854e:	e056      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008550:	2300      	movs	r3, #0
 8008552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008554:	e053      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008556:	2300      	movs	r3, #0
 8008558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800855a:	e050      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800855c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008560:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008564:	430b      	orrs	r3, r1
 8008566:	d148      	bne.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008568:	4b27      	ldr	r3, [pc, #156]	@ (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800856a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800856c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008570:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008574:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008578:	d02a      	beq.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800857a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800857c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008580:	d838      	bhi.n	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008584:	2b00      	cmp	r3, #0
 8008586:	d004      	beq.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800858a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800858e:	d00d      	beq.n	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008590:	e030      	b.n	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008592:	4b1d      	ldr	r3, [pc, #116]	@ (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800859a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800859e:	d102      	bne.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80085a0:	4b1c      	ldr	r3, [pc, #112]	@ (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80085a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085a4:	e02b      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085a6:	2300      	movs	r3, #0
 80085a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085aa:	e028      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085ac:	4b16      	ldr	r3, [pc, #88]	@ (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085b8:	d107      	bne.n	80085ca <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 fae8 	bl	8008b94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085c8:	e019      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085ca:	2300      	movs	r3, #0
 80085cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085ce:	e016      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085d0:	4b0d      	ldr	r3, [pc, #52]	@ (8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085dc:	d107      	bne.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085de:	f107 0318 	add.w	r3, r7, #24
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 f82e 	bl	8008644 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085ec:	e007      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085ee:	2300      	movs	r3, #0
 80085f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085f2:	e004      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80085f4:	2300      	movs	r3, #0
 80085f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085f8:	e001      	b.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80085fa:	2300      	movs	r3, #0
 80085fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80085fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008600:	4618      	mov	r0, r3
 8008602:	3740      	adds	r7, #64	@ 0x40
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}
 8008608:	58024400 	.word	0x58024400
 800860c:	03d09000 	.word	0x03d09000
 8008610:	003d0900 	.word	0x003d0900
 8008614:	016e3600 	.word	0x016e3600

08008618 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800861c:	f7fe f92e 	bl	800687c <HAL_RCC_GetHCLKFreq>
 8008620:	4602      	mov	r2, r0
 8008622:	4b06      	ldr	r3, [pc, #24]	@ (800863c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	091b      	lsrs	r3, r3, #4
 8008628:	f003 0307 	and.w	r3, r3, #7
 800862c:	4904      	ldr	r1, [pc, #16]	@ (8008640 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800862e:	5ccb      	ldrb	r3, [r1, r3]
 8008630:	f003 031f 	and.w	r3, r3, #31
 8008634:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008638:	4618      	mov	r0, r3
 800863a:	bd80      	pop	{r7, pc}
 800863c:	58024400 	.word	0x58024400
 8008640:	0800c5d4 	.word	0x0800c5d4

08008644 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008644:	b480      	push	{r7}
 8008646:	b089      	sub	sp, #36	@ 0x24
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800864c:	4ba1      	ldr	r3, [pc, #644]	@ (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800864e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008650:	f003 0303 	and.w	r3, r3, #3
 8008654:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008656:	4b9f      	ldr	r3, [pc, #636]	@ (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800865a:	0b1b      	lsrs	r3, r3, #12
 800865c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008660:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008662:	4b9c      	ldr	r3, [pc, #624]	@ (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008666:	091b      	lsrs	r3, r3, #4
 8008668:	f003 0301 	and.w	r3, r3, #1
 800866c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800866e:	4b99      	ldr	r3, [pc, #612]	@ (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008672:	08db      	lsrs	r3, r3, #3
 8008674:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008678:	693a      	ldr	r2, [r7, #16]
 800867a:	fb02 f303 	mul.w	r3, r2, r3
 800867e:	ee07 3a90 	vmov	s15, r3
 8008682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008686:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 8111 	beq.w	80088b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	2b02      	cmp	r3, #2
 8008696:	f000 8083 	beq.w	80087a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	2b02      	cmp	r3, #2
 800869e:	f200 80a1 	bhi.w	80087e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d003      	beq.n	80086b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d056      	beq.n	800875c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80086ae:	e099      	b.n	80087e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086b0:	4b88      	ldr	r3, [pc, #544]	@ (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 0320 	and.w	r3, r3, #32
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d02d      	beq.n	8008718 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086bc:	4b85      	ldr	r3, [pc, #532]	@ (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	08db      	lsrs	r3, r3, #3
 80086c2:	f003 0303 	and.w	r3, r3, #3
 80086c6:	4a84      	ldr	r2, [pc, #528]	@ (80088d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80086c8:	fa22 f303 	lsr.w	r3, r2, r3
 80086cc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	ee07 3a90 	vmov	s15, r3
 80086d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	ee07 3a90 	vmov	s15, r3
 80086de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086e6:	4b7b      	ldr	r3, [pc, #492]	@ (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ee:	ee07 3a90 	vmov	s15, r3
 80086f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80086fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80088dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008706:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800870a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800870e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008712:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008716:	e087      	b.n	8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	ee07 3a90 	vmov	s15, r3
 800871e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008722:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80088e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800872a:	4b6a      	ldr	r3, [pc, #424]	@ (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800872c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800872e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008732:	ee07 3a90 	vmov	s15, r3
 8008736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800873a:	ed97 6a03 	vldr	s12, [r7, #12]
 800873e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80088dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800874a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800874e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008756:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800875a:	e065      	b.n	8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	ee07 3a90 	vmov	s15, r3
 8008762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008766:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80088e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800876a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800876e:	4b59      	ldr	r3, [pc, #356]	@ (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008776:	ee07 3a90 	vmov	s15, r3
 800877a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800877e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008782:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80088dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800878a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800878e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800879a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800879e:	e043      	b.n	8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	ee07 3a90 	vmov	s15, r3
 80087a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80088e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80087ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087b2:	4b48      	ldr	r3, [pc, #288]	@ (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ba:	ee07 3a90 	vmov	s15, r3
 80087be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80087c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80088dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087e2:	e021      	b.n	8008828 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	ee07 3a90 	vmov	s15, r3
 80087ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80088e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80087f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087f6:	4b37      	ldr	r3, [pc, #220]	@ (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087fe:	ee07 3a90 	vmov	s15, r3
 8008802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008806:	ed97 6a03 	vldr	s12, [r7, #12]
 800880a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80088dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800880e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008816:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800881a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800881e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008822:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008826:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008828:	4b2a      	ldr	r3, [pc, #168]	@ (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800882a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800882c:	0a5b      	lsrs	r3, r3, #9
 800882e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008832:	ee07 3a90 	vmov	s15, r3
 8008836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800883a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800883e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008842:	edd7 6a07 	vldr	s13, [r7, #28]
 8008846:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800884a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800884e:	ee17 2a90 	vmov	r2, s15
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008856:	4b1f      	ldr	r3, [pc, #124]	@ (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800885a:	0c1b      	lsrs	r3, r3, #16
 800885c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008860:	ee07 3a90 	vmov	s15, r3
 8008864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008868:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800886c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008870:	edd7 6a07 	vldr	s13, [r7, #28]
 8008874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800887c:	ee17 2a90 	vmov	r2, s15
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008884:	4b13      	ldr	r3, [pc, #76]	@ (80088d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008888:	0e1b      	lsrs	r3, r3, #24
 800888a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800888e:	ee07 3a90 	vmov	s15, r3
 8008892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008896:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800889a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800889e:	edd7 6a07 	vldr	s13, [r7, #28]
 80088a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088aa:	ee17 2a90 	vmov	r2, s15
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80088b2:	e008      	b.n	80088c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	609a      	str	r2, [r3, #8]
}
 80088c6:	bf00      	nop
 80088c8:	3724      	adds	r7, #36	@ 0x24
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	58024400 	.word	0x58024400
 80088d8:	03d09000 	.word	0x03d09000
 80088dc:	46000000 	.word	0x46000000
 80088e0:	4c742400 	.word	0x4c742400
 80088e4:	4a742400 	.word	0x4a742400
 80088e8:	4bb71b00 	.word	0x4bb71b00

080088ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b089      	sub	sp, #36	@ 0x24
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80088f4:	4ba1      	ldr	r3, [pc, #644]	@ (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f8:	f003 0303 	and.w	r3, r3, #3
 80088fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80088fe:	4b9f      	ldr	r3, [pc, #636]	@ (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008902:	0d1b      	lsrs	r3, r3, #20
 8008904:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008908:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800890a:	4b9c      	ldr	r3, [pc, #624]	@ (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800890c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800890e:	0a1b      	lsrs	r3, r3, #8
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008916:	4b99      	ldr	r3, [pc, #612]	@ (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800891a:	08db      	lsrs	r3, r3, #3
 800891c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008920:	693a      	ldr	r2, [r7, #16]
 8008922:	fb02 f303 	mul.w	r3, r2, r3
 8008926:	ee07 3a90 	vmov	s15, r3
 800892a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800892e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	2b00      	cmp	r3, #0
 8008936:	f000 8111 	beq.w	8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	2b02      	cmp	r3, #2
 800893e:	f000 8083 	beq.w	8008a48 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	2b02      	cmp	r3, #2
 8008946:	f200 80a1 	bhi.w	8008a8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d003      	beq.n	8008958 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d056      	beq.n	8008a04 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008956:	e099      	b.n	8008a8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008958:	4b88      	ldr	r3, [pc, #544]	@ (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 0320 	and.w	r3, r3, #32
 8008960:	2b00      	cmp	r3, #0
 8008962:	d02d      	beq.n	80089c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008964:	4b85      	ldr	r3, [pc, #532]	@ (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	08db      	lsrs	r3, r3, #3
 800896a:	f003 0303 	and.w	r3, r3, #3
 800896e:	4a84      	ldr	r2, [pc, #528]	@ (8008b80 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008970:	fa22 f303 	lsr.w	r3, r2, r3
 8008974:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	ee07 3a90 	vmov	s15, r3
 800897c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	ee07 3a90 	vmov	s15, r3
 8008986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800898a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800898e:	4b7b      	ldr	r3, [pc, #492]	@ (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008996:	ee07 3a90 	vmov	s15, r3
 800899a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800899e:	ed97 6a03 	vldr	s12, [r7, #12]
 80089a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80089be:	e087      	b.n	8008ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	ee07 3a90 	vmov	s15, r3
 80089c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008b88 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80089ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089d2:	4b6a      	ldr	r3, [pc, #424]	@ (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089da:	ee07 3a90 	vmov	s15, r3
 80089de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80089e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a02:	e065      	b.n	8008ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	ee07 3a90 	vmov	s15, r3
 8008a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a0e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008b8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a16:	4b59      	ldr	r3, [pc, #356]	@ (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a1e:	ee07 3a90 	vmov	s15, r3
 8008a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a26:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a2a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a46:	e043      	b.n	8008ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	ee07 3a90 	vmov	s15, r3
 8008a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a52:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008b90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a5a:	4b48      	ldr	r3, [pc, #288]	@ (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a62:	ee07 3a90 	vmov	s15, r3
 8008a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a6e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a8a:	e021      	b.n	8008ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	ee07 3a90 	vmov	s15, r3
 8008a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a96:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008b8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a9e:	4b37      	ldr	r3, [pc, #220]	@ (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aa6:	ee07 3a90 	vmov	s15, r3
 8008aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aae:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ab2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008abe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ace:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad4:	0a5b      	lsrs	r3, r3, #9
 8008ad6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ada:	ee07 3a90 	vmov	s15, r3
 8008ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ae2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ae6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008aea:	edd7 6a07 	vldr	s13, [r7, #28]
 8008aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008af6:	ee17 2a90 	vmov	r2, s15
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008afe:	4b1f      	ldr	r3, [pc, #124]	@ (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b02:	0c1b      	lsrs	r3, r3, #16
 8008b04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b08:	ee07 3a90 	vmov	s15, r3
 8008b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b18:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b24:	ee17 2a90 	vmov	r2, s15
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008b2c:	4b13      	ldr	r3, [pc, #76]	@ (8008b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b30:	0e1b      	lsrs	r3, r3, #24
 8008b32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b36:	ee07 3a90 	vmov	s15, r3
 8008b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b46:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b52:	ee17 2a90 	vmov	r2, s15
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008b5a:	e008      	b.n	8008b6e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	609a      	str	r2, [r3, #8]
}
 8008b6e:	bf00      	nop
 8008b70:	3724      	adds	r7, #36	@ 0x24
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	58024400 	.word	0x58024400
 8008b80:	03d09000 	.word	0x03d09000
 8008b84:	46000000 	.word	0x46000000
 8008b88:	4c742400 	.word	0x4c742400
 8008b8c:	4a742400 	.word	0x4a742400
 8008b90:	4bb71b00 	.word	0x4bb71b00

08008b94 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b089      	sub	sp, #36	@ 0x24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b9c:	4ba0      	ldr	r3, [pc, #640]	@ (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ba0:	f003 0303 	and.w	r3, r3, #3
 8008ba4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008ba6:	4b9e      	ldr	r3, [pc, #632]	@ (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008baa:	091b      	lsrs	r3, r3, #4
 8008bac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008bb0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008bb2:	4b9b      	ldr	r3, [pc, #620]	@ (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb6:	f003 0301 	and.w	r3, r3, #1
 8008bba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008bbc:	4b98      	ldr	r3, [pc, #608]	@ (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bc0:	08db      	lsrs	r3, r3, #3
 8008bc2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bc6:	693a      	ldr	r2, [r7, #16]
 8008bc8:	fb02 f303 	mul.w	r3, r2, r3
 8008bcc:	ee07 3a90 	vmov	s15, r3
 8008bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bd4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f000 8111 	beq.w	8008e02 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	2b02      	cmp	r3, #2
 8008be4:	f000 8083 	beq.w	8008cee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	f200 80a1 	bhi.w	8008d32 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d003      	beq.n	8008bfe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d056      	beq.n	8008caa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008bfc:	e099      	b.n	8008d32 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bfe:	4b88      	ldr	r3, [pc, #544]	@ (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f003 0320 	and.w	r3, r3, #32
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d02d      	beq.n	8008c66 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c0a:	4b85      	ldr	r3, [pc, #532]	@ (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	08db      	lsrs	r3, r3, #3
 8008c10:	f003 0303 	and.w	r3, r3, #3
 8008c14:	4a83      	ldr	r2, [pc, #524]	@ (8008e24 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008c16:	fa22 f303 	lsr.w	r3, r2, r3
 8008c1a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	ee07 3a90 	vmov	s15, r3
 8008c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	ee07 3a90 	vmov	s15, r3
 8008c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c34:	4b7a      	ldr	r3, [pc, #488]	@ (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c3c:	ee07 3a90 	vmov	s15, r3
 8008c40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c44:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c48:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008e28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c60:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008c64:	e087      	b.n	8008d76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	ee07 3a90 	vmov	s15, r3
 8008c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c70:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008e2c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008c74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c78:	4b69      	ldr	r3, [pc, #420]	@ (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c80:	ee07 3a90 	vmov	s15, r3
 8008c84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c88:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c8c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008e28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ca4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ca8:	e065      	b.n	8008d76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	ee07 3a90 	vmov	s15, r3
 8008cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cb4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008e30 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008cb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cbc:	4b58      	ldr	r3, [pc, #352]	@ (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cc4:	ee07 3a90 	vmov	s15, r3
 8008cc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ccc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cd0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008e28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008cd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cdc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ce0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ce8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cec:	e043      	b.n	8008d76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	ee07 3a90 	vmov	s15, r3
 8008cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cf8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008cfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d00:	4b47      	ldr	r3, [pc, #284]	@ (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d08:	ee07 3a90 	vmov	s15, r3
 8008d0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d10:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d14:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008e28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d30:	e021      	b.n	8008d76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	ee07 3a90 	vmov	s15, r3
 8008d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d3c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008e2c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008d40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d44:	4b36      	ldr	r3, [pc, #216]	@ (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d4c:	ee07 3a90 	vmov	s15, r3
 8008d50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d54:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d58:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008e28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d74:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008d76:	4b2a      	ldr	r3, [pc, #168]	@ (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d7a:	0a5b      	lsrs	r3, r3, #9
 8008d7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d80:	ee07 3a90 	vmov	s15, r3
 8008d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d90:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d9c:	ee17 2a90 	vmov	r2, s15
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008da4:	4b1e      	ldr	r3, [pc, #120]	@ (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008da8:	0c1b      	lsrs	r3, r3, #16
 8008daa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dae:	ee07 3a90 	vmov	s15, r3
 8008db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008dba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dca:	ee17 2a90 	vmov	r2, s15
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008dd2:	4b13      	ldr	r3, [pc, #76]	@ (8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dd6:	0e1b      	lsrs	r3, r3, #24
 8008dd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ddc:	ee07 3a90 	vmov	s15, r3
 8008de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008de4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008de8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dec:	edd7 6a07 	vldr	s13, [r7, #28]
 8008df0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008df4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008df8:	ee17 2a90 	vmov	r2, s15
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008e00:	e008      	b.n	8008e14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	609a      	str	r2, [r3, #8]
}
 8008e14:	bf00      	nop
 8008e16:	3724      	adds	r7, #36	@ 0x24
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr
 8008e20:	58024400 	.word	0x58024400
 8008e24:	03d09000 	.word	0x03d09000
 8008e28:	46000000 	.word	0x46000000
 8008e2c:	4c742400 	.word	0x4c742400
 8008e30:	4a742400 	.word	0x4a742400
 8008e34:	4bb71b00 	.word	0x4bb71b00

08008e38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e46:	4b53      	ldr	r3, [pc, #332]	@ (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e4a:	f003 0303 	and.w	r3, r3, #3
 8008e4e:	2b03      	cmp	r3, #3
 8008e50:	d101      	bne.n	8008e56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	e099      	b.n	8008f8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008e56:	4b4f      	ldr	r3, [pc, #316]	@ (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a4e      	ldr	r2, [pc, #312]	@ (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008e5c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008e60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e62:	f7f9 f931 	bl	80020c8 <HAL_GetTick>
 8008e66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e68:	e008      	b.n	8008e7c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008e6a:	f7f9 f92d 	bl	80020c8 <HAL_GetTick>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	d901      	bls.n	8008e7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e78:	2303      	movs	r3, #3
 8008e7a:	e086      	b.n	8008f8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e7c:	4b45      	ldr	r3, [pc, #276]	@ (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1f0      	bne.n	8008e6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008e88:	4b42      	ldr	r3, [pc, #264]	@ (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e8c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	031b      	lsls	r3, r3, #12
 8008e96:	493f      	ldr	r1, [pc, #252]	@ (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	628b      	str	r3, [r1, #40]	@ 0x28
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	025b      	lsls	r3, r3, #9
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	431a      	orrs	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	041b      	lsls	r3, r3, #16
 8008eba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008ebe:	431a      	orrs	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	061b      	lsls	r3, r3, #24
 8008ec8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008ecc:	4931      	ldr	r1, [pc, #196]	@ (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008ed2:	4b30      	ldr	r3, [pc, #192]	@ (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	695b      	ldr	r3, [r3, #20]
 8008ede:	492d      	ldr	r1, [pc, #180]	@ (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee8:	f023 0220 	bic.w	r2, r3, #32
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	699b      	ldr	r3, [r3, #24]
 8008ef0:	4928      	ldr	r1, [pc, #160]	@ (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008ef6:	4b27      	ldr	r3, [pc, #156]	@ (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008efa:	4a26      	ldr	r2, [pc, #152]	@ (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008efc:	f023 0310 	bic.w	r3, r3, #16
 8008f00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008f02:	4b24      	ldr	r3, [pc, #144]	@ (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008f04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f06:	4b24      	ldr	r3, [pc, #144]	@ (8008f98 <RCCEx_PLL2_Config+0x160>)
 8008f08:	4013      	ands	r3, r2
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	69d2      	ldr	r2, [r2, #28]
 8008f0e:	00d2      	lsls	r2, r2, #3
 8008f10:	4920      	ldr	r1, [pc, #128]	@ (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008f12:	4313      	orrs	r3, r2
 8008f14:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008f16:	4b1f      	ldr	r3, [pc, #124]	@ (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008f1c:	f043 0310 	orr.w	r3, r3, #16
 8008f20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d106      	bne.n	8008f36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008f28:	4b1a      	ldr	r3, [pc, #104]	@ (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f2c:	4a19      	ldr	r2, [pc, #100]	@ (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008f2e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008f32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008f34:	e00f      	b.n	8008f56 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d106      	bne.n	8008f4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008f3c:	4b15      	ldr	r3, [pc, #84]	@ (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f40:	4a14      	ldr	r2, [pc, #80]	@ (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008f42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008f48:	e005      	b.n	8008f56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008f4a:	4b12      	ldr	r3, [pc, #72]	@ (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f4e:	4a11      	ldr	r2, [pc, #68]	@ (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008f50:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008f54:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008f56:	4b0f      	ldr	r3, [pc, #60]	@ (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a0e      	ldr	r2, [pc, #56]	@ (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008f5c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008f60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f62:	f7f9 f8b1 	bl	80020c8 <HAL_GetTick>
 8008f66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f68:	e008      	b.n	8008f7c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008f6a:	f7f9 f8ad 	bl	80020c8 <HAL_GetTick>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d901      	bls.n	8008f7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e006      	b.n	8008f8a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f7c:	4b05      	ldr	r3, [pc, #20]	@ (8008f94 <RCCEx_PLL2_Config+0x15c>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d0f0      	beq.n	8008f6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3710      	adds	r7, #16
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	58024400 	.word	0x58024400
 8008f98:	ffff0007 	.word	0xffff0007

08008f9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008faa:	4b53      	ldr	r3, [pc, #332]	@ (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8008fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fae:	f003 0303 	and.w	r3, r3, #3
 8008fb2:	2b03      	cmp	r3, #3
 8008fb4:	d101      	bne.n	8008fba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e099      	b.n	80090ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008fba:	4b4f      	ldr	r3, [pc, #316]	@ (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a4e      	ldr	r2, [pc, #312]	@ (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8008fc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008fc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fc6:	f7f9 f87f 	bl	80020c8 <HAL_GetTick>
 8008fca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008fcc:	e008      	b.n	8008fe0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008fce:	f7f9 f87b 	bl	80020c8 <HAL_GetTick>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	1ad3      	subs	r3, r2, r3
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d901      	bls.n	8008fe0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	e086      	b.n	80090ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008fe0:	4b45      	ldr	r3, [pc, #276]	@ (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d1f0      	bne.n	8008fce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008fec:	4b42      	ldr	r3, [pc, #264]	@ (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8008fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ff0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	051b      	lsls	r3, r3, #20
 8008ffa:	493f      	ldr	r1, [pc, #252]	@ (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	628b      	str	r3, [r1, #40]	@ 0x28
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	3b01      	subs	r3, #1
 8009006:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	3b01      	subs	r3, #1
 8009010:	025b      	lsls	r3, r3, #9
 8009012:	b29b      	uxth	r3, r3
 8009014:	431a      	orrs	r2, r3
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	3b01      	subs	r3, #1
 800901c:	041b      	lsls	r3, r3, #16
 800901e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009022:	431a      	orrs	r2, r3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	691b      	ldr	r3, [r3, #16]
 8009028:	3b01      	subs	r3, #1
 800902a:	061b      	lsls	r3, r3, #24
 800902c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009030:	4931      	ldr	r1, [pc, #196]	@ (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8009032:	4313      	orrs	r3, r2
 8009034:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009036:	4b30      	ldr	r3, [pc, #192]	@ (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8009038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800903a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	695b      	ldr	r3, [r3, #20]
 8009042:	492d      	ldr	r1, [pc, #180]	@ (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8009044:	4313      	orrs	r3, r2
 8009046:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009048:	4b2b      	ldr	r3, [pc, #172]	@ (80090f8 <RCCEx_PLL3_Config+0x15c>)
 800904a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800904c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	699b      	ldr	r3, [r3, #24]
 8009054:	4928      	ldr	r1, [pc, #160]	@ (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8009056:	4313      	orrs	r3, r2
 8009058:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800905a:	4b27      	ldr	r3, [pc, #156]	@ (80090f8 <RCCEx_PLL3_Config+0x15c>)
 800905c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800905e:	4a26      	ldr	r2, [pc, #152]	@ (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8009060:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009064:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009066:	4b24      	ldr	r3, [pc, #144]	@ (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8009068:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800906a:	4b24      	ldr	r3, [pc, #144]	@ (80090fc <RCCEx_PLL3_Config+0x160>)
 800906c:	4013      	ands	r3, r2
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	69d2      	ldr	r2, [r2, #28]
 8009072:	00d2      	lsls	r2, r2, #3
 8009074:	4920      	ldr	r1, [pc, #128]	@ (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8009076:	4313      	orrs	r3, r2
 8009078:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800907a:	4b1f      	ldr	r3, [pc, #124]	@ (80090f8 <RCCEx_PLL3_Config+0x15c>)
 800907c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800907e:	4a1e      	ldr	r2, [pc, #120]	@ (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8009080:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009084:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d106      	bne.n	800909a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800908c:	4b1a      	ldr	r3, [pc, #104]	@ (80090f8 <RCCEx_PLL3_Config+0x15c>)
 800908e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009090:	4a19      	ldr	r2, [pc, #100]	@ (80090f8 <RCCEx_PLL3_Config+0x15c>)
 8009092:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009096:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009098:	e00f      	b.n	80090ba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d106      	bne.n	80090ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80090a0:	4b15      	ldr	r3, [pc, #84]	@ (80090f8 <RCCEx_PLL3_Config+0x15c>)
 80090a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090a4:	4a14      	ldr	r2, [pc, #80]	@ (80090f8 <RCCEx_PLL3_Config+0x15c>)
 80090a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80090aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80090ac:	e005      	b.n	80090ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80090ae:	4b12      	ldr	r3, [pc, #72]	@ (80090f8 <RCCEx_PLL3_Config+0x15c>)
 80090b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b2:	4a11      	ldr	r2, [pc, #68]	@ (80090f8 <RCCEx_PLL3_Config+0x15c>)
 80090b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80090b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80090ba:	4b0f      	ldr	r3, [pc, #60]	@ (80090f8 <RCCEx_PLL3_Config+0x15c>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a0e      	ldr	r2, [pc, #56]	@ (80090f8 <RCCEx_PLL3_Config+0x15c>)
 80090c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090c6:	f7f8 ffff 	bl	80020c8 <HAL_GetTick>
 80090ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80090cc:	e008      	b.n	80090e0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80090ce:	f7f8 fffb 	bl	80020c8 <HAL_GetTick>
 80090d2:	4602      	mov	r2, r0
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	1ad3      	subs	r3, r2, r3
 80090d8:	2b02      	cmp	r3, #2
 80090da:	d901      	bls.n	80090e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80090dc:	2303      	movs	r3, #3
 80090de:	e006      	b.n	80090ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80090e0:	4b05      	ldr	r3, [pc, #20]	@ (80090f8 <RCCEx_PLL3_Config+0x15c>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d0f0      	beq.n	80090ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80090ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	58024400 	.word	0x58024400
 80090fc:	ffff0007 	.word	0xffff0007

08009100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d101      	bne.n	8009112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e049      	b.n	80091a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009118:	b2db      	uxtb	r3, r3
 800911a:	2b00      	cmp	r3, #0
 800911c:	d106      	bne.n	800912c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f7f8 fce4 	bl	8001af4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2202      	movs	r2, #2
 8009130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	3304      	adds	r3, #4
 800913c:	4619      	mov	r1, r3
 800913e:	4610      	mov	r0, r2
 8009140:	f000 fc58 	bl	80099f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
	...

080091b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d001      	beq.n	80091c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	e05e      	b.n	8009286 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2202      	movs	r2, #2
 80091cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68da      	ldr	r2, [r3, #12]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f042 0201 	orr.w	r2, r2, #1
 80091de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a2b      	ldr	r2, [pc, #172]	@ (8009294 <HAL_TIM_Base_Start_IT+0xe4>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d02c      	beq.n	8009244 <HAL_TIM_Base_Start_IT+0x94>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091f2:	d027      	beq.n	8009244 <HAL_TIM_Base_Start_IT+0x94>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a27      	ldr	r2, [pc, #156]	@ (8009298 <HAL_TIM_Base_Start_IT+0xe8>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d022      	beq.n	8009244 <HAL_TIM_Base_Start_IT+0x94>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a26      	ldr	r2, [pc, #152]	@ (800929c <HAL_TIM_Base_Start_IT+0xec>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d01d      	beq.n	8009244 <HAL_TIM_Base_Start_IT+0x94>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a24      	ldr	r2, [pc, #144]	@ (80092a0 <HAL_TIM_Base_Start_IT+0xf0>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d018      	beq.n	8009244 <HAL_TIM_Base_Start_IT+0x94>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a23      	ldr	r2, [pc, #140]	@ (80092a4 <HAL_TIM_Base_Start_IT+0xf4>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d013      	beq.n	8009244 <HAL_TIM_Base_Start_IT+0x94>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a21      	ldr	r2, [pc, #132]	@ (80092a8 <HAL_TIM_Base_Start_IT+0xf8>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d00e      	beq.n	8009244 <HAL_TIM_Base_Start_IT+0x94>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a20      	ldr	r2, [pc, #128]	@ (80092ac <HAL_TIM_Base_Start_IT+0xfc>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d009      	beq.n	8009244 <HAL_TIM_Base_Start_IT+0x94>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a1e      	ldr	r2, [pc, #120]	@ (80092b0 <HAL_TIM_Base_Start_IT+0x100>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d004      	beq.n	8009244 <HAL_TIM_Base_Start_IT+0x94>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a1d      	ldr	r2, [pc, #116]	@ (80092b4 <HAL_TIM_Base_Start_IT+0x104>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d115      	bne.n	8009270 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	689a      	ldr	r2, [r3, #8]
 800924a:	4b1b      	ldr	r3, [pc, #108]	@ (80092b8 <HAL_TIM_Base_Start_IT+0x108>)
 800924c:	4013      	ands	r3, r2
 800924e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2b06      	cmp	r3, #6
 8009254:	d015      	beq.n	8009282 <HAL_TIM_Base_Start_IT+0xd2>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800925c:	d011      	beq.n	8009282 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f042 0201 	orr.w	r2, r2, #1
 800926c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800926e:	e008      	b.n	8009282 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f042 0201 	orr.w	r2, r2, #1
 800927e:	601a      	str	r2, [r3, #0]
 8009280:	e000      	b.n	8009284 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009282:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3714      	adds	r7, #20
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	40010000 	.word	0x40010000
 8009298:	40000400 	.word	0x40000400
 800929c:	40000800 	.word	0x40000800
 80092a0:	40000c00 	.word	0x40000c00
 80092a4:	40010400 	.word	0x40010400
 80092a8:	40001800 	.word	0x40001800
 80092ac:	40014000 	.word	0x40014000
 80092b0:	4000e000 	.word	0x4000e000
 80092b4:	4000e400 	.word	0x4000e400
 80092b8:	00010007 	.word	0x00010007

080092bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d101      	bne.n	80092ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e049      	b.n	8009362 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d106      	bne.n	80092e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f841 	bl	800936a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2202      	movs	r2, #2
 80092ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	3304      	adds	r3, #4
 80092f8:	4619      	mov	r1, r3
 80092fa:	4610      	mov	r0, r2
 80092fc:	f000 fb7a 	bl	80099f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800936a:	b480      	push	{r7}
 800936c:	b083      	sub	sp, #12
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009372:	bf00      	nop
 8009374:	370c      	adds	r7, #12
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b084      	sub	sp, #16
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	f003 0302 	and.w	r3, r3, #2
 800939c:	2b00      	cmp	r3, #0
 800939e:	d020      	beq.n	80093e2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f003 0302 	and.w	r3, r3, #2
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d01b      	beq.n	80093e2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f06f 0202 	mvn.w	r2, #2
 80093b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	699b      	ldr	r3, [r3, #24]
 80093c0:	f003 0303 	and.w	r3, r3, #3
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d003      	beq.n	80093d0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 faf5 	bl	80099b8 <HAL_TIM_IC_CaptureCallback>
 80093ce:	e005      	b.n	80093dc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 fae7 	bl	80099a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 faf8 	bl	80099cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	f003 0304 	and.w	r3, r3, #4
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d020      	beq.n	800942e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f003 0304 	and.w	r3, r3, #4
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d01b      	beq.n	800942e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f06f 0204 	mvn.w	r2, #4
 80093fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2202      	movs	r2, #2
 8009404:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	699b      	ldr	r3, [r3, #24]
 800940c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009410:	2b00      	cmp	r3, #0
 8009412:	d003      	beq.n	800941c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 facf 	bl	80099b8 <HAL_TIM_IC_CaptureCallback>
 800941a:	e005      	b.n	8009428 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fac1 	bl	80099a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 fad2 	bl	80099cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	f003 0308 	and.w	r3, r3, #8
 8009434:	2b00      	cmp	r3, #0
 8009436:	d020      	beq.n	800947a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f003 0308 	and.w	r3, r3, #8
 800943e:	2b00      	cmp	r3, #0
 8009440:	d01b      	beq.n	800947a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f06f 0208 	mvn.w	r2, #8
 800944a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2204      	movs	r2, #4
 8009450:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	69db      	ldr	r3, [r3, #28]
 8009458:	f003 0303 	and.w	r3, r3, #3
 800945c:	2b00      	cmp	r3, #0
 800945e:	d003      	beq.n	8009468 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 faa9 	bl	80099b8 <HAL_TIM_IC_CaptureCallback>
 8009466:	e005      	b.n	8009474 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 fa9b 	bl	80099a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 faac 	bl	80099cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	f003 0310 	and.w	r3, r3, #16
 8009480:	2b00      	cmp	r3, #0
 8009482:	d020      	beq.n	80094c6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f003 0310 	and.w	r3, r3, #16
 800948a:	2b00      	cmp	r3, #0
 800948c:	d01b      	beq.n	80094c6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f06f 0210 	mvn.w	r2, #16
 8009496:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2208      	movs	r2, #8
 800949c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	69db      	ldr	r3, [r3, #28]
 80094a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d003      	beq.n	80094b4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 fa83 	bl	80099b8 <HAL_TIM_IC_CaptureCallback>
 80094b2:	e005      	b.n	80094c0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 fa75 	bl	80099a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fa86 	bl	80099cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	f003 0301 	and.w	r3, r3, #1
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00c      	beq.n	80094ea <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f003 0301 	and.w	r3, r3, #1
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d007      	beq.n	80094ea <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f06f 0201 	mvn.w	r2, #1
 80094e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f7f8 f87d 	bl	80015e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d104      	bne.n	80094fe <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00c      	beq.n	8009518 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009504:	2b00      	cmp	r3, #0
 8009506:	d007      	beq.n	8009518 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 ffc6 	bl	800a4a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00c      	beq.n	800953c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009528:	2b00      	cmp	r3, #0
 800952a:	d007      	beq.n	800953c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 ffbe 	bl	800a4b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00c      	beq.n	8009560 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800954c:	2b00      	cmp	r3, #0
 800954e:	d007      	beq.n	8009560 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 fa40 	bl	80099e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	f003 0320 	and.w	r3, r3, #32
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00c      	beq.n	8009584 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f003 0320 	and.w	r3, r3, #32
 8009570:	2b00      	cmp	r3, #0
 8009572:	d007      	beq.n	8009584 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f06f 0220 	mvn.w	r2, #32
 800957c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 ff86 	bl	800a490 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009584:	bf00      	nop
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b086      	sub	sp, #24
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009598:	2300      	movs	r3, #0
 800959a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d101      	bne.n	80095aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80095a6:	2302      	movs	r3, #2
 80095a8:	e0ff      	b.n	80097aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2201      	movs	r2, #1
 80095ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2b14      	cmp	r3, #20
 80095b6:	f200 80f0 	bhi.w	800979a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80095ba:	a201      	add	r2, pc, #4	@ (adr r2, 80095c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80095bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c0:	08009615 	.word	0x08009615
 80095c4:	0800979b 	.word	0x0800979b
 80095c8:	0800979b 	.word	0x0800979b
 80095cc:	0800979b 	.word	0x0800979b
 80095d0:	08009655 	.word	0x08009655
 80095d4:	0800979b 	.word	0x0800979b
 80095d8:	0800979b 	.word	0x0800979b
 80095dc:	0800979b 	.word	0x0800979b
 80095e0:	08009697 	.word	0x08009697
 80095e4:	0800979b 	.word	0x0800979b
 80095e8:	0800979b 	.word	0x0800979b
 80095ec:	0800979b 	.word	0x0800979b
 80095f0:	080096d7 	.word	0x080096d7
 80095f4:	0800979b 	.word	0x0800979b
 80095f8:	0800979b 	.word	0x0800979b
 80095fc:	0800979b 	.word	0x0800979b
 8009600:	08009719 	.word	0x08009719
 8009604:	0800979b 	.word	0x0800979b
 8009608:	0800979b 	.word	0x0800979b
 800960c:	0800979b 	.word	0x0800979b
 8009610:	08009759 	.word	0x08009759
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	68b9      	ldr	r1, [r7, #8]
 800961a:	4618      	mov	r0, r3
 800961c:	f000 fa9c 	bl	8009b58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	699a      	ldr	r2, [r3, #24]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f042 0208 	orr.w	r2, r2, #8
 800962e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	699a      	ldr	r2, [r3, #24]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f022 0204 	bic.w	r2, r2, #4
 800963e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	6999      	ldr	r1, [r3, #24]
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	691a      	ldr	r2, [r3, #16]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	430a      	orrs	r2, r1
 8009650:	619a      	str	r2, [r3, #24]
      break;
 8009652:	e0a5      	b.n	80097a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68b9      	ldr	r1, [r7, #8]
 800965a:	4618      	mov	r0, r3
 800965c:	f000 fb0c 	bl	8009c78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	699a      	ldr	r2, [r3, #24]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800966e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	699a      	ldr	r2, [r3, #24]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800967e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6999      	ldr	r1, [r3, #24]
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	021a      	lsls	r2, r3, #8
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	430a      	orrs	r2, r1
 8009692:	619a      	str	r2, [r3, #24]
      break;
 8009694:	e084      	b.n	80097a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	68b9      	ldr	r1, [r7, #8]
 800969c:	4618      	mov	r0, r3
 800969e:	f000 fb75 	bl	8009d8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	69da      	ldr	r2, [r3, #28]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f042 0208 	orr.w	r2, r2, #8
 80096b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	69da      	ldr	r2, [r3, #28]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f022 0204 	bic.w	r2, r2, #4
 80096c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	69d9      	ldr	r1, [r3, #28]
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	691a      	ldr	r2, [r3, #16]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	430a      	orrs	r2, r1
 80096d2:	61da      	str	r2, [r3, #28]
      break;
 80096d4:	e064      	b.n	80097a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	68b9      	ldr	r1, [r7, #8]
 80096dc:	4618      	mov	r0, r3
 80096de:	f000 fbdd 	bl	8009e9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	69da      	ldr	r2, [r3, #28]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80096f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	69da      	ldr	r2, [r3, #28]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	69d9      	ldr	r1, [r3, #28]
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	691b      	ldr	r3, [r3, #16]
 800970c:	021a      	lsls	r2, r3, #8
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	430a      	orrs	r2, r1
 8009714:	61da      	str	r2, [r3, #28]
      break;
 8009716:	e043      	b.n	80097a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68b9      	ldr	r1, [r7, #8]
 800971e:	4618      	mov	r0, r3
 8009720:	f000 fc26 	bl	8009f70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f042 0208 	orr.w	r2, r2, #8
 8009732:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f022 0204 	bic.w	r2, r2, #4
 8009742:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	691a      	ldr	r2, [r3, #16]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	430a      	orrs	r2, r1
 8009754:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009756:	e023      	b.n	80097a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68b9      	ldr	r1, [r7, #8]
 800975e:	4618      	mov	r0, r3
 8009760:	f000 fc6a 	bl	800a038 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009772:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009782:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	021a      	lsls	r2, r3, #8
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	430a      	orrs	r2, r1
 8009796:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009798:	e002      	b.n	80097a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	75fb      	strb	r3, [r7, #23]
      break;
 800979e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80097a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3718      	adds	r7, #24
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop

080097b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80097be:	2300      	movs	r3, #0
 80097c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d101      	bne.n	80097d0 <HAL_TIM_ConfigClockSource+0x1c>
 80097cc:	2302      	movs	r3, #2
 80097ce:	e0dc      	b.n	800998a <HAL_TIM_ConfigClockSource+0x1d6>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2202      	movs	r2, #2
 80097dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80097e8:	68ba      	ldr	r2, [r7, #8]
 80097ea:	4b6a      	ldr	r3, [pc, #424]	@ (8009994 <HAL_TIM_ConfigClockSource+0x1e0>)
 80097ec:	4013      	ands	r3, r2
 80097ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80097f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68ba      	ldr	r2, [r7, #8]
 80097fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a64      	ldr	r2, [pc, #400]	@ (8009998 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009806:	4293      	cmp	r3, r2
 8009808:	f000 80a9 	beq.w	800995e <HAL_TIM_ConfigClockSource+0x1aa>
 800980c:	4a62      	ldr	r2, [pc, #392]	@ (8009998 <HAL_TIM_ConfigClockSource+0x1e4>)
 800980e:	4293      	cmp	r3, r2
 8009810:	f200 80ae 	bhi.w	8009970 <HAL_TIM_ConfigClockSource+0x1bc>
 8009814:	4a61      	ldr	r2, [pc, #388]	@ (800999c <HAL_TIM_ConfigClockSource+0x1e8>)
 8009816:	4293      	cmp	r3, r2
 8009818:	f000 80a1 	beq.w	800995e <HAL_TIM_ConfigClockSource+0x1aa>
 800981c:	4a5f      	ldr	r2, [pc, #380]	@ (800999c <HAL_TIM_ConfigClockSource+0x1e8>)
 800981e:	4293      	cmp	r3, r2
 8009820:	f200 80a6 	bhi.w	8009970 <HAL_TIM_ConfigClockSource+0x1bc>
 8009824:	4a5e      	ldr	r2, [pc, #376]	@ (80099a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009826:	4293      	cmp	r3, r2
 8009828:	f000 8099 	beq.w	800995e <HAL_TIM_ConfigClockSource+0x1aa>
 800982c:	4a5c      	ldr	r2, [pc, #368]	@ (80099a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800982e:	4293      	cmp	r3, r2
 8009830:	f200 809e 	bhi.w	8009970 <HAL_TIM_ConfigClockSource+0x1bc>
 8009834:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009838:	f000 8091 	beq.w	800995e <HAL_TIM_ConfigClockSource+0x1aa>
 800983c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009840:	f200 8096 	bhi.w	8009970 <HAL_TIM_ConfigClockSource+0x1bc>
 8009844:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009848:	f000 8089 	beq.w	800995e <HAL_TIM_ConfigClockSource+0x1aa>
 800984c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009850:	f200 808e 	bhi.w	8009970 <HAL_TIM_ConfigClockSource+0x1bc>
 8009854:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009858:	d03e      	beq.n	80098d8 <HAL_TIM_ConfigClockSource+0x124>
 800985a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800985e:	f200 8087 	bhi.w	8009970 <HAL_TIM_ConfigClockSource+0x1bc>
 8009862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009866:	f000 8086 	beq.w	8009976 <HAL_TIM_ConfigClockSource+0x1c2>
 800986a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800986e:	d87f      	bhi.n	8009970 <HAL_TIM_ConfigClockSource+0x1bc>
 8009870:	2b70      	cmp	r3, #112	@ 0x70
 8009872:	d01a      	beq.n	80098aa <HAL_TIM_ConfigClockSource+0xf6>
 8009874:	2b70      	cmp	r3, #112	@ 0x70
 8009876:	d87b      	bhi.n	8009970 <HAL_TIM_ConfigClockSource+0x1bc>
 8009878:	2b60      	cmp	r3, #96	@ 0x60
 800987a:	d050      	beq.n	800991e <HAL_TIM_ConfigClockSource+0x16a>
 800987c:	2b60      	cmp	r3, #96	@ 0x60
 800987e:	d877      	bhi.n	8009970 <HAL_TIM_ConfigClockSource+0x1bc>
 8009880:	2b50      	cmp	r3, #80	@ 0x50
 8009882:	d03c      	beq.n	80098fe <HAL_TIM_ConfigClockSource+0x14a>
 8009884:	2b50      	cmp	r3, #80	@ 0x50
 8009886:	d873      	bhi.n	8009970 <HAL_TIM_ConfigClockSource+0x1bc>
 8009888:	2b40      	cmp	r3, #64	@ 0x40
 800988a:	d058      	beq.n	800993e <HAL_TIM_ConfigClockSource+0x18a>
 800988c:	2b40      	cmp	r3, #64	@ 0x40
 800988e:	d86f      	bhi.n	8009970 <HAL_TIM_ConfigClockSource+0x1bc>
 8009890:	2b30      	cmp	r3, #48	@ 0x30
 8009892:	d064      	beq.n	800995e <HAL_TIM_ConfigClockSource+0x1aa>
 8009894:	2b30      	cmp	r3, #48	@ 0x30
 8009896:	d86b      	bhi.n	8009970 <HAL_TIM_ConfigClockSource+0x1bc>
 8009898:	2b20      	cmp	r3, #32
 800989a:	d060      	beq.n	800995e <HAL_TIM_ConfigClockSource+0x1aa>
 800989c:	2b20      	cmp	r3, #32
 800989e:	d867      	bhi.n	8009970 <HAL_TIM_ConfigClockSource+0x1bc>
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d05c      	beq.n	800995e <HAL_TIM_ConfigClockSource+0x1aa>
 80098a4:	2b10      	cmp	r3, #16
 80098a6:	d05a      	beq.n	800995e <HAL_TIM_ConfigClockSource+0x1aa>
 80098a8:	e062      	b.n	8009970 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80098ba:	f000 fca1 	bl	800a200 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80098cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68ba      	ldr	r2, [r7, #8]
 80098d4:	609a      	str	r2, [r3, #8]
      break;
 80098d6:	e04f      	b.n	8009978 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80098e8:	f000 fc8a 	bl	800a200 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	689a      	ldr	r2, [r3, #8]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80098fa:	609a      	str	r2, [r3, #8]
      break;
 80098fc:	e03c      	b.n	8009978 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800990a:	461a      	mov	r2, r3
 800990c:	f000 fbfa 	bl	800a104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2150      	movs	r1, #80	@ 0x50
 8009916:	4618      	mov	r0, r3
 8009918:	f000 fc54 	bl	800a1c4 <TIM_ITRx_SetConfig>
      break;
 800991c:	e02c      	b.n	8009978 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800992a:	461a      	mov	r2, r3
 800992c:	f000 fc19 	bl	800a162 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2160      	movs	r1, #96	@ 0x60
 8009936:	4618      	mov	r0, r3
 8009938:	f000 fc44 	bl	800a1c4 <TIM_ITRx_SetConfig>
      break;
 800993c:	e01c      	b.n	8009978 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800994a:	461a      	mov	r2, r3
 800994c:	f000 fbda 	bl	800a104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2140      	movs	r1, #64	@ 0x40
 8009956:	4618      	mov	r0, r3
 8009958:	f000 fc34 	bl	800a1c4 <TIM_ITRx_SetConfig>
      break;
 800995c:	e00c      	b.n	8009978 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4619      	mov	r1, r3
 8009968:	4610      	mov	r0, r2
 800996a:	f000 fc2b 	bl	800a1c4 <TIM_ITRx_SetConfig>
      break;
 800996e:	e003      	b.n	8009978 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009970:	2301      	movs	r3, #1
 8009972:	73fb      	strb	r3, [r7, #15]
      break;
 8009974:	e000      	b.n	8009978 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009976:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009988:	7bfb      	ldrb	r3, [r7, #15]
}
 800998a:	4618      	mov	r0, r3
 800998c:	3710      	adds	r7, #16
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	ffceff88 	.word	0xffceff88
 8009998:	00100040 	.word	0x00100040
 800999c:	00100030 	.word	0x00100030
 80099a0:	00100020 	.word	0x00100020

080099a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80099ac:	bf00      	nop
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80099c0:	bf00      	nop
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80099d4:	bf00      	nop
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80099e8:	bf00      	nop
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4a4a      	ldr	r2, [pc, #296]	@ (8009b30 <TIM_Base_SetConfig+0x13c>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d013      	beq.n	8009a34 <TIM_Base_SetConfig+0x40>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a12:	d00f      	beq.n	8009a34 <TIM_Base_SetConfig+0x40>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4a47      	ldr	r2, [pc, #284]	@ (8009b34 <TIM_Base_SetConfig+0x140>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d00b      	beq.n	8009a34 <TIM_Base_SetConfig+0x40>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	4a46      	ldr	r2, [pc, #280]	@ (8009b38 <TIM_Base_SetConfig+0x144>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d007      	beq.n	8009a34 <TIM_Base_SetConfig+0x40>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	4a45      	ldr	r2, [pc, #276]	@ (8009b3c <TIM_Base_SetConfig+0x148>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d003      	beq.n	8009a34 <TIM_Base_SetConfig+0x40>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a44      	ldr	r2, [pc, #272]	@ (8009b40 <TIM_Base_SetConfig+0x14c>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d108      	bne.n	8009a46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	4a39      	ldr	r2, [pc, #228]	@ (8009b30 <TIM_Base_SetConfig+0x13c>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d027      	beq.n	8009a9e <TIM_Base_SetConfig+0xaa>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a54:	d023      	beq.n	8009a9e <TIM_Base_SetConfig+0xaa>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4a36      	ldr	r2, [pc, #216]	@ (8009b34 <TIM_Base_SetConfig+0x140>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d01f      	beq.n	8009a9e <TIM_Base_SetConfig+0xaa>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	4a35      	ldr	r2, [pc, #212]	@ (8009b38 <TIM_Base_SetConfig+0x144>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d01b      	beq.n	8009a9e <TIM_Base_SetConfig+0xaa>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	4a34      	ldr	r2, [pc, #208]	@ (8009b3c <TIM_Base_SetConfig+0x148>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d017      	beq.n	8009a9e <TIM_Base_SetConfig+0xaa>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	4a33      	ldr	r2, [pc, #204]	@ (8009b40 <TIM_Base_SetConfig+0x14c>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d013      	beq.n	8009a9e <TIM_Base_SetConfig+0xaa>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	4a32      	ldr	r2, [pc, #200]	@ (8009b44 <TIM_Base_SetConfig+0x150>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d00f      	beq.n	8009a9e <TIM_Base_SetConfig+0xaa>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	4a31      	ldr	r2, [pc, #196]	@ (8009b48 <TIM_Base_SetConfig+0x154>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d00b      	beq.n	8009a9e <TIM_Base_SetConfig+0xaa>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	4a30      	ldr	r2, [pc, #192]	@ (8009b4c <TIM_Base_SetConfig+0x158>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d007      	beq.n	8009a9e <TIM_Base_SetConfig+0xaa>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	4a2f      	ldr	r2, [pc, #188]	@ (8009b50 <TIM_Base_SetConfig+0x15c>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d003      	beq.n	8009a9e <TIM_Base_SetConfig+0xaa>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4a2e      	ldr	r2, [pc, #184]	@ (8009b54 <TIM_Base_SetConfig+0x160>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d108      	bne.n	8009ab0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	4313      	orrs	r3, r2
 8009aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	695b      	ldr	r3, [r3, #20]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	689a      	ldr	r2, [r3, #8]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a16      	ldr	r2, [pc, #88]	@ (8009b30 <TIM_Base_SetConfig+0x13c>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d00f      	beq.n	8009afc <TIM_Base_SetConfig+0x108>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a18      	ldr	r2, [pc, #96]	@ (8009b40 <TIM_Base_SetConfig+0x14c>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d00b      	beq.n	8009afc <TIM_Base_SetConfig+0x108>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a17      	ldr	r2, [pc, #92]	@ (8009b44 <TIM_Base_SetConfig+0x150>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d007      	beq.n	8009afc <TIM_Base_SetConfig+0x108>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a16      	ldr	r2, [pc, #88]	@ (8009b48 <TIM_Base_SetConfig+0x154>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d003      	beq.n	8009afc <TIM_Base_SetConfig+0x108>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a15      	ldr	r2, [pc, #84]	@ (8009b4c <TIM_Base_SetConfig+0x158>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d103      	bne.n	8009b04 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	691a      	ldr	r2, [r3, #16]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	f003 0301 	and.w	r3, r3, #1
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d105      	bne.n	8009b22 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	691b      	ldr	r3, [r3, #16]
 8009b1a:	f023 0201 	bic.w	r2, r3, #1
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	611a      	str	r2, [r3, #16]
  }
}
 8009b22:	bf00      	nop
 8009b24:	3714      	adds	r7, #20
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr
 8009b2e:	bf00      	nop
 8009b30:	40010000 	.word	0x40010000
 8009b34:	40000400 	.word	0x40000400
 8009b38:	40000800 	.word	0x40000800
 8009b3c:	40000c00 	.word	0x40000c00
 8009b40:	40010400 	.word	0x40010400
 8009b44:	40014000 	.word	0x40014000
 8009b48:	40014400 	.word	0x40014400
 8009b4c:	40014800 	.word	0x40014800
 8009b50:	4000e000 	.word	0x4000e000
 8009b54:	4000e400 	.word	0x4000e400

08009b58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b087      	sub	sp, #28
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a1b      	ldr	r3, [r3, #32]
 8009b66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6a1b      	ldr	r3, [r3, #32]
 8009b6c:	f023 0201 	bic.w	r2, r3, #1
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	699b      	ldr	r3, [r3, #24]
 8009b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	4b37      	ldr	r3, [pc, #220]	@ (8009c60 <TIM_OC1_SetConfig+0x108>)
 8009b84:	4013      	ands	r3, r2
 8009b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f023 0303 	bic.w	r3, r3, #3
 8009b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	4313      	orrs	r3, r2
 8009b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	f023 0302 	bic.w	r3, r3, #2
 8009ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	697a      	ldr	r2, [r7, #20]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	4a2d      	ldr	r2, [pc, #180]	@ (8009c64 <TIM_OC1_SetConfig+0x10c>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d00f      	beq.n	8009bd4 <TIM_OC1_SetConfig+0x7c>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	4a2c      	ldr	r2, [pc, #176]	@ (8009c68 <TIM_OC1_SetConfig+0x110>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d00b      	beq.n	8009bd4 <TIM_OC1_SetConfig+0x7c>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	4a2b      	ldr	r2, [pc, #172]	@ (8009c6c <TIM_OC1_SetConfig+0x114>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d007      	beq.n	8009bd4 <TIM_OC1_SetConfig+0x7c>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	4a2a      	ldr	r2, [pc, #168]	@ (8009c70 <TIM_OC1_SetConfig+0x118>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d003      	beq.n	8009bd4 <TIM_OC1_SetConfig+0x7c>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	4a29      	ldr	r2, [pc, #164]	@ (8009c74 <TIM_OC1_SetConfig+0x11c>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d10c      	bne.n	8009bee <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	f023 0308 	bic.w	r3, r3, #8
 8009bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	697a      	ldr	r2, [r7, #20]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	f023 0304 	bic.w	r3, r3, #4
 8009bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8009c64 <TIM_OC1_SetConfig+0x10c>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d00f      	beq.n	8009c16 <TIM_OC1_SetConfig+0xbe>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8009c68 <TIM_OC1_SetConfig+0x110>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d00b      	beq.n	8009c16 <TIM_OC1_SetConfig+0xbe>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	4a1a      	ldr	r2, [pc, #104]	@ (8009c6c <TIM_OC1_SetConfig+0x114>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d007      	beq.n	8009c16 <TIM_OC1_SetConfig+0xbe>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4a19      	ldr	r2, [pc, #100]	@ (8009c70 <TIM_OC1_SetConfig+0x118>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d003      	beq.n	8009c16 <TIM_OC1_SetConfig+0xbe>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4a18      	ldr	r2, [pc, #96]	@ (8009c74 <TIM_OC1_SetConfig+0x11c>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d111      	bne.n	8009c3a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009c24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	695b      	ldr	r3, [r3, #20]
 8009c2a:	693a      	ldr	r2, [r7, #16]
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	699b      	ldr	r3, [r3, #24]
 8009c34:	693a      	ldr	r2, [r7, #16]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	693a      	ldr	r2, [r7, #16]
 8009c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	685a      	ldr	r2, [r3, #4]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	697a      	ldr	r2, [r7, #20]
 8009c52:	621a      	str	r2, [r3, #32]
}
 8009c54:	bf00      	nop
 8009c56:	371c      	adds	r7, #28
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr
 8009c60:	fffeff8f 	.word	0xfffeff8f
 8009c64:	40010000 	.word	0x40010000
 8009c68:	40010400 	.word	0x40010400
 8009c6c:	40014000 	.word	0x40014000
 8009c70:	40014400 	.word	0x40014400
 8009c74:	40014800 	.word	0x40014800

08009c78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b087      	sub	sp, #28
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a1b      	ldr	r3, [r3, #32]
 8009c86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6a1b      	ldr	r3, [r3, #32]
 8009c8c:	f023 0210 	bic.w	r2, r3, #16
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	699b      	ldr	r3, [r3, #24]
 8009c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	4b34      	ldr	r3, [pc, #208]	@ (8009d74 <TIM_OC2_SetConfig+0xfc>)
 8009ca4:	4013      	ands	r3, r2
 8009ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009cae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	021b      	lsls	r3, r3, #8
 8009cb6:	68fa      	ldr	r2, [r7, #12]
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	f023 0320 	bic.w	r3, r3, #32
 8009cc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	011b      	lsls	r3, r3, #4
 8009cca:	697a      	ldr	r2, [r7, #20]
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	4a29      	ldr	r2, [pc, #164]	@ (8009d78 <TIM_OC2_SetConfig+0x100>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d003      	beq.n	8009ce0 <TIM_OC2_SetConfig+0x68>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4a28      	ldr	r2, [pc, #160]	@ (8009d7c <TIM_OC2_SetConfig+0x104>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d10d      	bne.n	8009cfc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	011b      	lsls	r3, r3, #4
 8009cee:	697a      	ldr	r2, [r7, #20]
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009cfa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8009d78 <TIM_OC2_SetConfig+0x100>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d00f      	beq.n	8009d24 <TIM_OC2_SetConfig+0xac>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	4a1d      	ldr	r2, [pc, #116]	@ (8009d7c <TIM_OC2_SetConfig+0x104>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d00b      	beq.n	8009d24 <TIM_OC2_SetConfig+0xac>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	4a1c      	ldr	r2, [pc, #112]	@ (8009d80 <TIM_OC2_SetConfig+0x108>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d007      	beq.n	8009d24 <TIM_OC2_SetConfig+0xac>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a1b      	ldr	r2, [pc, #108]	@ (8009d84 <TIM_OC2_SetConfig+0x10c>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d003      	beq.n	8009d24 <TIM_OC2_SetConfig+0xac>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a1a      	ldr	r2, [pc, #104]	@ (8009d88 <TIM_OC2_SetConfig+0x110>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d113      	bne.n	8009d4c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009d2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009d32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	695b      	ldr	r3, [r3, #20]
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	693a      	ldr	r2, [r7, #16]
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	699b      	ldr	r3, [r3, #24]
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	693a      	ldr	r2, [r7, #16]
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	693a      	ldr	r2, [r7, #16]
 8009d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	685a      	ldr	r2, [r3, #4]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	697a      	ldr	r2, [r7, #20]
 8009d64:	621a      	str	r2, [r3, #32]
}
 8009d66:	bf00      	nop
 8009d68:	371c      	adds	r7, #28
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	feff8fff 	.word	0xfeff8fff
 8009d78:	40010000 	.word	0x40010000
 8009d7c:	40010400 	.word	0x40010400
 8009d80:	40014000 	.word	0x40014000
 8009d84:	40014400 	.word	0x40014400
 8009d88:	40014800 	.word	0x40014800

08009d8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b087      	sub	sp, #28
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a1b      	ldr	r3, [r3, #32]
 8009d9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6a1b      	ldr	r3, [r3, #32]
 8009da0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	69db      	ldr	r3, [r3, #28]
 8009db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009db4:	68fa      	ldr	r2, [r7, #12]
 8009db6:	4b33      	ldr	r3, [pc, #204]	@ (8009e84 <TIM_OC3_SetConfig+0xf8>)
 8009db8:	4013      	ands	r3, r2
 8009dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f023 0303 	bic.w	r3, r3, #3
 8009dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	689b      	ldr	r3, [r3, #8]
 8009dda:	021b      	lsls	r3, r3, #8
 8009ddc:	697a      	ldr	r2, [r7, #20]
 8009dde:	4313      	orrs	r3, r2
 8009de0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	4a28      	ldr	r2, [pc, #160]	@ (8009e88 <TIM_OC3_SetConfig+0xfc>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d003      	beq.n	8009df2 <TIM_OC3_SetConfig+0x66>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4a27      	ldr	r2, [pc, #156]	@ (8009e8c <TIM_OC3_SetConfig+0x100>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d10d      	bne.n	8009e0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009df8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	021b      	lsls	r3, r3, #8
 8009e00:	697a      	ldr	r2, [r7, #20]
 8009e02:	4313      	orrs	r3, r2
 8009e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	4a1d      	ldr	r2, [pc, #116]	@ (8009e88 <TIM_OC3_SetConfig+0xfc>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d00f      	beq.n	8009e36 <TIM_OC3_SetConfig+0xaa>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	4a1c      	ldr	r2, [pc, #112]	@ (8009e8c <TIM_OC3_SetConfig+0x100>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d00b      	beq.n	8009e36 <TIM_OC3_SetConfig+0xaa>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	4a1b      	ldr	r2, [pc, #108]	@ (8009e90 <TIM_OC3_SetConfig+0x104>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d007      	beq.n	8009e36 <TIM_OC3_SetConfig+0xaa>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	4a1a      	ldr	r2, [pc, #104]	@ (8009e94 <TIM_OC3_SetConfig+0x108>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d003      	beq.n	8009e36 <TIM_OC3_SetConfig+0xaa>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	4a19      	ldr	r2, [pc, #100]	@ (8009e98 <TIM_OC3_SetConfig+0x10c>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d113      	bne.n	8009e5e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	695b      	ldr	r3, [r3, #20]
 8009e4a:	011b      	lsls	r3, r3, #4
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	699b      	ldr	r3, [r3, #24]
 8009e56:	011b      	lsls	r3, r3, #4
 8009e58:	693a      	ldr	r2, [r7, #16]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	693a      	ldr	r2, [r7, #16]
 8009e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	685a      	ldr	r2, [r3, #4]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	697a      	ldr	r2, [r7, #20]
 8009e76:	621a      	str	r2, [r3, #32]
}
 8009e78:	bf00      	nop
 8009e7a:	371c      	adds	r7, #28
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr
 8009e84:	fffeff8f 	.word	0xfffeff8f
 8009e88:	40010000 	.word	0x40010000
 8009e8c:	40010400 	.word	0x40010400
 8009e90:	40014000 	.word	0x40014000
 8009e94:	40014400 	.word	0x40014400
 8009e98:	40014800 	.word	0x40014800

08009e9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b087      	sub	sp, #28
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a1b      	ldr	r3, [r3, #32]
 8009eaa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6a1b      	ldr	r3, [r3, #32]
 8009eb0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	69db      	ldr	r3, [r3, #28]
 8009ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ec4:	68fa      	ldr	r2, [r7, #12]
 8009ec6:	4b24      	ldr	r3, [pc, #144]	@ (8009f58 <TIM_OC4_SetConfig+0xbc>)
 8009ec8:	4013      	ands	r3, r2
 8009eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ed2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	021b      	lsls	r3, r3, #8
 8009eda:	68fa      	ldr	r2, [r7, #12]
 8009edc:	4313      	orrs	r3, r2
 8009ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009ee6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	031b      	lsls	r3, r3, #12
 8009eee:	693a      	ldr	r2, [r7, #16]
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4a19      	ldr	r2, [pc, #100]	@ (8009f5c <TIM_OC4_SetConfig+0xc0>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d00f      	beq.n	8009f1c <TIM_OC4_SetConfig+0x80>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	4a18      	ldr	r2, [pc, #96]	@ (8009f60 <TIM_OC4_SetConfig+0xc4>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d00b      	beq.n	8009f1c <TIM_OC4_SetConfig+0x80>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4a17      	ldr	r2, [pc, #92]	@ (8009f64 <TIM_OC4_SetConfig+0xc8>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d007      	beq.n	8009f1c <TIM_OC4_SetConfig+0x80>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4a16      	ldr	r2, [pc, #88]	@ (8009f68 <TIM_OC4_SetConfig+0xcc>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d003      	beq.n	8009f1c <TIM_OC4_SetConfig+0x80>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a15      	ldr	r2, [pc, #84]	@ (8009f6c <TIM_OC4_SetConfig+0xd0>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d109      	bne.n	8009f30 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009f22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	695b      	ldr	r3, [r3, #20]
 8009f28:	019b      	lsls	r3, r3, #6
 8009f2a:	697a      	ldr	r2, [r7, #20]
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	697a      	ldr	r2, [r7, #20]
 8009f34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	68fa      	ldr	r2, [r7, #12]
 8009f3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	685a      	ldr	r2, [r3, #4]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	693a      	ldr	r2, [r7, #16]
 8009f48:	621a      	str	r2, [r3, #32]
}
 8009f4a:	bf00      	nop
 8009f4c:	371c      	adds	r7, #28
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr
 8009f56:	bf00      	nop
 8009f58:	feff8fff 	.word	0xfeff8fff
 8009f5c:	40010000 	.word	0x40010000
 8009f60:	40010400 	.word	0x40010400
 8009f64:	40014000 	.word	0x40014000
 8009f68:	40014400 	.word	0x40014400
 8009f6c:	40014800 	.word	0x40014800

08009f70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b087      	sub	sp, #28
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6a1b      	ldr	r3, [r3, #32]
 8009f7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6a1b      	ldr	r3, [r3, #32]
 8009f84:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	4b21      	ldr	r3, [pc, #132]	@ (800a020 <TIM_OC5_SetConfig+0xb0>)
 8009f9c:	4013      	ands	r3, r2
 8009f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009fb0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	041b      	lsls	r3, r3, #16
 8009fb8:	693a      	ldr	r2, [r7, #16]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	4a18      	ldr	r2, [pc, #96]	@ (800a024 <TIM_OC5_SetConfig+0xb4>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d00f      	beq.n	8009fe6 <TIM_OC5_SetConfig+0x76>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4a17      	ldr	r2, [pc, #92]	@ (800a028 <TIM_OC5_SetConfig+0xb8>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d00b      	beq.n	8009fe6 <TIM_OC5_SetConfig+0x76>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	4a16      	ldr	r2, [pc, #88]	@ (800a02c <TIM_OC5_SetConfig+0xbc>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d007      	beq.n	8009fe6 <TIM_OC5_SetConfig+0x76>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	4a15      	ldr	r2, [pc, #84]	@ (800a030 <TIM_OC5_SetConfig+0xc0>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d003      	beq.n	8009fe6 <TIM_OC5_SetConfig+0x76>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	4a14      	ldr	r2, [pc, #80]	@ (800a034 <TIM_OC5_SetConfig+0xc4>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d109      	bne.n	8009ffa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009fec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	695b      	ldr	r3, [r3, #20]
 8009ff2:	021b      	lsls	r3, r3, #8
 8009ff4:	697a      	ldr	r2, [r7, #20]
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	697a      	ldr	r2, [r7, #20]
 8009ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	68fa      	ldr	r2, [r7, #12]
 800a004:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	685a      	ldr	r2, [r3, #4]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	693a      	ldr	r2, [r7, #16]
 800a012:	621a      	str	r2, [r3, #32]
}
 800a014:	bf00      	nop
 800a016:	371c      	adds	r7, #28
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr
 800a020:	fffeff8f 	.word	0xfffeff8f
 800a024:	40010000 	.word	0x40010000
 800a028:	40010400 	.word	0x40010400
 800a02c:	40014000 	.word	0x40014000
 800a030:	40014400 	.word	0x40014400
 800a034:	40014800 	.word	0x40014800

0800a038 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a038:	b480      	push	{r7}
 800a03a:	b087      	sub	sp, #28
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6a1b      	ldr	r3, [r3, #32]
 800a046:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6a1b      	ldr	r3, [r3, #32]
 800a04c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a05e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a060:	68fa      	ldr	r2, [r7, #12]
 800a062:	4b22      	ldr	r3, [pc, #136]	@ (800a0ec <TIM_OC6_SetConfig+0xb4>)
 800a064:	4013      	ands	r3, r2
 800a066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	021b      	lsls	r3, r3, #8
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	4313      	orrs	r3, r2
 800a072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a07a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	051b      	lsls	r3, r3, #20
 800a082:	693a      	ldr	r2, [r7, #16]
 800a084:	4313      	orrs	r3, r2
 800a086:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a19      	ldr	r2, [pc, #100]	@ (800a0f0 <TIM_OC6_SetConfig+0xb8>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d00f      	beq.n	800a0b0 <TIM_OC6_SetConfig+0x78>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a18      	ldr	r2, [pc, #96]	@ (800a0f4 <TIM_OC6_SetConfig+0xbc>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d00b      	beq.n	800a0b0 <TIM_OC6_SetConfig+0x78>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4a17      	ldr	r2, [pc, #92]	@ (800a0f8 <TIM_OC6_SetConfig+0xc0>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d007      	beq.n	800a0b0 <TIM_OC6_SetConfig+0x78>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4a16      	ldr	r2, [pc, #88]	@ (800a0fc <TIM_OC6_SetConfig+0xc4>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d003      	beq.n	800a0b0 <TIM_OC6_SetConfig+0x78>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4a15      	ldr	r2, [pc, #84]	@ (800a100 <TIM_OC6_SetConfig+0xc8>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d109      	bne.n	800a0c4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a0b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	695b      	ldr	r3, [r3, #20]
 800a0bc:	029b      	lsls	r3, r3, #10
 800a0be:	697a      	ldr	r2, [r7, #20]
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	697a      	ldr	r2, [r7, #20]
 800a0c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	685a      	ldr	r2, [r3, #4]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	693a      	ldr	r2, [r7, #16]
 800a0dc:	621a      	str	r2, [r3, #32]
}
 800a0de:	bf00      	nop
 800a0e0:	371c      	adds	r7, #28
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr
 800a0ea:	bf00      	nop
 800a0ec:	feff8fff 	.word	0xfeff8fff
 800a0f0:	40010000 	.word	0x40010000
 800a0f4:	40010400 	.word	0x40010400
 800a0f8:	40014000 	.word	0x40014000
 800a0fc:	40014400 	.word	0x40014400
 800a100:	40014800 	.word	0x40014800

0800a104 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a104:	b480      	push	{r7}
 800a106:	b087      	sub	sp, #28
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6a1b      	ldr	r3, [r3, #32]
 800a114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6a1b      	ldr	r3, [r3, #32]
 800a11a:	f023 0201 	bic.w	r2, r3, #1
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	699b      	ldr	r3, [r3, #24]
 800a126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a12e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	011b      	lsls	r3, r3, #4
 800a134:	693a      	ldr	r2, [r7, #16]
 800a136:	4313      	orrs	r3, r2
 800a138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	f023 030a 	bic.w	r3, r3, #10
 800a140:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a142:	697a      	ldr	r2, [r7, #20]
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	4313      	orrs	r3, r2
 800a148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	693a      	ldr	r2, [r7, #16]
 800a14e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	697a      	ldr	r2, [r7, #20]
 800a154:	621a      	str	r2, [r3, #32]
}
 800a156:	bf00      	nop
 800a158:	371c      	adds	r7, #28
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr

0800a162 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a162:	b480      	push	{r7}
 800a164:	b087      	sub	sp, #28
 800a166:	af00      	add	r7, sp, #0
 800a168:	60f8      	str	r0, [r7, #12]
 800a16a:	60b9      	str	r1, [r7, #8]
 800a16c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	6a1b      	ldr	r3, [r3, #32]
 800a172:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6a1b      	ldr	r3, [r3, #32]
 800a178:	f023 0210 	bic.w	r2, r3, #16
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	699b      	ldr	r3, [r3, #24]
 800a184:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a18c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	031b      	lsls	r3, r3, #12
 800a192:	693a      	ldr	r2, [r7, #16]
 800a194:	4313      	orrs	r3, r2
 800a196:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a19e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	011b      	lsls	r3, r3, #4
 800a1a4:	697a      	ldr	r2, [r7, #20]
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	693a      	ldr	r2, [r7, #16]
 800a1ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	697a      	ldr	r2, [r7, #20]
 800a1b4:	621a      	str	r2, [r3, #32]
}
 800a1b6:	bf00      	nop
 800a1b8:	371c      	adds	r7, #28
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr
	...

0800a1c4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b085      	sub	sp, #20
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	689b      	ldr	r3, [r3, #8]
 800a1d2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a1d4:	68fa      	ldr	r2, [r7, #12]
 800a1d6:	4b09      	ldr	r3, [pc, #36]	@ (800a1fc <TIM_ITRx_SetConfig+0x38>)
 800a1d8:	4013      	ands	r3, r2
 800a1da:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a1dc:	683a      	ldr	r2, [r7, #0]
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	f043 0307 	orr.w	r3, r3, #7
 800a1e6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	609a      	str	r2, [r3, #8]
}
 800a1ee:	bf00      	nop
 800a1f0:	3714      	adds	r7, #20
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr
 800a1fa:	bf00      	nop
 800a1fc:	ffcfff8f 	.word	0xffcfff8f

0800a200 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a200:	b480      	push	{r7}
 800a202:	b087      	sub	sp, #28
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	607a      	str	r2, [r7, #4]
 800a20c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a21a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	021a      	lsls	r2, r3, #8
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	431a      	orrs	r2, r3
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	4313      	orrs	r3, r2
 800a228:	697a      	ldr	r2, [r7, #20]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	697a      	ldr	r2, [r7, #20]
 800a232:	609a      	str	r2, [r3, #8]
}
 800a234:	bf00      	nop
 800a236:	371c      	adds	r7, #28
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a250:	2b01      	cmp	r3, #1
 800a252:	d101      	bne.n	800a258 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a254:	2302      	movs	r3, #2
 800a256:	e077      	b.n	800a348 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2201      	movs	r2, #1
 800a25c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2202      	movs	r2, #2
 800a264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a35      	ldr	r2, [pc, #212]	@ (800a354 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d004      	beq.n	800a28c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a34      	ldr	r2, [pc, #208]	@ (800a358 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d108      	bne.n	800a29e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a292:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	68fa      	ldr	r2, [r7, #12]
 800a2b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a25      	ldr	r2, [pc, #148]	@ (800a354 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d02c      	beq.n	800a31c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2ca:	d027      	beq.n	800a31c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a22      	ldr	r2, [pc, #136]	@ (800a35c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d022      	beq.n	800a31c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a21      	ldr	r2, [pc, #132]	@ (800a360 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d01d      	beq.n	800a31c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a1f      	ldr	r2, [pc, #124]	@ (800a364 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d018      	beq.n	800a31c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4a1a      	ldr	r2, [pc, #104]	@ (800a358 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d013      	beq.n	800a31c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a1b      	ldr	r2, [pc, #108]	@ (800a368 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d00e      	beq.n	800a31c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a1a      	ldr	r2, [pc, #104]	@ (800a36c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d009      	beq.n	800a31c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a18      	ldr	r2, [pc, #96]	@ (800a370 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d004      	beq.n	800a31c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a17      	ldr	r2, [pc, #92]	@ (800a374 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d10c      	bne.n	800a336 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a322:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	68ba      	ldr	r2, [r7, #8]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	68ba      	ldr	r2, [r7, #8]
 800a334:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2201      	movs	r2, #1
 800a33a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a346:	2300      	movs	r3, #0
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3714      	adds	r7, #20
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr
 800a354:	40010000 	.word	0x40010000
 800a358:	40010400 	.word	0x40010400
 800a35c:	40000400 	.word	0x40000400
 800a360:	40000800 	.word	0x40000800
 800a364:	40000c00 	.word	0x40000c00
 800a368:	40001800 	.word	0x40001800
 800a36c:	40014000 	.word	0x40014000
 800a370:	4000e000 	.word	0x4000e000
 800a374:	4000e400 	.word	0x4000e400

0800a378 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a382:	2300      	movs	r3, #0
 800a384:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d101      	bne.n	800a394 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a390:	2302      	movs	r3, #2
 800a392:	e073      	b.n	800a47c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	68db      	ldr	r3, [r3, #12]
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	695b      	ldr	r3, [r3, #20]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	699b      	ldr	r3, [r3, #24]
 800a408:	041b      	lsls	r3, r3, #16
 800a40a:	4313      	orrs	r3, r2
 800a40c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	69db      	ldr	r3, [r3, #28]
 800a418:	4313      	orrs	r3, r2
 800a41a:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a19      	ldr	r2, [pc, #100]	@ (800a488 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d004      	beq.n	800a430 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a18      	ldr	r2, [pc, #96]	@ (800a48c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d11c      	bne.n	800a46a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a43a:	051b      	lsls	r3, r3, #20
 800a43c:	4313      	orrs	r3, r2
 800a43e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	6a1b      	ldr	r3, [r3, #32]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a458:	4313      	orrs	r3, r2
 800a45a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a466:	4313      	orrs	r3, r2
 800a468:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	68fa      	ldr	r2, [r7, #12]
 800a470:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3714      	adds	r7, #20
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr
 800a488:	40010000 	.word	0x40010000
 800a48c:	40010400 	.word	0x40010400

0800a490 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a498:	bf00      	nop
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a4ac:	bf00      	nop
 800a4ae:	370c      	adds	r7, #12
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a4c0:	bf00      	nop
 800a4c2:	370c      	adds	r7, #12
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d101      	bne.n	800a4de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e042      	b.n	800a564 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d106      	bne.n	800a4f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f7f7 fb7b 	bl	8001bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2224      	movs	r2, #36	@ 0x24
 800a4fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f022 0201 	bic.w	r2, r2, #1
 800a50c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a512:	2b00      	cmp	r3, #0
 800a514:	d002      	beq.n	800a51c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 ff22 	bl	800b360 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 f8b3 	bl	800a688 <UART_SetConfig>
 800a522:	4603      	mov	r3, r0
 800a524:	2b01      	cmp	r3, #1
 800a526:	d101      	bne.n	800a52c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a528:	2301      	movs	r3, #1
 800a52a:	e01b      	b.n	800a564 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	685a      	ldr	r2, [r3, #4]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a53a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	689a      	ldr	r2, [r3, #8]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a54a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f042 0201 	orr.w	r2, r2, #1
 800a55a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 ffa1 	bl	800b4a4 <UART_CheckIdleState>
 800a562:	4603      	mov	r3, r0
}
 800a564:	4618      	mov	r0, r3
 800a566:	3708      	adds	r7, #8
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b08a      	sub	sp, #40	@ 0x28
 800a570:	af02      	add	r7, sp, #8
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	60b9      	str	r1, [r7, #8]
 800a576:	603b      	str	r3, [r7, #0]
 800a578:	4613      	mov	r3, r2
 800a57a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a582:	2b20      	cmp	r3, #32
 800a584:	d17b      	bne.n	800a67e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d002      	beq.n	800a592 <HAL_UART_Transmit+0x26>
 800a58c:	88fb      	ldrh	r3, [r7, #6]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d101      	bne.n	800a596 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a592:	2301      	movs	r3, #1
 800a594:	e074      	b.n	800a680 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2200      	movs	r2, #0
 800a59a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2221      	movs	r2, #33	@ 0x21
 800a5a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a5a6:	f7f7 fd8f 	bl	80020c8 <HAL_GetTick>
 800a5aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	88fa      	ldrh	r2, [r7, #6]
 800a5b0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	88fa      	ldrh	r2, [r7, #6]
 800a5b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	689b      	ldr	r3, [r3, #8]
 800a5c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5c4:	d108      	bne.n	800a5d8 <HAL_UART_Transmit+0x6c>
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d104      	bne.n	800a5d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	61bb      	str	r3, [r7, #24]
 800a5d6:	e003      	b.n	800a5e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a5e0:	e030      	b.n	800a644 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	9300      	str	r3, [sp, #0]
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	2180      	movs	r1, #128	@ 0x80
 800a5ec:	68f8      	ldr	r0, [r7, #12]
 800a5ee:	f001 f803 	bl	800b5f8 <UART_WaitOnFlagUntilTimeout>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d005      	beq.n	800a604 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2220      	movs	r2, #32
 800a5fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a600:	2303      	movs	r3, #3
 800a602:	e03d      	b.n	800a680 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a604:	69fb      	ldr	r3, [r7, #28]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d10b      	bne.n	800a622 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	881b      	ldrh	r3, [r3, #0]
 800a60e:	461a      	mov	r2, r3
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a618:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	3302      	adds	r3, #2
 800a61e:	61bb      	str	r3, [r7, #24]
 800a620:	e007      	b.n	800a632 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a622:	69fb      	ldr	r3, [r7, #28]
 800a624:	781a      	ldrb	r2, [r3, #0]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	3301      	adds	r3, #1
 800a630:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a638:	b29b      	uxth	r3, r3
 800a63a:	3b01      	subs	r3, #1
 800a63c:	b29a      	uxth	r2, r3
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d1c8      	bne.n	800a5e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	9300      	str	r3, [sp, #0]
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	2200      	movs	r2, #0
 800a658:	2140      	movs	r1, #64	@ 0x40
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f000 ffcc 	bl	800b5f8 <UART_WaitOnFlagUntilTimeout>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d005      	beq.n	800a672 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2220      	movs	r2, #32
 800a66a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a66e:	2303      	movs	r3, #3
 800a670:	e006      	b.n	800a680 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2220      	movs	r2, #32
 800a676:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a67a:	2300      	movs	r3, #0
 800a67c:	e000      	b.n	800a680 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a67e:	2302      	movs	r3, #2
  }
}
 800a680:	4618      	mov	r0, r3
 800a682:	3720      	adds	r7, #32
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a68c:	b092      	sub	sp, #72	@ 0x48
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a692:	2300      	movs	r3, #0
 800a694:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	689a      	ldr	r2, [r3, #8]
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	691b      	ldr	r3, [r3, #16]
 800a6a0:	431a      	orrs	r2, r3
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	695b      	ldr	r3, [r3, #20]
 800a6a6:	431a      	orrs	r2, r3
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	69db      	ldr	r3, [r3, #28]
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	4bbe      	ldr	r3, [pc, #760]	@ (800a9b0 <UART_SetConfig+0x328>)
 800a6b8:	4013      	ands	r3, r2
 800a6ba:	697a      	ldr	r2, [r7, #20]
 800a6bc:	6812      	ldr	r2, [r2, #0]
 800a6be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a6c0:	430b      	orrs	r3, r1
 800a6c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	68da      	ldr	r2, [r3, #12]
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	430a      	orrs	r2, r1
 800a6d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4ab3      	ldr	r2, [pc, #716]	@ (800a9b4 <UART_SetConfig+0x32c>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d004      	beq.n	800a6f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	6a1b      	ldr	r3, [r3, #32]
 800a6ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	689a      	ldr	r2, [r3, #8]
 800a6fa:	4baf      	ldr	r3, [pc, #700]	@ (800a9b8 <UART_SetConfig+0x330>)
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	697a      	ldr	r2, [r7, #20]
 800a700:	6812      	ldr	r2, [r2, #0]
 800a702:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a704:	430b      	orrs	r3, r1
 800a706:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a70e:	f023 010f 	bic.w	r1, r3, #15
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	430a      	orrs	r2, r1
 800a71c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4aa6      	ldr	r2, [pc, #664]	@ (800a9bc <UART_SetConfig+0x334>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d177      	bne.n	800a818 <UART_SetConfig+0x190>
 800a728:	4ba5      	ldr	r3, [pc, #660]	@ (800a9c0 <UART_SetConfig+0x338>)
 800a72a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a72c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a730:	2b28      	cmp	r3, #40	@ 0x28
 800a732:	d86d      	bhi.n	800a810 <UART_SetConfig+0x188>
 800a734:	a201      	add	r2, pc, #4	@ (adr r2, 800a73c <UART_SetConfig+0xb4>)
 800a736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a73a:	bf00      	nop
 800a73c:	0800a7e1 	.word	0x0800a7e1
 800a740:	0800a811 	.word	0x0800a811
 800a744:	0800a811 	.word	0x0800a811
 800a748:	0800a811 	.word	0x0800a811
 800a74c:	0800a811 	.word	0x0800a811
 800a750:	0800a811 	.word	0x0800a811
 800a754:	0800a811 	.word	0x0800a811
 800a758:	0800a811 	.word	0x0800a811
 800a75c:	0800a7e9 	.word	0x0800a7e9
 800a760:	0800a811 	.word	0x0800a811
 800a764:	0800a811 	.word	0x0800a811
 800a768:	0800a811 	.word	0x0800a811
 800a76c:	0800a811 	.word	0x0800a811
 800a770:	0800a811 	.word	0x0800a811
 800a774:	0800a811 	.word	0x0800a811
 800a778:	0800a811 	.word	0x0800a811
 800a77c:	0800a7f1 	.word	0x0800a7f1
 800a780:	0800a811 	.word	0x0800a811
 800a784:	0800a811 	.word	0x0800a811
 800a788:	0800a811 	.word	0x0800a811
 800a78c:	0800a811 	.word	0x0800a811
 800a790:	0800a811 	.word	0x0800a811
 800a794:	0800a811 	.word	0x0800a811
 800a798:	0800a811 	.word	0x0800a811
 800a79c:	0800a7f9 	.word	0x0800a7f9
 800a7a0:	0800a811 	.word	0x0800a811
 800a7a4:	0800a811 	.word	0x0800a811
 800a7a8:	0800a811 	.word	0x0800a811
 800a7ac:	0800a811 	.word	0x0800a811
 800a7b0:	0800a811 	.word	0x0800a811
 800a7b4:	0800a811 	.word	0x0800a811
 800a7b8:	0800a811 	.word	0x0800a811
 800a7bc:	0800a801 	.word	0x0800a801
 800a7c0:	0800a811 	.word	0x0800a811
 800a7c4:	0800a811 	.word	0x0800a811
 800a7c8:	0800a811 	.word	0x0800a811
 800a7cc:	0800a811 	.word	0x0800a811
 800a7d0:	0800a811 	.word	0x0800a811
 800a7d4:	0800a811 	.word	0x0800a811
 800a7d8:	0800a811 	.word	0x0800a811
 800a7dc:	0800a809 	.word	0x0800a809
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7e6:	e326      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a7e8:	2304      	movs	r3, #4
 800a7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7ee:	e322      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a7f0:	2308      	movs	r3, #8
 800a7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7f6:	e31e      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a7f8:	2310      	movs	r3, #16
 800a7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7fe:	e31a      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a800:	2320      	movs	r3, #32
 800a802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a806:	e316      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a808:	2340      	movs	r3, #64	@ 0x40
 800a80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a80e:	e312      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a810:	2380      	movs	r3, #128	@ 0x80
 800a812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a816:	e30e      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a69      	ldr	r2, [pc, #420]	@ (800a9c4 <UART_SetConfig+0x33c>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d130      	bne.n	800a884 <UART_SetConfig+0x1fc>
 800a822:	4b67      	ldr	r3, [pc, #412]	@ (800a9c0 <UART_SetConfig+0x338>)
 800a824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a826:	f003 0307 	and.w	r3, r3, #7
 800a82a:	2b05      	cmp	r3, #5
 800a82c:	d826      	bhi.n	800a87c <UART_SetConfig+0x1f4>
 800a82e:	a201      	add	r2, pc, #4	@ (adr r2, 800a834 <UART_SetConfig+0x1ac>)
 800a830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a834:	0800a84d 	.word	0x0800a84d
 800a838:	0800a855 	.word	0x0800a855
 800a83c:	0800a85d 	.word	0x0800a85d
 800a840:	0800a865 	.word	0x0800a865
 800a844:	0800a86d 	.word	0x0800a86d
 800a848:	0800a875 	.word	0x0800a875
 800a84c:	2300      	movs	r3, #0
 800a84e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a852:	e2f0      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a854:	2304      	movs	r3, #4
 800a856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a85a:	e2ec      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a85c:	2308      	movs	r3, #8
 800a85e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a862:	e2e8      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a864:	2310      	movs	r3, #16
 800a866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a86a:	e2e4      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a86c:	2320      	movs	r3, #32
 800a86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a872:	e2e0      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a874:	2340      	movs	r3, #64	@ 0x40
 800a876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a87a:	e2dc      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a87c:	2380      	movs	r3, #128	@ 0x80
 800a87e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a882:	e2d8      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4a4f      	ldr	r2, [pc, #316]	@ (800a9c8 <UART_SetConfig+0x340>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d130      	bne.n	800a8f0 <UART_SetConfig+0x268>
 800a88e:	4b4c      	ldr	r3, [pc, #304]	@ (800a9c0 <UART_SetConfig+0x338>)
 800a890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a892:	f003 0307 	and.w	r3, r3, #7
 800a896:	2b05      	cmp	r3, #5
 800a898:	d826      	bhi.n	800a8e8 <UART_SetConfig+0x260>
 800a89a:	a201      	add	r2, pc, #4	@ (adr r2, 800a8a0 <UART_SetConfig+0x218>)
 800a89c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a0:	0800a8b9 	.word	0x0800a8b9
 800a8a4:	0800a8c1 	.word	0x0800a8c1
 800a8a8:	0800a8c9 	.word	0x0800a8c9
 800a8ac:	0800a8d1 	.word	0x0800a8d1
 800a8b0:	0800a8d9 	.word	0x0800a8d9
 800a8b4:	0800a8e1 	.word	0x0800a8e1
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8be:	e2ba      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a8c0:	2304      	movs	r3, #4
 800a8c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8c6:	e2b6      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a8c8:	2308      	movs	r3, #8
 800a8ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ce:	e2b2      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a8d0:	2310      	movs	r3, #16
 800a8d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8d6:	e2ae      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a8d8:	2320      	movs	r3, #32
 800a8da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8de:	e2aa      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a8e0:	2340      	movs	r3, #64	@ 0x40
 800a8e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8e6:	e2a6      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a8e8:	2380      	movs	r3, #128	@ 0x80
 800a8ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ee:	e2a2      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a35      	ldr	r2, [pc, #212]	@ (800a9cc <UART_SetConfig+0x344>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d130      	bne.n	800a95c <UART_SetConfig+0x2d4>
 800a8fa:	4b31      	ldr	r3, [pc, #196]	@ (800a9c0 <UART_SetConfig+0x338>)
 800a8fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8fe:	f003 0307 	and.w	r3, r3, #7
 800a902:	2b05      	cmp	r3, #5
 800a904:	d826      	bhi.n	800a954 <UART_SetConfig+0x2cc>
 800a906:	a201      	add	r2, pc, #4	@ (adr r2, 800a90c <UART_SetConfig+0x284>)
 800a908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a90c:	0800a925 	.word	0x0800a925
 800a910:	0800a92d 	.word	0x0800a92d
 800a914:	0800a935 	.word	0x0800a935
 800a918:	0800a93d 	.word	0x0800a93d
 800a91c:	0800a945 	.word	0x0800a945
 800a920:	0800a94d 	.word	0x0800a94d
 800a924:	2300      	movs	r3, #0
 800a926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a92a:	e284      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a92c:	2304      	movs	r3, #4
 800a92e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a932:	e280      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a934:	2308      	movs	r3, #8
 800a936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a93a:	e27c      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a93c:	2310      	movs	r3, #16
 800a93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a942:	e278      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a944:	2320      	movs	r3, #32
 800a946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a94a:	e274      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a94c:	2340      	movs	r3, #64	@ 0x40
 800a94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a952:	e270      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a954:	2380      	movs	r3, #128	@ 0x80
 800a956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a95a:	e26c      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a1b      	ldr	r2, [pc, #108]	@ (800a9d0 <UART_SetConfig+0x348>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d142      	bne.n	800a9ec <UART_SetConfig+0x364>
 800a966:	4b16      	ldr	r3, [pc, #88]	@ (800a9c0 <UART_SetConfig+0x338>)
 800a968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a96a:	f003 0307 	and.w	r3, r3, #7
 800a96e:	2b05      	cmp	r3, #5
 800a970:	d838      	bhi.n	800a9e4 <UART_SetConfig+0x35c>
 800a972:	a201      	add	r2, pc, #4	@ (adr r2, 800a978 <UART_SetConfig+0x2f0>)
 800a974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a978:	0800a991 	.word	0x0800a991
 800a97c:	0800a999 	.word	0x0800a999
 800a980:	0800a9a1 	.word	0x0800a9a1
 800a984:	0800a9a9 	.word	0x0800a9a9
 800a988:	0800a9d5 	.word	0x0800a9d5
 800a98c:	0800a9dd 	.word	0x0800a9dd
 800a990:	2300      	movs	r3, #0
 800a992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a996:	e24e      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a998:	2304      	movs	r3, #4
 800a99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a99e:	e24a      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a9a0:	2308      	movs	r3, #8
 800a9a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9a6:	e246      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a9a8:	2310      	movs	r3, #16
 800a9aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ae:	e242      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a9b0:	cfff69f3 	.word	0xcfff69f3
 800a9b4:	58000c00 	.word	0x58000c00
 800a9b8:	11fff4ff 	.word	0x11fff4ff
 800a9bc:	40011000 	.word	0x40011000
 800a9c0:	58024400 	.word	0x58024400
 800a9c4:	40004400 	.word	0x40004400
 800a9c8:	40004800 	.word	0x40004800
 800a9cc:	40004c00 	.word	0x40004c00
 800a9d0:	40005000 	.word	0x40005000
 800a9d4:	2320      	movs	r3, #32
 800a9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9da:	e22c      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a9dc:	2340      	movs	r3, #64	@ 0x40
 800a9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9e2:	e228      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a9e4:	2380      	movs	r3, #128	@ 0x80
 800a9e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ea:	e224      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4ab1      	ldr	r2, [pc, #708]	@ (800acb8 <UART_SetConfig+0x630>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d176      	bne.n	800aae4 <UART_SetConfig+0x45c>
 800a9f6:	4bb1      	ldr	r3, [pc, #708]	@ (800acbc <UART_SetConfig+0x634>)
 800a9f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a9fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a9fe:	2b28      	cmp	r3, #40	@ 0x28
 800aa00:	d86c      	bhi.n	800aadc <UART_SetConfig+0x454>
 800aa02:	a201      	add	r2, pc, #4	@ (adr r2, 800aa08 <UART_SetConfig+0x380>)
 800aa04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa08:	0800aaad 	.word	0x0800aaad
 800aa0c:	0800aadd 	.word	0x0800aadd
 800aa10:	0800aadd 	.word	0x0800aadd
 800aa14:	0800aadd 	.word	0x0800aadd
 800aa18:	0800aadd 	.word	0x0800aadd
 800aa1c:	0800aadd 	.word	0x0800aadd
 800aa20:	0800aadd 	.word	0x0800aadd
 800aa24:	0800aadd 	.word	0x0800aadd
 800aa28:	0800aab5 	.word	0x0800aab5
 800aa2c:	0800aadd 	.word	0x0800aadd
 800aa30:	0800aadd 	.word	0x0800aadd
 800aa34:	0800aadd 	.word	0x0800aadd
 800aa38:	0800aadd 	.word	0x0800aadd
 800aa3c:	0800aadd 	.word	0x0800aadd
 800aa40:	0800aadd 	.word	0x0800aadd
 800aa44:	0800aadd 	.word	0x0800aadd
 800aa48:	0800aabd 	.word	0x0800aabd
 800aa4c:	0800aadd 	.word	0x0800aadd
 800aa50:	0800aadd 	.word	0x0800aadd
 800aa54:	0800aadd 	.word	0x0800aadd
 800aa58:	0800aadd 	.word	0x0800aadd
 800aa5c:	0800aadd 	.word	0x0800aadd
 800aa60:	0800aadd 	.word	0x0800aadd
 800aa64:	0800aadd 	.word	0x0800aadd
 800aa68:	0800aac5 	.word	0x0800aac5
 800aa6c:	0800aadd 	.word	0x0800aadd
 800aa70:	0800aadd 	.word	0x0800aadd
 800aa74:	0800aadd 	.word	0x0800aadd
 800aa78:	0800aadd 	.word	0x0800aadd
 800aa7c:	0800aadd 	.word	0x0800aadd
 800aa80:	0800aadd 	.word	0x0800aadd
 800aa84:	0800aadd 	.word	0x0800aadd
 800aa88:	0800aacd 	.word	0x0800aacd
 800aa8c:	0800aadd 	.word	0x0800aadd
 800aa90:	0800aadd 	.word	0x0800aadd
 800aa94:	0800aadd 	.word	0x0800aadd
 800aa98:	0800aadd 	.word	0x0800aadd
 800aa9c:	0800aadd 	.word	0x0800aadd
 800aaa0:	0800aadd 	.word	0x0800aadd
 800aaa4:	0800aadd 	.word	0x0800aadd
 800aaa8:	0800aad5 	.word	0x0800aad5
 800aaac:	2301      	movs	r3, #1
 800aaae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aab2:	e1c0      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800aab4:	2304      	movs	r3, #4
 800aab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaba:	e1bc      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800aabc:	2308      	movs	r3, #8
 800aabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aac2:	e1b8      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800aac4:	2310      	movs	r3, #16
 800aac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaca:	e1b4      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800aacc:	2320      	movs	r3, #32
 800aace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aad2:	e1b0      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800aad4:	2340      	movs	r3, #64	@ 0x40
 800aad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aada:	e1ac      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800aadc:	2380      	movs	r3, #128	@ 0x80
 800aade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aae2:	e1a8      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a75      	ldr	r2, [pc, #468]	@ (800acc0 <UART_SetConfig+0x638>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d130      	bne.n	800ab50 <UART_SetConfig+0x4c8>
 800aaee:	4b73      	ldr	r3, [pc, #460]	@ (800acbc <UART_SetConfig+0x634>)
 800aaf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaf2:	f003 0307 	and.w	r3, r3, #7
 800aaf6:	2b05      	cmp	r3, #5
 800aaf8:	d826      	bhi.n	800ab48 <UART_SetConfig+0x4c0>
 800aafa:	a201      	add	r2, pc, #4	@ (adr r2, 800ab00 <UART_SetConfig+0x478>)
 800aafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab00:	0800ab19 	.word	0x0800ab19
 800ab04:	0800ab21 	.word	0x0800ab21
 800ab08:	0800ab29 	.word	0x0800ab29
 800ab0c:	0800ab31 	.word	0x0800ab31
 800ab10:	0800ab39 	.word	0x0800ab39
 800ab14:	0800ab41 	.word	0x0800ab41
 800ab18:	2300      	movs	r3, #0
 800ab1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab1e:	e18a      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ab20:	2304      	movs	r3, #4
 800ab22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab26:	e186      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ab28:	2308      	movs	r3, #8
 800ab2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab2e:	e182      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ab30:	2310      	movs	r3, #16
 800ab32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab36:	e17e      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ab38:	2320      	movs	r3, #32
 800ab3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab3e:	e17a      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ab40:	2340      	movs	r3, #64	@ 0x40
 800ab42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab46:	e176      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ab48:	2380      	movs	r3, #128	@ 0x80
 800ab4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab4e:	e172      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4a5b      	ldr	r2, [pc, #364]	@ (800acc4 <UART_SetConfig+0x63c>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d130      	bne.n	800abbc <UART_SetConfig+0x534>
 800ab5a:	4b58      	ldr	r3, [pc, #352]	@ (800acbc <UART_SetConfig+0x634>)
 800ab5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab5e:	f003 0307 	and.w	r3, r3, #7
 800ab62:	2b05      	cmp	r3, #5
 800ab64:	d826      	bhi.n	800abb4 <UART_SetConfig+0x52c>
 800ab66:	a201      	add	r2, pc, #4	@ (adr r2, 800ab6c <UART_SetConfig+0x4e4>)
 800ab68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab6c:	0800ab85 	.word	0x0800ab85
 800ab70:	0800ab8d 	.word	0x0800ab8d
 800ab74:	0800ab95 	.word	0x0800ab95
 800ab78:	0800ab9d 	.word	0x0800ab9d
 800ab7c:	0800aba5 	.word	0x0800aba5
 800ab80:	0800abad 	.word	0x0800abad
 800ab84:	2300      	movs	r3, #0
 800ab86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab8a:	e154      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ab8c:	2304      	movs	r3, #4
 800ab8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab92:	e150      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ab94:	2308      	movs	r3, #8
 800ab96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab9a:	e14c      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ab9c:	2310      	movs	r3, #16
 800ab9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aba2:	e148      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800aba4:	2320      	movs	r3, #32
 800aba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abaa:	e144      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800abac:	2340      	movs	r3, #64	@ 0x40
 800abae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abb2:	e140      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800abb4:	2380      	movs	r3, #128	@ 0x80
 800abb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abba:	e13c      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	4a41      	ldr	r2, [pc, #260]	@ (800acc8 <UART_SetConfig+0x640>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	f040 8082 	bne.w	800accc <UART_SetConfig+0x644>
 800abc8:	4b3c      	ldr	r3, [pc, #240]	@ (800acbc <UART_SetConfig+0x634>)
 800abca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abcc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800abd0:	2b28      	cmp	r3, #40	@ 0x28
 800abd2:	d86d      	bhi.n	800acb0 <UART_SetConfig+0x628>
 800abd4:	a201      	add	r2, pc, #4	@ (adr r2, 800abdc <UART_SetConfig+0x554>)
 800abd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abda:	bf00      	nop
 800abdc:	0800ac81 	.word	0x0800ac81
 800abe0:	0800acb1 	.word	0x0800acb1
 800abe4:	0800acb1 	.word	0x0800acb1
 800abe8:	0800acb1 	.word	0x0800acb1
 800abec:	0800acb1 	.word	0x0800acb1
 800abf0:	0800acb1 	.word	0x0800acb1
 800abf4:	0800acb1 	.word	0x0800acb1
 800abf8:	0800acb1 	.word	0x0800acb1
 800abfc:	0800ac89 	.word	0x0800ac89
 800ac00:	0800acb1 	.word	0x0800acb1
 800ac04:	0800acb1 	.word	0x0800acb1
 800ac08:	0800acb1 	.word	0x0800acb1
 800ac0c:	0800acb1 	.word	0x0800acb1
 800ac10:	0800acb1 	.word	0x0800acb1
 800ac14:	0800acb1 	.word	0x0800acb1
 800ac18:	0800acb1 	.word	0x0800acb1
 800ac1c:	0800ac91 	.word	0x0800ac91
 800ac20:	0800acb1 	.word	0x0800acb1
 800ac24:	0800acb1 	.word	0x0800acb1
 800ac28:	0800acb1 	.word	0x0800acb1
 800ac2c:	0800acb1 	.word	0x0800acb1
 800ac30:	0800acb1 	.word	0x0800acb1
 800ac34:	0800acb1 	.word	0x0800acb1
 800ac38:	0800acb1 	.word	0x0800acb1
 800ac3c:	0800ac99 	.word	0x0800ac99
 800ac40:	0800acb1 	.word	0x0800acb1
 800ac44:	0800acb1 	.word	0x0800acb1
 800ac48:	0800acb1 	.word	0x0800acb1
 800ac4c:	0800acb1 	.word	0x0800acb1
 800ac50:	0800acb1 	.word	0x0800acb1
 800ac54:	0800acb1 	.word	0x0800acb1
 800ac58:	0800acb1 	.word	0x0800acb1
 800ac5c:	0800aca1 	.word	0x0800aca1
 800ac60:	0800acb1 	.word	0x0800acb1
 800ac64:	0800acb1 	.word	0x0800acb1
 800ac68:	0800acb1 	.word	0x0800acb1
 800ac6c:	0800acb1 	.word	0x0800acb1
 800ac70:	0800acb1 	.word	0x0800acb1
 800ac74:	0800acb1 	.word	0x0800acb1
 800ac78:	0800acb1 	.word	0x0800acb1
 800ac7c:	0800aca9 	.word	0x0800aca9
 800ac80:	2301      	movs	r3, #1
 800ac82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac86:	e0d6      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ac88:	2304      	movs	r3, #4
 800ac8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac8e:	e0d2      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ac90:	2308      	movs	r3, #8
 800ac92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac96:	e0ce      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ac98:	2310      	movs	r3, #16
 800ac9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac9e:	e0ca      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800aca0:	2320      	movs	r3, #32
 800aca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aca6:	e0c6      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800aca8:	2340      	movs	r3, #64	@ 0x40
 800acaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acae:	e0c2      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800acb0:	2380      	movs	r3, #128	@ 0x80
 800acb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acb6:	e0be      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800acb8:	40011400 	.word	0x40011400
 800acbc:	58024400 	.word	0x58024400
 800acc0:	40007800 	.word	0x40007800
 800acc4:	40007c00 	.word	0x40007c00
 800acc8:	40011800 	.word	0x40011800
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4aad      	ldr	r2, [pc, #692]	@ (800af88 <UART_SetConfig+0x900>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d176      	bne.n	800adc4 <UART_SetConfig+0x73c>
 800acd6:	4bad      	ldr	r3, [pc, #692]	@ (800af8c <UART_SetConfig+0x904>)
 800acd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800acde:	2b28      	cmp	r3, #40	@ 0x28
 800ace0:	d86c      	bhi.n	800adbc <UART_SetConfig+0x734>
 800ace2:	a201      	add	r2, pc, #4	@ (adr r2, 800ace8 <UART_SetConfig+0x660>)
 800ace4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ace8:	0800ad8d 	.word	0x0800ad8d
 800acec:	0800adbd 	.word	0x0800adbd
 800acf0:	0800adbd 	.word	0x0800adbd
 800acf4:	0800adbd 	.word	0x0800adbd
 800acf8:	0800adbd 	.word	0x0800adbd
 800acfc:	0800adbd 	.word	0x0800adbd
 800ad00:	0800adbd 	.word	0x0800adbd
 800ad04:	0800adbd 	.word	0x0800adbd
 800ad08:	0800ad95 	.word	0x0800ad95
 800ad0c:	0800adbd 	.word	0x0800adbd
 800ad10:	0800adbd 	.word	0x0800adbd
 800ad14:	0800adbd 	.word	0x0800adbd
 800ad18:	0800adbd 	.word	0x0800adbd
 800ad1c:	0800adbd 	.word	0x0800adbd
 800ad20:	0800adbd 	.word	0x0800adbd
 800ad24:	0800adbd 	.word	0x0800adbd
 800ad28:	0800ad9d 	.word	0x0800ad9d
 800ad2c:	0800adbd 	.word	0x0800adbd
 800ad30:	0800adbd 	.word	0x0800adbd
 800ad34:	0800adbd 	.word	0x0800adbd
 800ad38:	0800adbd 	.word	0x0800adbd
 800ad3c:	0800adbd 	.word	0x0800adbd
 800ad40:	0800adbd 	.word	0x0800adbd
 800ad44:	0800adbd 	.word	0x0800adbd
 800ad48:	0800ada5 	.word	0x0800ada5
 800ad4c:	0800adbd 	.word	0x0800adbd
 800ad50:	0800adbd 	.word	0x0800adbd
 800ad54:	0800adbd 	.word	0x0800adbd
 800ad58:	0800adbd 	.word	0x0800adbd
 800ad5c:	0800adbd 	.word	0x0800adbd
 800ad60:	0800adbd 	.word	0x0800adbd
 800ad64:	0800adbd 	.word	0x0800adbd
 800ad68:	0800adad 	.word	0x0800adad
 800ad6c:	0800adbd 	.word	0x0800adbd
 800ad70:	0800adbd 	.word	0x0800adbd
 800ad74:	0800adbd 	.word	0x0800adbd
 800ad78:	0800adbd 	.word	0x0800adbd
 800ad7c:	0800adbd 	.word	0x0800adbd
 800ad80:	0800adbd 	.word	0x0800adbd
 800ad84:	0800adbd 	.word	0x0800adbd
 800ad88:	0800adb5 	.word	0x0800adb5
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad92:	e050      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ad94:	2304      	movs	r3, #4
 800ad96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad9a:	e04c      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ad9c:	2308      	movs	r3, #8
 800ad9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ada2:	e048      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ada4:	2310      	movs	r3, #16
 800ada6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adaa:	e044      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800adac:	2320      	movs	r3, #32
 800adae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adb2:	e040      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800adb4:	2340      	movs	r3, #64	@ 0x40
 800adb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adba:	e03c      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800adbc:	2380      	movs	r3, #128	@ 0x80
 800adbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adc2:	e038      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4a71      	ldr	r2, [pc, #452]	@ (800af90 <UART_SetConfig+0x908>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d130      	bne.n	800ae30 <UART_SetConfig+0x7a8>
 800adce:	4b6f      	ldr	r3, [pc, #444]	@ (800af8c <UART_SetConfig+0x904>)
 800add0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800add2:	f003 0307 	and.w	r3, r3, #7
 800add6:	2b05      	cmp	r3, #5
 800add8:	d826      	bhi.n	800ae28 <UART_SetConfig+0x7a0>
 800adda:	a201      	add	r2, pc, #4	@ (adr r2, 800ade0 <UART_SetConfig+0x758>)
 800addc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ade0:	0800adf9 	.word	0x0800adf9
 800ade4:	0800ae01 	.word	0x0800ae01
 800ade8:	0800ae09 	.word	0x0800ae09
 800adec:	0800ae11 	.word	0x0800ae11
 800adf0:	0800ae19 	.word	0x0800ae19
 800adf4:	0800ae21 	.word	0x0800ae21
 800adf8:	2302      	movs	r3, #2
 800adfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adfe:	e01a      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ae00:	2304      	movs	r3, #4
 800ae02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae06:	e016      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ae08:	2308      	movs	r3, #8
 800ae0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae0e:	e012      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ae10:	2310      	movs	r3, #16
 800ae12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae16:	e00e      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ae18:	2320      	movs	r3, #32
 800ae1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae1e:	e00a      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ae20:	2340      	movs	r3, #64	@ 0x40
 800ae22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae26:	e006      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ae28:	2380      	movs	r3, #128	@ 0x80
 800ae2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae2e:	e002      	b.n	800ae36 <UART_SetConfig+0x7ae>
 800ae30:	2380      	movs	r3, #128	@ 0x80
 800ae32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a55      	ldr	r2, [pc, #340]	@ (800af90 <UART_SetConfig+0x908>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	f040 80f8 	bne.w	800b032 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ae42:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ae46:	2b20      	cmp	r3, #32
 800ae48:	dc46      	bgt.n	800aed8 <UART_SetConfig+0x850>
 800ae4a:	2b02      	cmp	r3, #2
 800ae4c:	db75      	blt.n	800af3a <UART_SetConfig+0x8b2>
 800ae4e:	3b02      	subs	r3, #2
 800ae50:	2b1e      	cmp	r3, #30
 800ae52:	d872      	bhi.n	800af3a <UART_SetConfig+0x8b2>
 800ae54:	a201      	add	r2, pc, #4	@ (adr r2, 800ae5c <UART_SetConfig+0x7d4>)
 800ae56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae5a:	bf00      	nop
 800ae5c:	0800aedf 	.word	0x0800aedf
 800ae60:	0800af3b 	.word	0x0800af3b
 800ae64:	0800aee7 	.word	0x0800aee7
 800ae68:	0800af3b 	.word	0x0800af3b
 800ae6c:	0800af3b 	.word	0x0800af3b
 800ae70:	0800af3b 	.word	0x0800af3b
 800ae74:	0800aef7 	.word	0x0800aef7
 800ae78:	0800af3b 	.word	0x0800af3b
 800ae7c:	0800af3b 	.word	0x0800af3b
 800ae80:	0800af3b 	.word	0x0800af3b
 800ae84:	0800af3b 	.word	0x0800af3b
 800ae88:	0800af3b 	.word	0x0800af3b
 800ae8c:	0800af3b 	.word	0x0800af3b
 800ae90:	0800af3b 	.word	0x0800af3b
 800ae94:	0800af07 	.word	0x0800af07
 800ae98:	0800af3b 	.word	0x0800af3b
 800ae9c:	0800af3b 	.word	0x0800af3b
 800aea0:	0800af3b 	.word	0x0800af3b
 800aea4:	0800af3b 	.word	0x0800af3b
 800aea8:	0800af3b 	.word	0x0800af3b
 800aeac:	0800af3b 	.word	0x0800af3b
 800aeb0:	0800af3b 	.word	0x0800af3b
 800aeb4:	0800af3b 	.word	0x0800af3b
 800aeb8:	0800af3b 	.word	0x0800af3b
 800aebc:	0800af3b 	.word	0x0800af3b
 800aec0:	0800af3b 	.word	0x0800af3b
 800aec4:	0800af3b 	.word	0x0800af3b
 800aec8:	0800af3b 	.word	0x0800af3b
 800aecc:	0800af3b 	.word	0x0800af3b
 800aed0:	0800af3b 	.word	0x0800af3b
 800aed4:	0800af2d 	.word	0x0800af2d
 800aed8:	2b40      	cmp	r3, #64	@ 0x40
 800aeda:	d02a      	beq.n	800af32 <UART_SetConfig+0x8aa>
 800aedc:	e02d      	b.n	800af3a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800aede:	f7fd fb9b 	bl	8008618 <HAL_RCCEx_GetD3PCLK1Freq>
 800aee2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aee4:	e02f      	b.n	800af46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aee6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7fd fbaa 	bl	8008644 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aef4:	e027      	b.n	800af46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aef6:	f107 0318 	add.w	r3, r7, #24
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7fd fcf6 	bl	80088ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af04:	e01f      	b.n	800af46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af06:	4b21      	ldr	r3, [pc, #132]	@ (800af8c <UART_SetConfig+0x904>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f003 0320 	and.w	r3, r3, #32
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d009      	beq.n	800af26 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af12:	4b1e      	ldr	r3, [pc, #120]	@ (800af8c <UART_SetConfig+0x904>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	08db      	lsrs	r3, r3, #3
 800af18:	f003 0303 	and.w	r3, r3, #3
 800af1c:	4a1d      	ldr	r2, [pc, #116]	@ (800af94 <UART_SetConfig+0x90c>)
 800af1e:	fa22 f303 	lsr.w	r3, r2, r3
 800af22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af24:	e00f      	b.n	800af46 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800af26:	4b1b      	ldr	r3, [pc, #108]	@ (800af94 <UART_SetConfig+0x90c>)
 800af28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af2a:	e00c      	b.n	800af46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af2c:	4b1a      	ldr	r3, [pc, #104]	@ (800af98 <UART_SetConfig+0x910>)
 800af2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af30:	e009      	b.n	800af46 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af38:	e005      	b.n	800af46 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800af3a:	2300      	movs	r3, #0
 800af3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800af3e:	2301      	movs	r3, #1
 800af40:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800af44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800af46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af48:	2b00      	cmp	r3, #0
 800af4a:	f000 81ee 	beq.w	800b32a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af52:	4a12      	ldr	r2, [pc, #72]	@ (800af9c <UART_SetConfig+0x914>)
 800af54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af58:	461a      	mov	r2, r3
 800af5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af5c:	fbb3 f3f2 	udiv	r3, r3, r2
 800af60:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	685a      	ldr	r2, [r3, #4]
 800af66:	4613      	mov	r3, r2
 800af68:	005b      	lsls	r3, r3, #1
 800af6a:	4413      	add	r3, r2
 800af6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af6e:	429a      	cmp	r2, r3
 800af70:	d305      	bcc.n	800af7e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d910      	bls.n	800afa0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800af7e:	2301      	movs	r3, #1
 800af80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800af84:	e1d1      	b.n	800b32a <UART_SetConfig+0xca2>
 800af86:	bf00      	nop
 800af88:	40011c00 	.word	0x40011c00
 800af8c:	58024400 	.word	0x58024400
 800af90:	58000c00 	.word	0x58000c00
 800af94:	03d09000 	.word	0x03d09000
 800af98:	003d0900 	.word	0x003d0900
 800af9c:	0800c5f4 	.word	0x0800c5f4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afa2:	2200      	movs	r2, #0
 800afa4:	60bb      	str	r3, [r7, #8]
 800afa6:	60fa      	str	r2, [r7, #12]
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afac:	4ac0      	ldr	r2, [pc, #768]	@ (800b2b0 <UART_SetConfig+0xc28>)
 800afae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	2200      	movs	r2, #0
 800afb6:	603b      	str	r3, [r7, #0]
 800afb8:	607a      	str	r2, [r7, #4]
 800afba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800afc2:	f7f5 f9fd 	bl	80003c0 <__aeabi_uldivmod>
 800afc6:	4602      	mov	r2, r0
 800afc8:	460b      	mov	r3, r1
 800afca:	4610      	mov	r0, r2
 800afcc:	4619      	mov	r1, r3
 800afce:	f04f 0200 	mov.w	r2, #0
 800afd2:	f04f 0300 	mov.w	r3, #0
 800afd6:	020b      	lsls	r3, r1, #8
 800afd8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800afdc:	0202      	lsls	r2, r0, #8
 800afde:	6979      	ldr	r1, [r7, #20]
 800afe0:	6849      	ldr	r1, [r1, #4]
 800afe2:	0849      	lsrs	r1, r1, #1
 800afe4:	2000      	movs	r0, #0
 800afe6:	460c      	mov	r4, r1
 800afe8:	4605      	mov	r5, r0
 800afea:	eb12 0804 	adds.w	r8, r2, r4
 800afee:	eb43 0905 	adc.w	r9, r3, r5
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	469a      	mov	sl, r3
 800affa:	4693      	mov	fp, r2
 800affc:	4652      	mov	r2, sl
 800affe:	465b      	mov	r3, fp
 800b000:	4640      	mov	r0, r8
 800b002:	4649      	mov	r1, r9
 800b004:	f7f5 f9dc 	bl	80003c0 <__aeabi_uldivmod>
 800b008:	4602      	mov	r2, r0
 800b00a:	460b      	mov	r3, r1
 800b00c:	4613      	mov	r3, r2
 800b00e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b012:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b016:	d308      	bcc.n	800b02a <UART_SetConfig+0x9a2>
 800b018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b01a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b01e:	d204      	bcs.n	800b02a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b026:	60da      	str	r2, [r3, #12]
 800b028:	e17f      	b.n	800b32a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b02a:	2301      	movs	r3, #1
 800b02c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b030:	e17b      	b.n	800b32a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	69db      	ldr	r3, [r3, #28]
 800b036:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b03a:	f040 80bd 	bne.w	800b1b8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b03e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b042:	2b20      	cmp	r3, #32
 800b044:	dc48      	bgt.n	800b0d8 <UART_SetConfig+0xa50>
 800b046:	2b00      	cmp	r3, #0
 800b048:	db7b      	blt.n	800b142 <UART_SetConfig+0xaba>
 800b04a:	2b20      	cmp	r3, #32
 800b04c:	d879      	bhi.n	800b142 <UART_SetConfig+0xaba>
 800b04e:	a201      	add	r2, pc, #4	@ (adr r2, 800b054 <UART_SetConfig+0x9cc>)
 800b050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b054:	0800b0df 	.word	0x0800b0df
 800b058:	0800b0e7 	.word	0x0800b0e7
 800b05c:	0800b143 	.word	0x0800b143
 800b060:	0800b143 	.word	0x0800b143
 800b064:	0800b0ef 	.word	0x0800b0ef
 800b068:	0800b143 	.word	0x0800b143
 800b06c:	0800b143 	.word	0x0800b143
 800b070:	0800b143 	.word	0x0800b143
 800b074:	0800b0ff 	.word	0x0800b0ff
 800b078:	0800b143 	.word	0x0800b143
 800b07c:	0800b143 	.word	0x0800b143
 800b080:	0800b143 	.word	0x0800b143
 800b084:	0800b143 	.word	0x0800b143
 800b088:	0800b143 	.word	0x0800b143
 800b08c:	0800b143 	.word	0x0800b143
 800b090:	0800b143 	.word	0x0800b143
 800b094:	0800b10f 	.word	0x0800b10f
 800b098:	0800b143 	.word	0x0800b143
 800b09c:	0800b143 	.word	0x0800b143
 800b0a0:	0800b143 	.word	0x0800b143
 800b0a4:	0800b143 	.word	0x0800b143
 800b0a8:	0800b143 	.word	0x0800b143
 800b0ac:	0800b143 	.word	0x0800b143
 800b0b0:	0800b143 	.word	0x0800b143
 800b0b4:	0800b143 	.word	0x0800b143
 800b0b8:	0800b143 	.word	0x0800b143
 800b0bc:	0800b143 	.word	0x0800b143
 800b0c0:	0800b143 	.word	0x0800b143
 800b0c4:	0800b143 	.word	0x0800b143
 800b0c8:	0800b143 	.word	0x0800b143
 800b0cc:	0800b143 	.word	0x0800b143
 800b0d0:	0800b143 	.word	0x0800b143
 800b0d4:	0800b135 	.word	0x0800b135
 800b0d8:	2b40      	cmp	r3, #64	@ 0x40
 800b0da:	d02e      	beq.n	800b13a <UART_SetConfig+0xab2>
 800b0dc:	e031      	b.n	800b142 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0de:	f7fb fbfd 	bl	80068dc <HAL_RCC_GetPCLK1Freq>
 800b0e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b0e4:	e033      	b.n	800b14e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b0e6:	f7fb fc0f 	bl	8006908 <HAL_RCC_GetPCLK2Freq>
 800b0ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b0ec:	e02f      	b.n	800b14e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7fd faa6 	bl	8008644 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b0f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0fc:	e027      	b.n	800b14e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0fe:	f107 0318 	add.w	r3, r7, #24
 800b102:	4618      	mov	r0, r3
 800b104:	f7fd fbf2 	bl	80088ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b108:	69fb      	ldr	r3, [r7, #28]
 800b10a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b10c:	e01f      	b.n	800b14e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b10e:	4b69      	ldr	r3, [pc, #420]	@ (800b2b4 <UART_SetConfig+0xc2c>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f003 0320 	and.w	r3, r3, #32
 800b116:	2b00      	cmp	r3, #0
 800b118:	d009      	beq.n	800b12e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b11a:	4b66      	ldr	r3, [pc, #408]	@ (800b2b4 <UART_SetConfig+0xc2c>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	08db      	lsrs	r3, r3, #3
 800b120:	f003 0303 	and.w	r3, r3, #3
 800b124:	4a64      	ldr	r2, [pc, #400]	@ (800b2b8 <UART_SetConfig+0xc30>)
 800b126:	fa22 f303 	lsr.w	r3, r2, r3
 800b12a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b12c:	e00f      	b.n	800b14e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b12e:	4b62      	ldr	r3, [pc, #392]	@ (800b2b8 <UART_SetConfig+0xc30>)
 800b130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b132:	e00c      	b.n	800b14e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b134:	4b61      	ldr	r3, [pc, #388]	@ (800b2bc <UART_SetConfig+0xc34>)
 800b136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b138:	e009      	b.n	800b14e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b13a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b140:	e005      	b.n	800b14e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b142:	2300      	movs	r3, #0
 800b144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b146:	2301      	movs	r3, #1
 800b148:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b14c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b14e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b150:	2b00      	cmp	r3, #0
 800b152:	f000 80ea 	beq.w	800b32a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b15a:	4a55      	ldr	r2, [pc, #340]	@ (800b2b0 <UART_SetConfig+0xc28>)
 800b15c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b160:	461a      	mov	r2, r3
 800b162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b164:	fbb3 f3f2 	udiv	r3, r3, r2
 800b168:	005a      	lsls	r2, r3, #1
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	085b      	lsrs	r3, r3, #1
 800b170:	441a      	add	r2, r3
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	fbb2 f3f3 	udiv	r3, r2, r3
 800b17a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b17c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b17e:	2b0f      	cmp	r3, #15
 800b180:	d916      	bls.n	800b1b0 <UART_SetConfig+0xb28>
 800b182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b188:	d212      	bcs.n	800b1b0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b18a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b18c:	b29b      	uxth	r3, r3
 800b18e:	f023 030f 	bic.w	r3, r3, #15
 800b192:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b196:	085b      	lsrs	r3, r3, #1
 800b198:	b29b      	uxth	r3, r3
 800b19a:	f003 0307 	and.w	r3, r3, #7
 800b19e:	b29a      	uxth	r2, r3
 800b1a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b1ac:	60da      	str	r2, [r3, #12]
 800b1ae:	e0bc      	b.n	800b32a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b1b6:	e0b8      	b.n	800b32a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b1b8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b1bc:	2b20      	cmp	r3, #32
 800b1be:	dc4b      	bgt.n	800b258 <UART_SetConfig+0xbd0>
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f2c0 8087 	blt.w	800b2d4 <UART_SetConfig+0xc4c>
 800b1c6:	2b20      	cmp	r3, #32
 800b1c8:	f200 8084 	bhi.w	800b2d4 <UART_SetConfig+0xc4c>
 800b1cc:	a201      	add	r2, pc, #4	@ (adr r2, 800b1d4 <UART_SetConfig+0xb4c>)
 800b1ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d2:	bf00      	nop
 800b1d4:	0800b25f 	.word	0x0800b25f
 800b1d8:	0800b267 	.word	0x0800b267
 800b1dc:	0800b2d5 	.word	0x0800b2d5
 800b1e0:	0800b2d5 	.word	0x0800b2d5
 800b1e4:	0800b26f 	.word	0x0800b26f
 800b1e8:	0800b2d5 	.word	0x0800b2d5
 800b1ec:	0800b2d5 	.word	0x0800b2d5
 800b1f0:	0800b2d5 	.word	0x0800b2d5
 800b1f4:	0800b27f 	.word	0x0800b27f
 800b1f8:	0800b2d5 	.word	0x0800b2d5
 800b1fc:	0800b2d5 	.word	0x0800b2d5
 800b200:	0800b2d5 	.word	0x0800b2d5
 800b204:	0800b2d5 	.word	0x0800b2d5
 800b208:	0800b2d5 	.word	0x0800b2d5
 800b20c:	0800b2d5 	.word	0x0800b2d5
 800b210:	0800b2d5 	.word	0x0800b2d5
 800b214:	0800b28f 	.word	0x0800b28f
 800b218:	0800b2d5 	.word	0x0800b2d5
 800b21c:	0800b2d5 	.word	0x0800b2d5
 800b220:	0800b2d5 	.word	0x0800b2d5
 800b224:	0800b2d5 	.word	0x0800b2d5
 800b228:	0800b2d5 	.word	0x0800b2d5
 800b22c:	0800b2d5 	.word	0x0800b2d5
 800b230:	0800b2d5 	.word	0x0800b2d5
 800b234:	0800b2d5 	.word	0x0800b2d5
 800b238:	0800b2d5 	.word	0x0800b2d5
 800b23c:	0800b2d5 	.word	0x0800b2d5
 800b240:	0800b2d5 	.word	0x0800b2d5
 800b244:	0800b2d5 	.word	0x0800b2d5
 800b248:	0800b2d5 	.word	0x0800b2d5
 800b24c:	0800b2d5 	.word	0x0800b2d5
 800b250:	0800b2d5 	.word	0x0800b2d5
 800b254:	0800b2c7 	.word	0x0800b2c7
 800b258:	2b40      	cmp	r3, #64	@ 0x40
 800b25a:	d037      	beq.n	800b2cc <UART_SetConfig+0xc44>
 800b25c:	e03a      	b.n	800b2d4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b25e:	f7fb fb3d 	bl	80068dc <HAL_RCC_GetPCLK1Freq>
 800b262:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b264:	e03c      	b.n	800b2e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b266:	f7fb fb4f 	bl	8006908 <HAL_RCC_GetPCLK2Freq>
 800b26a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b26c:	e038      	b.n	800b2e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b26e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b272:	4618      	mov	r0, r3
 800b274:	f7fd f9e6 	bl	8008644 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b27a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b27c:	e030      	b.n	800b2e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b27e:	f107 0318 	add.w	r3, r7, #24
 800b282:	4618      	mov	r0, r3
 800b284:	f7fd fb32 	bl	80088ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b28c:	e028      	b.n	800b2e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b28e:	4b09      	ldr	r3, [pc, #36]	@ (800b2b4 <UART_SetConfig+0xc2c>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f003 0320 	and.w	r3, r3, #32
 800b296:	2b00      	cmp	r3, #0
 800b298:	d012      	beq.n	800b2c0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b29a:	4b06      	ldr	r3, [pc, #24]	@ (800b2b4 <UART_SetConfig+0xc2c>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	08db      	lsrs	r3, r3, #3
 800b2a0:	f003 0303 	and.w	r3, r3, #3
 800b2a4:	4a04      	ldr	r2, [pc, #16]	@ (800b2b8 <UART_SetConfig+0xc30>)
 800b2a6:	fa22 f303 	lsr.w	r3, r2, r3
 800b2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b2ac:	e018      	b.n	800b2e0 <UART_SetConfig+0xc58>
 800b2ae:	bf00      	nop
 800b2b0:	0800c5f4 	.word	0x0800c5f4
 800b2b4:	58024400 	.word	0x58024400
 800b2b8:	03d09000 	.word	0x03d09000
 800b2bc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b2c0:	4b24      	ldr	r3, [pc, #144]	@ (800b354 <UART_SetConfig+0xccc>)
 800b2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2c4:	e00c      	b.n	800b2e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b2c6:	4b24      	ldr	r3, [pc, #144]	@ (800b358 <UART_SetConfig+0xcd0>)
 800b2c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2ca:	e009      	b.n	800b2e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2d2:	e005      	b.n	800b2e0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b2de:	bf00      	nop
    }

    if (pclk != 0U)
 800b2e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d021      	beq.n	800b32a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2ea:	4a1c      	ldr	r2, [pc, #112]	@ (800b35c <UART_SetConfig+0xcd4>)
 800b2ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2f4:	fbb3 f2f2 	udiv	r2, r3, r2
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	085b      	lsrs	r3, r3, #1
 800b2fe:	441a      	add	r2, r3
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	fbb2 f3f3 	udiv	r3, r2, r3
 800b308:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b30c:	2b0f      	cmp	r3, #15
 800b30e:	d909      	bls.n	800b324 <UART_SetConfig+0xc9c>
 800b310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b312:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b316:	d205      	bcs.n	800b324 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b31a:	b29a      	uxth	r2, r3
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	60da      	str	r2, [r3, #12]
 800b322:	e002      	b.n	800b32a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	2201      	movs	r2, #1
 800b32e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	2201      	movs	r2, #1
 800b336:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	2200      	movs	r2, #0
 800b33e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	2200      	movs	r2, #0
 800b344:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b346:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3748      	adds	r7, #72	@ 0x48
 800b34e:	46bd      	mov	sp, r7
 800b350:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b354:	03d09000 	.word	0x03d09000
 800b358:	003d0900 	.word	0x003d0900
 800b35c:	0800c5f4 	.word	0x0800c5f4

0800b360 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b360:	b480      	push	{r7}
 800b362:	b083      	sub	sp, #12
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b36c:	f003 0308 	and.w	r3, r3, #8
 800b370:	2b00      	cmp	r3, #0
 800b372:	d00a      	beq.n	800b38a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	430a      	orrs	r2, r1
 800b388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b38e:	f003 0301 	and.w	r3, r3, #1
 800b392:	2b00      	cmp	r3, #0
 800b394:	d00a      	beq.n	800b3ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	430a      	orrs	r2, r1
 800b3aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3b0:	f003 0302 	and.w	r3, r3, #2
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00a      	beq.n	800b3ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	430a      	orrs	r2, r1
 800b3cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3d2:	f003 0304 	and.w	r3, r3, #4
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d00a      	beq.n	800b3f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	430a      	orrs	r2, r1
 800b3ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3f4:	f003 0310 	and.w	r3, r3, #16
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d00a      	beq.n	800b412 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	430a      	orrs	r2, r1
 800b410:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b416:	f003 0320 	and.w	r3, r3, #32
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d00a      	beq.n	800b434 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	689b      	ldr	r3, [r3, #8]
 800b424:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	430a      	orrs	r2, r1
 800b432:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d01a      	beq.n	800b476 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	430a      	orrs	r2, r1
 800b454:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b45a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b45e:	d10a      	bne.n	800b476 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	430a      	orrs	r2, r1
 800b474:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b47a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d00a      	beq.n	800b498 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	430a      	orrs	r2, r1
 800b496:	605a      	str	r2, [r3, #4]
  }
}
 800b498:	bf00      	nop
 800b49a:	370c      	adds	r7, #12
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b098      	sub	sp, #96	@ 0x60
 800b4a8:	af02      	add	r7, sp, #8
 800b4aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b4b4:	f7f6 fe08 	bl	80020c8 <HAL_GetTick>
 800b4b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f003 0308 	and.w	r3, r3, #8
 800b4c4:	2b08      	cmp	r3, #8
 800b4c6:	d12f      	bne.n	800b528 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b4cc:	9300      	str	r3, [sp, #0]
 800b4ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 f88e 	bl	800b5f8 <UART_WaitOnFlagUntilTimeout>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d022      	beq.n	800b528 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ea:	e853 3f00 	ldrex	r3, [r3]
 800b4ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b4f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b4f6:	653b      	str	r3, [r7, #80]	@ 0x50
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b500:	647b      	str	r3, [r7, #68]	@ 0x44
 800b502:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b504:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b506:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b508:	e841 2300 	strex	r3, r2, [r1]
 800b50c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b50e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b510:	2b00      	cmp	r3, #0
 800b512:	d1e6      	bne.n	800b4e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2220      	movs	r2, #32
 800b518:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2200      	movs	r2, #0
 800b520:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b524:	2303      	movs	r3, #3
 800b526:	e063      	b.n	800b5f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f003 0304 	and.w	r3, r3, #4
 800b532:	2b04      	cmp	r3, #4
 800b534:	d149      	bne.n	800b5ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b536:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b53a:	9300      	str	r3, [sp, #0]
 800b53c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b53e:	2200      	movs	r2, #0
 800b540:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 f857 	bl	800b5f8 <UART_WaitOnFlagUntilTimeout>
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d03c      	beq.n	800b5ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b558:	e853 3f00 	ldrex	r3, [r3]
 800b55c:	623b      	str	r3, [r7, #32]
   return(result);
 800b55e:	6a3b      	ldr	r3, [r7, #32]
 800b560:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b564:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	461a      	mov	r2, r3
 800b56c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b56e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b570:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b572:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b574:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b576:	e841 2300 	strex	r3, r2, [r1]
 800b57a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b57c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d1e6      	bne.n	800b550 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	3308      	adds	r3, #8
 800b588:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	e853 3f00 	ldrex	r3, [r3]
 800b590:	60fb      	str	r3, [r7, #12]
   return(result);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f023 0301 	bic.w	r3, r3, #1
 800b598:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	3308      	adds	r3, #8
 800b5a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b5a2:	61fa      	str	r2, [r7, #28]
 800b5a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a6:	69b9      	ldr	r1, [r7, #24]
 800b5a8:	69fa      	ldr	r2, [r7, #28]
 800b5aa:	e841 2300 	strex	r3, r2, [r1]
 800b5ae:	617b      	str	r3, [r7, #20]
   return(result);
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d1e5      	bne.n	800b582 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2220      	movs	r2, #32
 800b5ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5c6:	2303      	movs	r3, #3
 800b5c8:	e012      	b.n	800b5f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2220      	movs	r2, #32
 800b5ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2220      	movs	r2, #32
 800b5d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b5ee:	2300      	movs	r3, #0
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3758      	adds	r7, #88	@ 0x58
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b084      	sub	sp, #16
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	60b9      	str	r1, [r7, #8]
 800b602:	603b      	str	r3, [r7, #0]
 800b604:	4613      	mov	r3, r2
 800b606:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b608:	e04f      	b.n	800b6aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b60a:	69bb      	ldr	r3, [r7, #24]
 800b60c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b610:	d04b      	beq.n	800b6aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b612:	f7f6 fd59 	bl	80020c8 <HAL_GetTick>
 800b616:	4602      	mov	r2, r0
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	1ad3      	subs	r3, r2, r3
 800b61c:	69ba      	ldr	r2, [r7, #24]
 800b61e:	429a      	cmp	r2, r3
 800b620:	d302      	bcc.n	800b628 <UART_WaitOnFlagUntilTimeout+0x30>
 800b622:	69bb      	ldr	r3, [r7, #24]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d101      	bne.n	800b62c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b628:	2303      	movs	r3, #3
 800b62a:	e04e      	b.n	800b6ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f003 0304 	and.w	r3, r3, #4
 800b636:	2b00      	cmp	r3, #0
 800b638:	d037      	beq.n	800b6aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	2b80      	cmp	r3, #128	@ 0x80
 800b63e:	d034      	beq.n	800b6aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	2b40      	cmp	r3, #64	@ 0x40
 800b644:	d031      	beq.n	800b6aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	69db      	ldr	r3, [r3, #28]
 800b64c:	f003 0308 	and.w	r3, r3, #8
 800b650:	2b08      	cmp	r3, #8
 800b652:	d110      	bne.n	800b676 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2208      	movs	r2, #8
 800b65a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b65c:	68f8      	ldr	r0, [r7, #12]
 800b65e:	f000 f839 	bl	800b6d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2208      	movs	r2, #8
 800b666:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2200      	movs	r2, #0
 800b66e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b672:	2301      	movs	r3, #1
 800b674:	e029      	b.n	800b6ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	69db      	ldr	r3, [r3, #28]
 800b67c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b680:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b684:	d111      	bne.n	800b6aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b68e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b690:	68f8      	ldr	r0, [r7, #12]
 800b692:	f000 f81f 	bl	800b6d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2220      	movs	r2, #32
 800b69a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b6a6:	2303      	movs	r3, #3
 800b6a8:	e00f      	b.n	800b6ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	69da      	ldr	r2, [r3, #28]
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	4013      	ands	r3, r2
 800b6b4:	68ba      	ldr	r2, [r7, #8]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	bf0c      	ite	eq
 800b6ba:	2301      	moveq	r3, #1
 800b6bc:	2300      	movne	r3, #0
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	79fb      	ldrb	r3, [r7, #7]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d0a0      	beq.n	800b60a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b6c8:	2300      	movs	r3, #0
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3710      	adds	r7, #16
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
	...

0800b6d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b095      	sub	sp, #84	@ 0x54
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6e4:	e853 3f00 	ldrex	r3, [r3]
 800b6e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b6ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b6f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6fa:	643b      	str	r3, [r7, #64]	@ 0x40
 800b6fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b700:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b702:	e841 2300 	strex	r3, r2, [r1]
 800b706:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d1e6      	bne.n	800b6dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	3308      	adds	r3, #8
 800b714:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b716:	6a3b      	ldr	r3, [r7, #32]
 800b718:	e853 3f00 	ldrex	r3, [r3]
 800b71c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b71e:	69fa      	ldr	r2, [r7, #28]
 800b720:	4b1e      	ldr	r3, [pc, #120]	@ (800b79c <UART_EndRxTransfer+0xc8>)
 800b722:	4013      	ands	r3, r2
 800b724:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	3308      	adds	r3, #8
 800b72c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b72e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b730:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b732:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b734:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b736:	e841 2300 	strex	r3, r2, [r1]
 800b73a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d1e5      	bne.n	800b70e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b746:	2b01      	cmp	r3, #1
 800b748:	d118      	bne.n	800b77c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	e853 3f00 	ldrex	r3, [r3]
 800b756:	60bb      	str	r3, [r7, #8]
   return(result);
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	f023 0310 	bic.w	r3, r3, #16
 800b75e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	461a      	mov	r2, r3
 800b766:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b768:	61bb      	str	r3, [r7, #24]
 800b76a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b76c:	6979      	ldr	r1, [r7, #20]
 800b76e:	69ba      	ldr	r2, [r7, #24]
 800b770:	e841 2300 	strex	r3, r2, [r1]
 800b774:	613b      	str	r3, [r7, #16]
   return(result);
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d1e6      	bne.n	800b74a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2220      	movs	r2, #32
 800b780:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2200      	movs	r2, #0
 800b788:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2200      	movs	r2, #0
 800b78e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b790:	bf00      	nop
 800b792:	3754      	adds	r7, #84	@ 0x54
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr
 800b79c:	effffffe 	.word	0xeffffffe

0800b7a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b085      	sub	sp, #20
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	d101      	bne.n	800b7b6 <HAL_UARTEx_DisableFifoMode+0x16>
 800b7b2:	2302      	movs	r3, #2
 800b7b4:	e027      	b.n	800b806 <HAL_UARTEx_DisableFifoMode+0x66>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2224      	movs	r2, #36	@ 0x24
 800b7c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f022 0201 	bic.w	r2, r2, #1
 800b7dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b7e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	68fa      	ldr	r2, [r7, #12]
 800b7f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2220      	movs	r2, #32
 800b7f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2200      	movs	r2, #0
 800b800:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b804:	2300      	movs	r3, #0
}
 800b806:	4618      	mov	r0, r3
 800b808:	3714      	adds	r7, #20
 800b80a:	46bd      	mov	sp, r7
 800b80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b810:	4770      	bx	lr

0800b812 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b812:	b580      	push	{r7, lr}
 800b814:	b084      	sub	sp, #16
 800b816:	af00      	add	r7, sp, #0
 800b818:	6078      	str	r0, [r7, #4]
 800b81a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b822:	2b01      	cmp	r3, #1
 800b824:	d101      	bne.n	800b82a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b826:	2302      	movs	r3, #2
 800b828:	e02d      	b.n	800b886 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2201      	movs	r2, #1
 800b82e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2224      	movs	r2, #36	@ 0x24
 800b836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f022 0201 	bic.w	r2, r2, #1
 800b850:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	689b      	ldr	r3, [r3, #8]
 800b858:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	683a      	ldr	r2, [r7, #0]
 800b862:	430a      	orrs	r2, r1
 800b864:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 f850 	bl	800b90c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	68fa      	ldr	r2, [r7, #12]
 800b872:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2220      	movs	r2, #32
 800b878:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2200      	movs	r2, #0
 800b880:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b884:	2300      	movs	r3, #0
}
 800b886:	4618      	mov	r0, r3
 800b888:	3710      	adds	r7, #16
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}

0800b88e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b88e:	b580      	push	{r7, lr}
 800b890:	b084      	sub	sp, #16
 800b892:	af00      	add	r7, sp, #0
 800b894:	6078      	str	r0, [r7, #4]
 800b896:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d101      	bne.n	800b8a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b8a2:	2302      	movs	r3, #2
 800b8a4:	e02d      	b.n	800b902 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2224      	movs	r2, #36	@ 0x24
 800b8b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	681a      	ldr	r2, [r3, #0]
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f022 0201 	bic.w	r2, r2, #1
 800b8cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	689b      	ldr	r3, [r3, #8]
 800b8d4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	683a      	ldr	r2, [r7, #0]
 800b8de:	430a      	orrs	r2, r1
 800b8e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f000 f812 	bl	800b90c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	68fa      	ldr	r2, [r7, #12]
 800b8ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2220      	movs	r2, #32
 800b8f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b900:	2300      	movs	r3, #0
}
 800b902:	4618      	mov	r0, r3
 800b904:	3710      	adds	r7, #16
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
	...

0800b90c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b085      	sub	sp, #20
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d108      	bne.n	800b92e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2201      	movs	r2, #1
 800b920:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2201      	movs	r2, #1
 800b928:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b92c:	e031      	b.n	800b992 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b92e:	2310      	movs	r3, #16
 800b930:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b932:	2310      	movs	r3, #16
 800b934:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	689b      	ldr	r3, [r3, #8]
 800b93c:	0e5b      	lsrs	r3, r3, #25
 800b93e:	b2db      	uxtb	r3, r3
 800b940:	f003 0307 	and.w	r3, r3, #7
 800b944:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	0f5b      	lsrs	r3, r3, #29
 800b94e:	b2db      	uxtb	r3, r3
 800b950:	f003 0307 	and.w	r3, r3, #7
 800b954:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b956:	7bbb      	ldrb	r3, [r7, #14]
 800b958:	7b3a      	ldrb	r2, [r7, #12]
 800b95a:	4911      	ldr	r1, [pc, #68]	@ (800b9a0 <UARTEx_SetNbDataToProcess+0x94>)
 800b95c:	5c8a      	ldrb	r2, [r1, r2]
 800b95e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b962:	7b3a      	ldrb	r2, [r7, #12]
 800b964:	490f      	ldr	r1, [pc, #60]	@ (800b9a4 <UARTEx_SetNbDataToProcess+0x98>)
 800b966:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b968:	fb93 f3f2 	sdiv	r3, r3, r2
 800b96c:	b29a      	uxth	r2, r3
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b974:	7bfb      	ldrb	r3, [r7, #15]
 800b976:	7b7a      	ldrb	r2, [r7, #13]
 800b978:	4909      	ldr	r1, [pc, #36]	@ (800b9a0 <UARTEx_SetNbDataToProcess+0x94>)
 800b97a:	5c8a      	ldrb	r2, [r1, r2]
 800b97c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b980:	7b7a      	ldrb	r2, [r7, #13]
 800b982:	4908      	ldr	r1, [pc, #32]	@ (800b9a4 <UARTEx_SetNbDataToProcess+0x98>)
 800b984:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b986:	fb93 f3f2 	sdiv	r3, r3, r2
 800b98a:	b29a      	uxth	r2, r3
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b992:	bf00      	nop
 800b994:	3714      	adds	r7, #20
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop
 800b9a0:	0800c60c 	.word	0x0800c60c
 800b9a4:	0800c614 	.word	0x0800c614

0800b9a8 <siprintf>:
 800b9a8:	b40e      	push	{r1, r2, r3}
 800b9aa:	b500      	push	{lr}
 800b9ac:	b09c      	sub	sp, #112	@ 0x70
 800b9ae:	ab1d      	add	r3, sp, #116	@ 0x74
 800b9b0:	9002      	str	r0, [sp, #8]
 800b9b2:	9006      	str	r0, [sp, #24]
 800b9b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b9b8:	4809      	ldr	r0, [pc, #36]	@ (800b9e0 <siprintf+0x38>)
 800b9ba:	9107      	str	r1, [sp, #28]
 800b9bc:	9104      	str	r1, [sp, #16]
 800b9be:	4909      	ldr	r1, [pc, #36]	@ (800b9e4 <siprintf+0x3c>)
 800b9c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9c4:	9105      	str	r1, [sp, #20]
 800b9c6:	6800      	ldr	r0, [r0, #0]
 800b9c8:	9301      	str	r3, [sp, #4]
 800b9ca:	a902      	add	r1, sp, #8
 800b9cc:	f000 f9a2 	bl	800bd14 <_svfiprintf_r>
 800b9d0:	9b02      	ldr	r3, [sp, #8]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	701a      	strb	r2, [r3, #0]
 800b9d6:	b01c      	add	sp, #112	@ 0x70
 800b9d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9dc:	b003      	add	sp, #12
 800b9de:	4770      	bx	lr
 800b9e0:	24000020 	.word	0x24000020
 800b9e4:	ffff0208 	.word	0xffff0208

0800b9e8 <memset>:
 800b9e8:	4402      	add	r2, r0
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d100      	bne.n	800b9f2 <memset+0xa>
 800b9f0:	4770      	bx	lr
 800b9f2:	f803 1b01 	strb.w	r1, [r3], #1
 800b9f6:	e7f9      	b.n	800b9ec <memset+0x4>

0800b9f8 <__errno>:
 800b9f8:	4b01      	ldr	r3, [pc, #4]	@ (800ba00 <__errno+0x8>)
 800b9fa:	6818      	ldr	r0, [r3, #0]
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop
 800ba00:	24000020 	.word	0x24000020

0800ba04 <__libc_init_array>:
 800ba04:	b570      	push	{r4, r5, r6, lr}
 800ba06:	4d0d      	ldr	r5, [pc, #52]	@ (800ba3c <__libc_init_array+0x38>)
 800ba08:	4c0d      	ldr	r4, [pc, #52]	@ (800ba40 <__libc_init_array+0x3c>)
 800ba0a:	1b64      	subs	r4, r4, r5
 800ba0c:	10a4      	asrs	r4, r4, #2
 800ba0e:	2600      	movs	r6, #0
 800ba10:	42a6      	cmp	r6, r4
 800ba12:	d109      	bne.n	800ba28 <__libc_init_array+0x24>
 800ba14:	4d0b      	ldr	r5, [pc, #44]	@ (800ba44 <__libc_init_array+0x40>)
 800ba16:	4c0c      	ldr	r4, [pc, #48]	@ (800ba48 <__libc_init_array+0x44>)
 800ba18:	f000 fc66 	bl	800c2e8 <_init>
 800ba1c:	1b64      	subs	r4, r4, r5
 800ba1e:	10a4      	asrs	r4, r4, #2
 800ba20:	2600      	movs	r6, #0
 800ba22:	42a6      	cmp	r6, r4
 800ba24:	d105      	bne.n	800ba32 <__libc_init_array+0x2e>
 800ba26:	bd70      	pop	{r4, r5, r6, pc}
 800ba28:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba2c:	4798      	blx	r3
 800ba2e:	3601      	adds	r6, #1
 800ba30:	e7ee      	b.n	800ba10 <__libc_init_array+0xc>
 800ba32:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba36:	4798      	blx	r3
 800ba38:	3601      	adds	r6, #1
 800ba3a:	e7f2      	b.n	800ba22 <__libc_init_array+0x1e>
 800ba3c:	0800c658 	.word	0x0800c658
 800ba40:	0800c658 	.word	0x0800c658
 800ba44:	0800c658 	.word	0x0800c658
 800ba48:	0800c65c 	.word	0x0800c65c

0800ba4c <__retarget_lock_acquire_recursive>:
 800ba4c:	4770      	bx	lr

0800ba4e <__retarget_lock_release_recursive>:
 800ba4e:	4770      	bx	lr

0800ba50 <memcpy>:
 800ba50:	440a      	add	r2, r1
 800ba52:	4291      	cmp	r1, r2
 800ba54:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba58:	d100      	bne.n	800ba5c <memcpy+0xc>
 800ba5a:	4770      	bx	lr
 800ba5c:	b510      	push	{r4, lr}
 800ba5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba66:	4291      	cmp	r1, r2
 800ba68:	d1f9      	bne.n	800ba5e <memcpy+0xe>
 800ba6a:	bd10      	pop	{r4, pc}

0800ba6c <_free_r>:
 800ba6c:	b538      	push	{r3, r4, r5, lr}
 800ba6e:	4605      	mov	r5, r0
 800ba70:	2900      	cmp	r1, #0
 800ba72:	d041      	beq.n	800baf8 <_free_r+0x8c>
 800ba74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba78:	1f0c      	subs	r4, r1, #4
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	bfb8      	it	lt
 800ba7e:	18e4      	addlt	r4, r4, r3
 800ba80:	f000 f8e0 	bl	800bc44 <__malloc_lock>
 800ba84:	4a1d      	ldr	r2, [pc, #116]	@ (800bafc <_free_r+0x90>)
 800ba86:	6813      	ldr	r3, [r2, #0]
 800ba88:	b933      	cbnz	r3, 800ba98 <_free_r+0x2c>
 800ba8a:	6063      	str	r3, [r4, #4]
 800ba8c:	6014      	str	r4, [r2, #0]
 800ba8e:	4628      	mov	r0, r5
 800ba90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba94:	f000 b8dc 	b.w	800bc50 <__malloc_unlock>
 800ba98:	42a3      	cmp	r3, r4
 800ba9a:	d908      	bls.n	800baae <_free_r+0x42>
 800ba9c:	6820      	ldr	r0, [r4, #0]
 800ba9e:	1821      	adds	r1, r4, r0
 800baa0:	428b      	cmp	r3, r1
 800baa2:	bf01      	itttt	eq
 800baa4:	6819      	ldreq	r1, [r3, #0]
 800baa6:	685b      	ldreq	r3, [r3, #4]
 800baa8:	1809      	addeq	r1, r1, r0
 800baaa:	6021      	streq	r1, [r4, #0]
 800baac:	e7ed      	b.n	800ba8a <_free_r+0x1e>
 800baae:	461a      	mov	r2, r3
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	b10b      	cbz	r3, 800bab8 <_free_r+0x4c>
 800bab4:	42a3      	cmp	r3, r4
 800bab6:	d9fa      	bls.n	800baae <_free_r+0x42>
 800bab8:	6811      	ldr	r1, [r2, #0]
 800baba:	1850      	adds	r0, r2, r1
 800babc:	42a0      	cmp	r0, r4
 800babe:	d10b      	bne.n	800bad8 <_free_r+0x6c>
 800bac0:	6820      	ldr	r0, [r4, #0]
 800bac2:	4401      	add	r1, r0
 800bac4:	1850      	adds	r0, r2, r1
 800bac6:	4283      	cmp	r3, r0
 800bac8:	6011      	str	r1, [r2, #0]
 800baca:	d1e0      	bne.n	800ba8e <_free_r+0x22>
 800bacc:	6818      	ldr	r0, [r3, #0]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	6053      	str	r3, [r2, #4]
 800bad2:	4408      	add	r0, r1
 800bad4:	6010      	str	r0, [r2, #0]
 800bad6:	e7da      	b.n	800ba8e <_free_r+0x22>
 800bad8:	d902      	bls.n	800bae0 <_free_r+0x74>
 800bada:	230c      	movs	r3, #12
 800badc:	602b      	str	r3, [r5, #0]
 800bade:	e7d6      	b.n	800ba8e <_free_r+0x22>
 800bae0:	6820      	ldr	r0, [r4, #0]
 800bae2:	1821      	adds	r1, r4, r0
 800bae4:	428b      	cmp	r3, r1
 800bae6:	bf04      	itt	eq
 800bae8:	6819      	ldreq	r1, [r3, #0]
 800baea:	685b      	ldreq	r3, [r3, #4]
 800baec:	6063      	str	r3, [r4, #4]
 800baee:	bf04      	itt	eq
 800baf0:	1809      	addeq	r1, r1, r0
 800baf2:	6021      	streq	r1, [r4, #0]
 800baf4:	6054      	str	r4, [r2, #4]
 800baf6:	e7ca      	b.n	800ba8e <_free_r+0x22>
 800baf8:	bd38      	pop	{r3, r4, r5, pc}
 800bafa:	bf00      	nop
 800bafc:	240006fc 	.word	0x240006fc

0800bb00 <sbrk_aligned>:
 800bb00:	b570      	push	{r4, r5, r6, lr}
 800bb02:	4e0f      	ldr	r6, [pc, #60]	@ (800bb40 <sbrk_aligned+0x40>)
 800bb04:	460c      	mov	r4, r1
 800bb06:	6831      	ldr	r1, [r6, #0]
 800bb08:	4605      	mov	r5, r0
 800bb0a:	b911      	cbnz	r1, 800bb12 <sbrk_aligned+0x12>
 800bb0c:	f000 fba6 	bl	800c25c <_sbrk_r>
 800bb10:	6030      	str	r0, [r6, #0]
 800bb12:	4621      	mov	r1, r4
 800bb14:	4628      	mov	r0, r5
 800bb16:	f000 fba1 	bl	800c25c <_sbrk_r>
 800bb1a:	1c43      	adds	r3, r0, #1
 800bb1c:	d103      	bne.n	800bb26 <sbrk_aligned+0x26>
 800bb1e:	f04f 34ff 	mov.w	r4, #4294967295
 800bb22:	4620      	mov	r0, r4
 800bb24:	bd70      	pop	{r4, r5, r6, pc}
 800bb26:	1cc4      	adds	r4, r0, #3
 800bb28:	f024 0403 	bic.w	r4, r4, #3
 800bb2c:	42a0      	cmp	r0, r4
 800bb2e:	d0f8      	beq.n	800bb22 <sbrk_aligned+0x22>
 800bb30:	1a21      	subs	r1, r4, r0
 800bb32:	4628      	mov	r0, r5
 800bb34:	f000 fb92 	bl	800c25c <_sbrk_r>
 800bb38:	3001      	adds	r0, #1
 800bb3a:	d1f2      	bne.n	800bb22 <sbrk_aligned+0x22>
 800bb3c:	e7ef      	b.n	800bb1e <sbrk_aligned+0x1e>
 800bb3e:	bf00      	nop
 800bb40:	240006f8 	.word	0x240006f8

0800bb44 <_malloc_r>:
 800bb44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb48:	1ccd      	adds	r5, r1, #3
 800bb4a:	f025 0503 	bic.w	r5, r5, #3
 800bb4e:	3508      	adds	r5, #8
 800bb50:	2d0c      	cmp	r5, #12
 800bb52:	bf38      	it	cc
 800bb54:	250c      	movcc	r5, #12
 800bb56:	2d00      	cmp	r5, #0
 800bb58:	4606      	mov	r6, r0
 800bb5a:	db01      	blt.n	800bb60 <_malloc_r+0x1c>
 800bb5c:	42a9      	cmp	r1, r5
 800bb5e:	d904      	bls.n	800bb6a <_malloc_r+0x26>
 800bb60:	230c      	movs	r3, #12
 800bb62:	6033      	str	r3, [r6, #0]
 800bb64:	2000      	movs	r0, #0
 800bb66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bc40 <_malloc_r+0xfc>
 800bb6e:	f000 f869 	bl	800bc44 <__malloc_lock>
 800bb72:	f8d8 3000 	ldr.w	r3, [r8]
 800bb76:	461c      	mov	r4, r3
 800bb78:	bb44      	cbnz	r4, 800bbcc <_malloc_r+0x88>
 800bb7a:	4629      	mov	r1, r5
 800bb7c:	4630      	mov	r0, r6
 800bb7e:	f7ff ffbf 	bl	800bb00 <sbrk_aligned>
 800bb82:	1c43      	adds	r3, r0, #1
 800bb84:	4604      	mov	r4, r0
 800bb86:	d158      	bne.n	800bc3a <_malloc_r+0xf6>
 800bb88:	f8d8 4000 	ldr.w	r4, [r8]
 800bb8c:	4627      	mov	r7, r4
 800bb8e:	2f00      	cmp	r7, #0
 800bb90:	d143      	bne.n	800bc1a <_malloc_r+0xd6>
 800bb92:	2c00      	cmp	r4, #0
 800bb94:	d04b      	beq.n	800bc2e <_malloc_r+0xea>
 800bb96:	6823      	ldr	r3, [r4, #0]
 800bb98:	4639      	mov	r1, r7
 800bb9a:	4630      	mov	r0, r6
 800bb9c:	eb04 0903 	add.w	r9, r4, r3
 800bba0:	f000 fb5c 	bl	800c25c <_sbrk_r>
 800bba4:	4581      	cmp	r9, r0
 800bba6:	d142      	bne.n	800bc2e <_malloc_r+0xea>
 800bba8:	6821      	ldr	r1, [r4, #0]
 800bbaa:	1a6d      	subs	r5, r5, r1
 800bbac:	4629      	mov	r1, r5
 800bbae:	4630      	mov	r0, r6
 800bbb0:	f7ff ffa6 	bl	800bb00 <sbrk_aligned>
 800bbb4:	3001      	adds	r0, #1
 800bbb6:	d03a      	beq.n	800bc2e <_malloc_r+0xea>
 800bbb8:	6823      	ldr	r3, [r4, #0]
 800bbba:	442b      	add	r3, r5
 800bbbc:	6023      	str	r3, [r4, #0]
 800bbbe:	f8d8 3000 	ldr.w	r3, [r8]
 800bbc2:	685a      	ldr	r2, [r3, #4]
 800bbc4:	bb62      	cbnz	r2, 800bc20 <_malloc_r+0xdc>
 800bbc6:	f8c8 7000 	str.w	r7, [r8]
 800bbca:	e00f      	b.n	800bbec <_malloc_r+0xa8>
 800bbcc:	6822      	ldr	r2, [r4, #0]
 800bbce:	1b52      	subs	r2, r2, r5
 800bbd0:	d420      	bmi.n	800bc14 <_malloc_r+0xd0>
 800bbd2:	2a0b      	cmp	r2, #11
 800bbd4:	d917      	bls.n	800bc06 <_malloc_r+0xc2>
 800bbd6:	1961      	adds	r1, r4, r5
 800bbd8:	42a3      	cmp	r3, r4
 800bbda:	6025      	str	r5, [r4, #0]
 800bbdc:	bf18      	it	ne
 800bbde:	6059      	strne	r1, [r3, #4]
 800bbe0:	6863      	ldr	r3, [r4, #4]
 800bbe2:	bf08      	it	eq
 800bbe4:	f8c8 1000 	streq.w	r1, [r8]
 800bbe8:	5162      	str	r2, [r4, r5]
 800bbea:	604b      	str	r3, [r1, #4]
 800bbec:	4630      	mov	r0, r6
 800bbee:	f000 f82f 	bl	800bc50 <__malloc_unlock>
 800bbf2:	f104 000b 	add.w	r0, r4, #11
 800bbf6:	1d23      	adds	r3, r4, #4
 800bbf8:	f020 0007 	bic.w	r0, r0, #7
 800bbfc:	1ac2      	subs	r2, r0, r3
 800bbfe:	bf1c      	itt	ne
 800bc00:	1a1b      	subne	r3, r3, r0
 800bc02:	50a3      	strne	r3, [r4, r2]
 800bc04:	e7af      	b.n	800bb66 <_malloc_r+0x22>
 800bc06:	6862      	ldr	r2, [r4, #4]
 800bc08:	42a3      	cmp	r3, r4
 800bc0a:	bf0c      	ite	eq
 800bc0c:	f8c8 2000 	streq.w	r2, [r8]
 800bc10:	605a      	strne	r2, [r3, #4]
 800bc12:	e7eb      	b.n	800bbec <_malloc_r+0xa8>
 800bc14:	4623      	mov	r3, r4
 800bc16:	6864      	ldr	r4, [r4, #4]
 800bc18:	e7ae      	b.n	800bb78 <_malloc_r+0x34>
 800bc1a:	463c      	mov	r4, r7
 800bc1c:	687f      	ldr	r7, [r7, #4]
 800bc1e:	e7b6      	b.n	800bb8e <_malloc_r+0x4a>
 800bc20:	461a      	mov	r2, r3
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	42a3      	cmp	r3, r4
 800bc26:	d1fb      	bne.n	800bc20 <_malloc_r+0xdc>
 800bc28:	2300      	movs	r3, #0
 800bc2a:	6053      	str	r3, [r2, #4]
 800bc2c:	e7de      	b.n	800bbec <_malloc_r+0xa8>
 800bc2e:	230c      	movs	r3, #12
 800bc30:	6033      	str	r3, [r6, #0]
 800bc32:	4630      	mov	r0, r6
 800bc34:	f000 f80c 	bl	800bc50 <__malloc_unlock>
 800bc38:	e794      	b.n	800bb64 <_malloc_r+0x20>
 800bc3a:	6005      	str	r5, [r0, #0]
 800bc3c:	e7d6      	b.n	800bbec <_malloc_r+0xa8>
 800bc3e:	bf00      	nop
 800bc40:	240006fc 	.word	0x240006fc

0800bc44 <__malloc_lock>:
 800bc44:	4801      	ldr	r0, [pc, #4]	@ (800bc4c <__malloc_lock+0x8>)
 800bc46:	f7ff bf01 	b.w	800ba4c <__retarget_lock_acquire_recursive>
 800bc4a:	bf00      	nop
 800bc4c:	240006f4 	.word	0x240006f4

0800bc50 <__malloc_unlock>:
 800bc50:	4801      	ldr	r0, [pc, #4]	@ (800bc58 <__malloc_unlock+0x8>)
 800bc52:	f7ff befc 	b.w	800ba4e <__retarget_lock_release_recursive>
 800bc56:	bf00      	nop
 800bc58:	240006f4 	.word	0x240006f4

0800bc5c <__ssputs_r>:
 800bc5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc60:	688e      	ldr	r6, [r1, #8]
 800bc62:	461f      	mov	r7, r3
 800bc64:	42be      	cmp	r6, r7
 800bc66:	680b      	ldr	r3, [r1, #0]
 800bc68:	4682      	mov	sl, r0
 800bc6a:	460c      	mov	r4, r1
 800bc6c:	4690      	mov	r8, r2
 800bc6e:	d82d      	bhi.n	800bccc <__ssputs_r+0x70>
 800bc70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bc78:	d026      	beq.n	800bcc8 <__ssputs_r+0x6c>
 800bc7a:	6965      	ldr	r5, [r4, #20]
 800bc7c:	6909      	ldr	r1, [r1, #16]
 800bc7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc82:	eba3 0901 	sub.w	r9, r3, r1
 800bc86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc8a:	1c7b      	adds	r3, r7, #1
 800bc8c:	444b      	add	r3, r9
 800bc8e:	106d      	asrs	r5, r5, #1
 800bc90:	429d      	cmp	r5, r3
 800bc92:	bf38      	it	cc
 800bc94:	461d      	movcc	r5, r3
 800bc96:	0553      	lsls	r3, r2, #21
 800bc98:	d527      	bpl.n	800bcea <__ssputs_r+0x8e>
 800bc9a:	4629      	mov	r1, r5
 800bc9c:	f7ff ff52 	bl	800bb44 <_malloc_r>
 800bca0:	4606      	mov	r6, r0
 800bca2:	b360      	cbz	r0, 800bcfe <__ssputs_r+0xa2>
 800bca4:	6921      	ldr	r1, [r4, #16]
 800bca6:	464a      	mov	r2, r9
 800bca8:	f7ff fed2 	bl	800ba50 <memcpy>
 800bcac:	89a3      	ldrh	r3, [r4, #12]
 800bcae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bcb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcb6:	81a3      	strh	r3, [r4, #12]
 800bcb8:	6126      	str	r6, [r4, #16]
 800bcba:	6165      	str	r5, [r4, #20]
 800bcbc:	444e      	add	r6, r9
 800bcbe:	eba5 0509 	sub.w	r5, r5, r9
 800bcc2:	6026      	str	r6, [r4, #0]
 800bcc4:	60a5      	str	r5, [r4, #8]
 800bcc6:	463e      	mov	r6, r7
 800bcc8:	42be      	cmp	r6, r7
 800bcca:	d900      	bls.n	800bcce <__ssputs_r+0x72>
 800bccc:	463e      	mov	r6, r7
 800bcce:	6820      	ldr	r0, [r4, #0]
 800bcd0:	4632      	mov	r2, r6
 800bcd2:	4641      	mov	r1, r8
 800bcd4:	f000 faa8 	bl	800c228 <memmove>
 800bcd8:	68a3      	ldr	r3, [r4, #8]
 800bcda:	1b9b      	subs	r3, r3, r6
 800bcdc:	60a3      	str	r3, [r4, #8]
 800bcde:	6823      	ldr	r3, [r4, #0]
 800bce0:	4433      	add	r3, r6
 800bce2:	6023      	str	r3, [r4, #0]
 800bce4:	2000      	movs	r0, #0
 800bce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcea:	462a      	mov	r2, r5
 800bcec:	f000 fac6 	bl	800c27c <_realloc_r>
 800bcf0:	4606      	mov	r6, r0
 800bcf2:	2800      	cmp	r0, #0
 800bcf4:	d1e0      	bne.n	800bcb8 <__ssputs_r+0x5c>
 800bcf6:	6921      	ldr	r1, [r4, #16]
 800bcf8:	4650      	mov	r0, sl
 800bcfa:	f7ff feb7 	bl	800ba6c <_free_r>
 800bcfe:	230c      	movs	r3, #12
 800bd00:	f8ca 3000 	str.w	r3, [sl]
 800bd04:	89a3      	ldrh	r3, [r4, #12]
 800bd06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd0a:	81a3      	strh	r3, [r4, #12]
 800bd0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd10:	e7e9      	b.n	800bce6 <__ssputs_r+0x8a>
	...

0800bd14 <_svfiprintf_r>:
 800bd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd18:	4698      	mov	r8, r3
 800bd1a:	898b      	ldrh	r3, [r1, #12]
 800bd1c:	061b      	lsls	r3, r3, #24
 800bd1e:	b09d      	sub	sp, #116	@ 0x74
 800bd20:	4607      	mov	r7, r0
 800bd22:	460d      	mov	r5, r1
 800bd24:	4614      	mov	r4, r2
 800bd26:	d510      	bpl.n	800bd4a <_svfiprintf_r+0x36>
 800bd28:	690b      	ldr	r3, [r1, #16]
 800bd2a:	b973      	cbnz	r3, 800bd4a <_svfiprintf_r+0x36>
 800bd2c:	2140      	movs	r1, #64	@ 0x40
 800bd2e:	f7ff ff09 	bl	800bb44 <_malloc_r>
 800bd32:	6028      	str	r0, [r5, #0]
 800bd34:	6128      	str	r0, [r5, #16]
 800bd36:	b930      	cbnz	r0, 800bd46 <_svfiprintf_r+0x32>
 800bd38:	230c      	movs	r3, #12
 800bd3a:	603b      	str	r3, [r7, #0]
 800bd3c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd40:	b01d      	add	sp, #116	@ 0x74
 800bd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd46:	2340      	movs	r3, #64	@ 0x40
 800bd48:	616b      	str	r3, [r5, #20]
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd4e:	2320      	movs	r3, #32
 800bd50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd54:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd58:	2330      	movs	r3, #48	@ 0x30
 800bd5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bef8 <_svfiprintf_r+0x1e4>
 800bd5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd62:	f04f 0901 	mov.w	r9, #1
 800bd66:	4623      	mov	r3, r4
 800bd68:	469a      	mov	sl, r3
 800bd6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd6e:	b10a      	cbz	r2, 800bd74 <_svfiprintf_r+0x60>
 800bd70:	2a25      	cmp	r2, #37	@ 0x25
 800bd72:	d1f9      	bne.n	800bd68 <_svfiprintf_r+0x54>
 800bd74:	ebba 0b04 	subs.w	fp, sl, r4
 800bd78:	d00b      	beq.n	800bd92 <_svfiprintf_r+0x7e>
 800bd7a:	465b      	mov	r3, fp
 800bd7c:	4622      	mov	r2, r4
 800bd7e:	4629      	mov	r1, r5
 800bd80:	4638      	mov	r0, r7
 800bd82:	f7ff ff6b 	bl	800bc5c <__ssputs_r>
 800bd86:	3001      	adds	r0, #1
 800bd88:	f000 80a7 	beq.w	800beda <_svfiprintf_r+0x1c6>
 800bd8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd8e:	445a      	add	r2, fp
 800bd90:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd92:	f89a 3000 	ldrb.w	r3, [sl]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	f000 809f 	beq.w	800beda <_svfiprintf_r+0x1c6>
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	f04f 32ff 	mov.w	r2, #4294967295
 800bda2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bda6:	f10a 0a01 	add.w	sl, sl, #1
 800bdaa:	9304      	str	r3, [sp, #16]
 800bdac:	9307      	str	r3, [sp, #28]
 800bdae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bdb2:	931a      	str	r3, [sp, #104]	@ 0x68
 800bdb4:	4654      	mov	r4, sl
 800bdb6:	2205      	movs	r2, #5
 800bdb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdbc:	484e      	ldr	r0, [pc, #312]	@ (800bef8 <_svfiprintf_r+0x1e4>)
 800bdbe:	f7f4 faaf 	bl	8000320 <memchr>
 800bdc2:	9a04      	ldr	r2, [sp, #16]
 800bdc4:	b9d8      	cbnz	r0, 800bdfe <_svfiprintf_r+0xea>
 800bdc6:	06d0      	lsls	r0, r2, #27
 800bdc8:	bf44      	itt	mi
 800bdca:	2320      	movmi	r3, #32
 800bdcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdd0:	0711      	lsls	r1, r2, #28
 800bdd2:	bf44      	itt	mi
 800bdd4:	232b      	movmi	r3, #43	@ 0x2b
 800bdd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdda:	f89a 3000 	ldrb.w	r3, [sl]
 800bdde:	2b2a      	cmp	r3, #42	@ 0x2a
 800bde0:	d015      	beq.n	800be0e <_svfiprintf_r+0xfa>
 800bde2:	9a07      	ldr	r2, [sp, #28]
 800bde4:	4654      	mov	r4, sl
 800bde6:	2000      	movs	r0, #0
 800bde8:	f04f 0c0a 	mov.w	ip, #10
 800bdec:	4621      	mov	r1, r4
 800bdee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdf2:	3b30      	subs	r3, #48	@ 0x30
 800bdf4:	2b09      	cmp	r3, #9
 800bdf6:	d94b      	bls.n	800be90 <_svfiprintf_r+0x17c>
 800bdf8:	b1b0      	cbz	r0, 800be28 <_svfiprintf_r+0x114>
 800bdfa:	9207      	str	r2, [sp, #28]
 800bdfc:	e014      	b.n	800be28 <_svfiprintf_r+0x114>
 800bdfe:	eba0 0308 	sub.w	r3, r0, r8
 800be02:	fa09 f303 	lsl.w	r3, r9, r3
 800be06:	4313      	orrs	r3, r2
 800be08:	9304      	str	r3, [sp, #16]
 800be0a:	46a2      	mov	sl, r4
 800be0c:	e7d2      	b.n	800bdb4 <_svfiprintf_r+0xa0>
 800be0e:	9b03      	ldr	r3, [sp, #12]
 800be10:	1d19      	adds	r1, r3, #4
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	9103      	str	r1, [sp, #12]
 800be16:	2b00      	cmp	r3, #0
 800be18:	bfbb      	ittet	lt
 800be1a:	425b      	neglt	r3, r3
 800be1c:	f042 0202 	orrlt.w	r2, r2, #2
 800be20:	9307      	strge	r3, [sp, #28]
 800be22:	9307      	strlt	r3, [sp, #28]
 800be24:	bfb8      	it	lt
 800be26:	9204      	strlt	r2, [sp, #16]
 800be28:	7823      	ldrb	r3, [r4, #0]
 800be2a:	2b2e      	cmp	r3, #46	@ 0x2e
 800be2c:	d10a      	bne.n	800be44 <_svfiprintf_r+0x130>
 800be2e:	7863      	ldrb	r3, [r4, #1]
 800be30:	2b2a      	cmp	r3, #42	@ 0x2a
 800be32:	d132      	bne.n	800be9a <_svfiprintf_r+0x186>
 800be34:	9b03      	ldr	r3, [sp, #12]
 800be36:	1d1a      	adds	r2, r3, #4
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	9203      	str	r2, [sp, #12]
 800be3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be40:	3402      	adds	r4, #2
 800be42:	9305      	str	r3, [sp, #20]
 800be44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bf08 <_svfiprintf_r+0x1f4>
 800be48:	7821      	ldrb	r1, [r4, #0]
 800be4a:	2203      	movs	r2, #3
 800be4c:	4650      	mov	r0, sl
 800be4e:	f7f4 fa67 	bl	8000320 <memchr>
 800be52:	b138      	cbz	r0, 800be64 <_svfiprintf_r+0x150>
 800be54:	9b04      	ldr	r3, [sp, #16]
 800be56:	eba0 000a 	sub.w	r0, r0, sl
 800be5a:	2240      	movs	r2, #64	@ 0x40
 800be5c:	4082      	lsls	r2, r0
 800be5e:	4313      	orrs	r3, r2
 800be60:	3401      	adds	r4, #1
 800be62:	9304      	str	r3, [sp, #16]
 800be64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be68:	4824      	ldr	r0, [pc, #144]	@ (800befc <_svfiprintf_r+0x1e8>)
 800be6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be6e:	2206      	movs	r2, #6
 800be70:	f7f4 fa56 	bl	8000320 <memchr>
 800be74:	2800      	cmp	r0, #0
 800be76:	d036      	beq.n	800bee6 <_svfiprintf_r+0x1d2>
 800be78:	4b21      	ldr	r3, [pc, #132]	@ (800bf00 <_svfiprintf_r+0x1ec>)
 800be7a:	bb1b      	cbnz	r3, 800bec4 <_svfiprintf_r+0x1b0>
 800be7c:	9b03      	ldr	r3, [sp, #12]
 800be7e:	3307      	adds	r3, #7
 800be80:	f023 0307 	bic.w	r3, r3, #7
 800be84:	3308      	adds	r3, #8
 800be86:	9303      	str	r3, [sp, #12]
 800be88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be8a:	4433      	add	r3, r6
 800be8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800be8e:	e76a      	b.n	800bd66 <_svfiprintf_r+0x52>
 800be90:	fb0c 3202 	mla	r2, ip, r2, r3
 800be94:	460c      	mov	r4, r1
 800be96:	2001      	movs	r0, #1
 800be98:	e7a8      	b.n	800bdec <_svfiprintf_r+0xd8>
 800be9a:	2300      	movs	r3, #0
 800be9c:	3401      	adds	r4, #1
 800be9e:	9305      	str	r3, [sp, #20]
 800bea0:	4619      	mov	r1, r3
 800bea2:	f04f 0c0a 	mov.w	ip, #10
 800bea6:	4620      	mov	r0, r4
 800bea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800beac:	3a30      	subs	r2, #48	@ 0x30
 800beae:	2a09      	cmp	r2, #9
 800beb0:	d903      	bls.n	800beba <_svfiprintf_r+0x1a6>
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d0c6      	beq.n	800be44 <_svfiprintf_r+0x130>
 800beb6:	9105      	str	r1, [sp, #20]
 800beb8:	e7c4      	b.n	800be44 <_svfiprintf_r+0x130>
 800beba:	fb0c 2101 	mla	r1, ip, r1, r2
 800bebe:	4604      	mov	r4, r0
 800bec0:	2301      	movs	r3, #1
 800bec2:	e7f0      	b.n	800bea6 <_svfiprintf_r+0x192>
 800bec4:	ab03      	add	r3, sp, #12
 800bec6:	9300      	str	r3, [sp, #0]
 800bec8:	462a      	mov	r2, r5
 800beca:	4b0e      	ldr	r3, [pc, #56]	@ (800bf04 <_svfiprintf_r+0x1f0>)
 800becc:	a904      	add	r1, sp, #16
 800bece:	4638      	mov	r0, r7
 800bed0:	f3af 8000 	nop.w
 800bed4:	1c42      	adds	r2, r0, #1
 800bed6:	4606      	mov	r6, r0
 800bed8:	d1d6      	bne.n	800be88 <_svfiprintf_r+0x174>
 800beda:	89ab      	ldrh	r3, [r5, #12]
 800bedc:	065b      	lsls	r3, r3, #25
 800bede:	f53f af2d 	bmi.w	800bd3c <_svfiprintf_r+0x28>
 800bee2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bee4:	e72c      	b.n	800bd40 <_svfiprintf_r+0x2c>
 800bee6:	ab03      	add	r3, sp, #12
 800bee8:	9300      	str	r3, [sp, #0]
 800beea:	462a      	mov	r2, r5
 800beec:	4b05      	ldr	r3, [pc, #20]	@ (800bf04 <_svfiprintf_r+0x1f0>)
 800beee:	a904      	add	r1, sp, #16
 800bef0:	4638      	mov	r0, r7
 800bef2:	f000 f879 	bl	800bfe8 <_printf_i>
 800bef6:	e7ed      	b.n	800bed4 <_svfiprintf_r+0x1c0>
 800bef8:	0800c61c 	.word	0x0800c61c
 800befc:	0800c626 	.word	0x0800c626
 800bf00:	00000000 	.word	0x00000000
 800bf04:	0800bc5d 	.word	0x0800bc5d
 800bf08:	0800c622 	.word	0x0800c622

0800bf0c <_printf_common>:
 800bf0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf10:	4616      	mov	r6, r2
 800bf12:	4698      	mov	r8, r3
 800bf14:	688a      	ldr	r2, [r1, #8]
 800bf16:	690b      	ldr	r3, [r1, #16]
 800bf18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	bfb8      	it	lt
 800bf20:	4613      	movlt	r3, r2
 800bf22:	6033      	str	r3, [r6, #0]
 800bf24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bf28:	4607      	mov	r7, r0
 800bf2a:	460c      	mov	r4, r1
 800bf2c:	b10a      	cbz	r2, 800bf32 <_printf_common+0x26>
 800bf2e:	3301      	adds	r3, #1
 800bf30:	6033      	str	r3, [r6, #0]
 800bf32:	6823      	ldr	r3, [r4, #0]
 800bf34:	0699      	lsls	r1, r3, #26
 800bf36:	bf42      	ittt	mi
 800bf38:	6833      	ldrmi	r3, [r6, #0]
 800bf3a:	3302      	addmi	r3, #2
 800bf3c:	6033      	strmi	r3, [r6, #0]
 800bf3e:	6825      	ldr	r5, [r4, #0]
 800bf40:	f015 0506 	ands.w	r5, r5, #6
 800bf44:	d106      	bne.n	800bf54 <_printf_common+0x48>
 800bf46:	f104 0a19 	add.w	sl, r4, #25
 800bf4a:	68e3      	ldr	r3, [r4, #12]
 800bf4c:	6832      	ldr	r2, [r6, #0]
 800bf4e:	1a9b      	subs	r3, r3, r2
 800bf50:	42ab      	cmp	r3, r5
 800bf52:	dc26      	bgt.n	800bfa2 <_printf_common+0x96>
 800bf54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bf58:	6822      	ldr	r2, [r4, #0]
 800bf5a:	3b00      	subs	r3, #0
 800bf5c:	bf18      	it	ne
 800bf5e:	2301      	movne	r3, #1
 800bf60:	0692      	lsls	r2, r2, #26
 800bf62:	d42b      	bmi.n	800bfbc <_printf_common+0xb0>
 800bf64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bf68:	4641      	mov	r1, r8
 800bf6a:	4638      	mov	r0, r7
 800bf6c:	47c8      	blx	r9
 800bf6e:	3001      	adds	r0, #1
 800bf70:	d01e      	beq.n	800bfb0 <_printf_common+0xa4>
 800bf72:	6823      	ldr	r3, [r4, #0]
 800bf74:	6922      	ldr	r2, [r4, #16]
 800bf76:	f003 0306 	and.w	r3, r3, #6
 800bf7a:	2b04      	cmp	r3, #4
 800bf7c:	bf02      	ittt	eq
 800bf7e:	68e5      	ldreq	r5, [r4, #12]
 800bf80:	6833      	ldreq	r3, [r6, #0]
 800bf82:	1aed      	subeq	r5, r5, r3
 800bf84:	68a3      	ldr	r3, [r4, #8]
 800bf86:	bf0c      	ite	eq
 800bf88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf8c:	2500      	movne	r5, #0
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	bfc4      	itt	gt
 800bf92:	1a9b      	subgt	r3, r3, r2
 800bf94:	18ed      	addgt	r5, r5, r3
 800bf96:	2600      	movs	r6, #0
 800bf98:	341a      	adds	r4, #26
 800bf9a:	42b5      	cmp	r5, r6
 800bf9c:	d11a      	bne.n	800bfd4 <_printf_common+0xc8>
 800bf9e:	2000      	movs	r0, #0
 800bfa0:	e008      	b.n	800bfb4 <_printf_common+0xa8>
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	4652      	mov	r2, sl
 800bfa6:	4641      	mov	r1, r8
 800bfa8:	4638      	mov	r0, r7
 800bfaa:	47c8      	blx	r9
 800bfac:	3001      	adds	r0, #1
 800bfae:	d103      	bne.n	800bfb8 <_printf_common+0xac>
 800bfb0:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfb8:	3501      	adds	r5, #1
 800bfba:	e7c6      	b.n	800bf4a <_printf_common+0x3e>
 800bfbc:	18e1      	adds	r1, r4, r3
 800bfbe:	1c5a      	adds	r2, r3, #1
 800bfc0:	2030      	movs	r0, #48	@ 0x30
 800bfc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bfc6:	4422      	add	r2, r4
 800bfc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bfcc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bfd0:	3302      	adds	r3, #2
 800bfd2:	e7c7      	b.n	800bf64 <_printf_common+0x58>
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	4622      	mov	r2, r4
 800bfd8:	4641      	mov	r1, r8
 800bfda:	4638      	mov	r0, r7
 800bfdc:	47c8      	blx	r9
 800bfde:	3001      	adds	r0, #1
 800bfe0:	d0e6      	beq.n	800bfb0 <_printf_common+0xa4>
 800bfe2:	3601      	adds	r6, #1
 800bfe4:	e7d9      	b.n	800bf9a <_printf_common+0x8e>
	...

0800bfe8 <_printf_i>:
 800bfe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfec:	7e0f      	ldrb	r7, [r1, #24]
 800bfee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bff0:	2f78      	cmp	r7, #120	@ 0x78
 800bff2:	4691      	mov	r9, r2
 800bff4:	4680      	mov	r8, r0
 800bff6:	460c      	mov	r4, r1
 800bff8:	469a      	mov	sl, r3
 800bffa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bffe:	d807      	bhi.n	800c010 <_printf_i+0x28>
 800c000:	2f62      	cmp	r7, #98	@ 0x62
 800c002:	d80a      	bhi.n	800c01a <_printf_i+0x32>
 800c004:	2f00      	cmp	r7, #0
 800c006:	f000 80d2 	beq.w	800c1ae <_printf_i+0x1c6>
 800c00a:	2f58      	cmp	r7, #88	@ 0x58
 800c00c:	f000 80b9 	beq.w	800c182 <_printf_i+0x19a>
 800c010:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c014:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c018:	e03a      	b.n	800c090 <_printf_i+0xa8>
 800c01a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c01e:	2b15      	cmp	r3, #21
 800c020:	d8f6      	bhi.n	800c010 <_printf_i+0x28>
 800c022:	a101      	add	r1, pc, #4	@ (adr r1, 800c028 <_printf_i+0x40>)
 800c024:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c028:	0800c081 	.word	0x0800c081
 800c02c:	0800c095 	.word	0x0800c095
 800c030:	0800c011 	.word	0x0800c011
 800c034:	0800c011 	.word	0x0800c011
 800c038:	0800c011 	.word	0x0800c011
 800c03c:	0800c011 	.word	0x0800c011
 800c040:	0800c095 	.word	0x0800c095
 800c044:	0800c011 	.word	0x0800c011
 800c048:	0800c011 	.word	0x0800c011
 800c04c:	0800c011 	.word	0x0800c011
 800c050:	0800c011 	.word	0x0800c011
 800c054:	0800c195 	.word	0x0800c195
 800c058:	0800c0bf 	.word	0x0800c0bf
 800c05c:	0800c14f 	.word	0x0800c14f
 800c060:	0800c011 	.word	0x0800c011
 800c064:	0800c011 	.word	0x0800c011
 800c068:	0800c1b7 	.word	0x0800c1b7
 800c06c:	0800c011 	.word	0x0800c011
 800c070:	0800c0bf 	.word	0x0800c0bf
 800c074:	0800c011 	.word	0x0800c011
 800c078:	0800c011 	.word	0x0800c011
 800c07c:	0800c157 	.word	0x0800c157
 800c080:	6833      	ldr	r3, [r6, #0]
 800c082:	1d1a      	adds	r2, r3, #4
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	6032      	str	r2, [r6, #0]
 800c088:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c08c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c090:	2301      	movs	r3, #1
 800c092:	e09d      	b.n	800c1d0 <_printf_i+0x1e8>
 800c094:	6833      	ldr	r3, [r6, #0]
 800c096:	6820      	ldr	r0, [r4, #0]
 800c098:	1d19      	adds	r1, r3, #4
 800c09a:	6031      	str	r1, [r6, #0]
 800c09c:	0606      	lsls	r6, r0, #24
 800c09e:	d501      	bpl.n	800c0a4 <_printf_i+0xbc>
 800c0a0:	681d      	ldr	r5, [r3, #0]
 800c0a2:	e003      	b.n	800c0ac <_printf_i+0xc4>
 800c0a4:	0645      	lsls	r5, r0, #25
 800c0a6:	d5fb      	bpl.n	800c0a0 <_printf_i+0xb8>
 800c0a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c0ac:	2d00      	cmp	r5, #0
 800c0ae:	da03      	bge.n	800c0b8 <_printf_i+0xd0>
 800c0b0:	232d      	movs	r3, #45	@ 0x2d
 800c0b2:	426d      	negs	r5, r5
 800c0b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0b8:	4859      	ldr	r0, [pc, #356]	@ (800c220 <_printf_i+0x238>)
 800c0ba:	230a      	movs	r3, #10
 800c0bc:	e011      	b.n	800c0e2 <_printf_i+0xfa>
 800c0be:	6821      	ldr	r1, [r4, #0]
 800c0c0:	6833      	ldr	r3, [r6, #0]
 800c0c2:	0608      	lsls	r0, r1, #24
 800c0c4:	f853 5b04 	ldr.w	r5, [r3], #4
 800c0c8:	d402      	bmi.n	800c0d0 <_printf_i+0xe8>
 800c0ca:	0649      	lsls	r1, r1, #25
 800c0cc:	bf48      	it	mi
 800c0ce:	b2ad      	uxthmi	r5, r5
 800c0d0:	2f6f      	cmp	r7, #111	@ 0x6f
 800c0d2:	4853      	ldr	r0, [pc, #332]	@ (800c220 <_printf_i+0x238>)
 800c0d4:	6033      	str	r3, [r6, #0]
 800c0d6:	bf14      	ite	ne
 800c0d8:	230a      	movne	r3, #10
 800c0da:	2308      	moveq	r3, #8
 800c0dc:	2100      	movs	r1, #0
 800c0de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c0e2:	6866      	ldr	r6, [r4, #4]
 800c0e4:	60a6      	str	r6, [r4, #8]
 800c0e6:	2e00      	cmp	r6, #0
 800c0e8:	bfa2      	ittt	ge
 800c0ea:	6821      	ldrge	r1, [r4, #0]
 800c0ec:	f021 0104 	bicge.w	r1, r1, #4
 800c0f0:	6021      	strge	r1, [r4, #0]
 800c0f2:	b90d      	cbnz	r5, 800c0f8 <_printf_i+0x110>
 800c0f4:	2e00      	cmp	r6, #0
 800c0f6:	d04b      	beq.n	800c190 <_printf_i+0x1a8>
 800c0f8:	4616      	mov	r6, r2
 800c0fa:	fbb5 f1f3 	udiv	r1, r5, r3
 800c0fe:	fb03 5711 	mls	r7, r3, r1, r5
 800c102:	5dc7      	ldrb	r7, [r0, r7]
 800c104:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c108:	462f      	mov	r7, r5
 800c10a:	42bb      	cmp	r3, r7
 800c10c:	460d      	mov	r5, r1
 800c10e:	d9f4      	bls.n	800c0fa <_printf_i+0x112>
 800c110:	2b08      	cmp	r3, #8
 800c112:	d10b      	bne.n	800c12c <_printf_i+0x144>
 800c114:	6823      	ldr	r3, [r4, #0]
 800c116:	07df      	lsls	r7, r3, #31
 800c118:	d508      	bpl.n	800c12c <_printf_i+0x144>
 800c11a:	6923      	ldr	r3, [r4, #16]
 800c11c:	6861      	ldr	r1, [r4, #4]
 800c11e:	4299      	cmp	r1, r3
 800c120:	bfde      	ittt	le
 800c122:	2330      	movle	r3, #48	@ 0x30
 800c124:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c128:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c12c:	1b92      	subs	r2, r2, r6
 800c12e:	6122      	str	r2, [r4, #16]
 800c130:	f8cd a000 	str.w	sl, [sp]
 800c134:	464b      	mov	r3, r9
 800c136:	aa03      	add	r2, sp, #12
 800c138:	4621      	mov	r1, r4
 800c13a:	4640      	mov	r0, r8
 800c13c:	f7ff fee6 	bl	800bf0c <_printf_common>
 800c140:	3001      	adds	r0, #1
 800c142:	d14a      	bne.n	800c1da <_printf_i+0x1f2>
 800c144:	f04f 30ff 	mov.w	r0, #4294967295
 800c148:	b004      	add	sp, #16
 800c14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c14e:	6823      	ldr	r3, [r4, #0]
 800c150:	f043 0320 	orr.w	r3, r3, #32
 800c154:	6023      	str	r3, [r4, #0]
 800c156:	4833      	ldr	r0, [pc, #204]	@ (800c224 <_printf_i+0x23c>)
 800c158:	2778      	movs	r7, #120	@ 0x78
 800c15a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c15e:	6823      	ldr	r3, [r4, #0]
 800c160:	6831      	ldr	r1, [r6, #0]
 800c162:	061f      	lsls	r7, r3, #24
 800c164:	f851 5b04 	ldr.w	r5, [r1], #4
 800c168:	d402      	bmi.n	800c170 <_printf_i+0x188>
 800c16a:	065f      	lsls	r7, r3, #25
 800c16c:	bf48      	it	mi
 800c16e:	b2ad      	uxthmi	r5, r5
 800c170:	6031      	str	r1, [r6, #0]
 800c172:	07d9      	lsls	r1, r3, #31
 800c174:	bf44      	itt	mi
 800c176:	f043 0320 	orrmi.w	r3, r3, #32
 800c17a:	6023      	strmi	r3, [r4, #0]
 800c17c:	b11d      	cbz	r5, 800c186 <_printf_i+0x19e>
 800c17e:	2310      	movs	r3, #16
 800c180:	e7ac      	b.n	800c0dc <_printf_i+0xf4>
 800c182:	4827      	ldr	r0, [pc, #156]	@ (800c220 <_printf_i+0x238>)
 800c184:	e7e9      	b.n	800c15a <_printf_i+0x172>
 800c186:	6823      	ldr	r3, [r4, #0]
 800c188:	f023 0320 	bic.w	r3, r3, #32
 800c18c:	6023      	str	r3, [r4, #0]
 800c18e:	e7f6      	b.n	800c17e <_printf_i+0x196>
 800c190:	4616      	mov	r6, r2
 800c192:	e7bd      	b.n	800c110 <_printf_i+0x128>
 800c194:	6833      	ldr	r3, [r6, #0]
 800c196:	6825      	ldr	r5, [r4, #0]
 800c198:	6961      	ldr	r1, [r4, #20]
 800c19a:	1d18      	adds	r0, r3, #4
 800c19c:	6030      	str	r0, [r6, #0]
 800c19e:	062e      	lsls	r6, r5, #24
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	d501      	bpl.n	800c1a8 <_printf_i+0x1c0>
 800c1a4:	6019      	str	r1, [r3, #0]
 800c1a6:	e002      	b.n	800c1ae <_printf_i+0x1c6>
 800c1a8:	0668      	lsls	r0, r5, #25
 800c1aa:	d5fb      	bpl.n	800c1a4 <_printf_i+0x1bc>
 800c1ac:	8019      	strh	r1, [r3, #0]
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	6123      	str	r3, [r4, #16]
 800c1b2:	4616      	mov	r6, r2
 800c1b4:	e7bc      	b.n	800c130 <_printf_i+0x148>
 800c1b6:	6833      	ldr	r3, [r6, #0]
 800c1b8:	1d1a      	adds	r2, r3, #4
 800c1ba:	6032      	str	r2, [r6, #0]
 800c1bc:	681e      	ldr	r6, [r3, #0]
 800c1be:	6862      	ldr	r2, [r4, #4]
 800c1c0:	2100      	movs	r1, #0
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	f7f4 f8ac 	bl	8000320 <memchr>
 800c1c8:	b108      	cbz	r0, 800c1ce <_printf_i+0x1e6>
 800c1ca:	1b80      	subs	r0, r0, r6
 800c1cc:	6060      	str	r0, [r4, #4]
 800c1ce:	6863      	ldr	r3, [r4, #4]
 800c1d0:	6123      	str	r3, [r4, #16]
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1d8:	e7aa      	b.n	800c130 <_printf_i+0x148>
 800c1da:	6923      	ldr	r3, [r4, #16]
 800c1dc:	4632      	mov	r2, r6
 800c1de:	4649      	mov	r1, r9
 800c1e0:	4640      	mov	r0, r8
 800c1e2:	47d0      	blx	sl
 800c1e4:	3001      	adds	r0, #1
 800c1e6:	d0ad      	beq.n	800c144 <_printf_i+0x15c>
 800c1e8:	6823      	ldr	r3, [r4, #0]
 800c1ea:	079b      	lsls	r3, r3, #30
 800c1ec:	d413      	bmi.n	800c216 <_printf_i+0x22e>
 800c1ee:	68e0      	ldr	r0, [r4, #12]
 800c1f0:	9b03      	ldr	r3, [sp, #12]
 800c1f2:	4298      	cmp	r0, r3
 800c1f4:	bfb8      	it	lt
 800c1f6:	4618      	movlt	r0, r3
 800c1f8:	e7a6      	b.n	800c148 <_printf_i+0x160>
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	4632      	mov	r2, r6
 800c1fe:	4649      	mov	r1, r9
 800c200:	4640      	mov	r0, r8
 800c202:	47d0      	blx	sl
 800c204:	3001      	adds	r0, #1
 800c206:	d09d      	beq.n	800c144 <_printf_i+0x15c>
 800c208:	3501      	adds	r5, #1
 800c20a:	68e3      	ldr	r3, [r4, #12]
 800c20c:	9903      	ldr	r1, [sp, #12]
 800c20e:	1a5b      	subs	r3, r3, r1
 800c210:	42ab      	cmp	r3, r5
 800c212:	dcf2      	bgt.n	800c1fa <_printf_i+0x212>
 800c214:	e7eb      	b.n	800c1ee <_printf_i+0x206>
 800c216:	2500      	movs	r5, #0
 800c218:	f104 0619 	add.w	r6, r4, #25
 800c21c:	e7f5      	b.n	800c20a <_printf_i+0x222>
 800c21e:	bf00      	nop
 800c220:	0800c62d 	.word	0x0800c62d
 800c224:	0800c63e 	.word	0x0800c63e

0800c228 <memmove>:
 800c228:	4288      	cmp	r0, r1
 800c22a:	b510      	push	{r4, lr}
 800c22c:	eb01 0402 	add.w	r4, r1, r2
 800c230:	d902      	bls.n	800c238 <memmove+0x10>
 800c232:	4284      	cmp	r4, r0
 800c234:	4623      	mov	r3, r4
 800c236:	d807      	bhi.n	800c248 <memmove+0x20>
 800c238:	1e43      	subs	r3, r0, #1
 800c23a:	42a1      	cmp	r1, r4
 800c23c:	d008      	beq.n	800c250 <memmove+0x28>
 800c23e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c242:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c246:	e7f8      	b.n	800c23a <memmove+0x12>
 800c248:	4402      	add	r2, r0
 800c24a:	4601      	mov	r1, r0
 800c24c:	428a      	cmp	r2, r1
 800c24e:	d100      	bne.n	800c252 <memmove+0x2a>
 800c250:	bd10      	pop	{r4, pc}
 800c252:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c256:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c25a:	e7f7      	b.n	800c24c <memmove+0x24>

0800c25c <_sbrk_r>:
 800c25c:	b538      	push	{r3, r4, r5, lr}
 800c25e:	4d06      	ldr	r5, [pc, #24]	@ (800c278 <_sbrk_r+0x1c>)
 800c260:	2300      	movs	r3, #0
 800c262:	4604      	mov	r4, r0
 800c264:	4608      	mov	r0, r1
 800c266:	602b      	str	r3, [r5, #0]
 800c268:	f7f5 fdd0 	bl	8001e0c <_sbrk>
 800c26c:	1c43      	adds	r3, r0, #1
 800c26e:	d102      	bne.n	800c276 <_sbrk_r+0x1a>
 800c270:	682b      	ldr	r3, [r5, #0]
 800c272:	b103      	cbz	r3, 800c276 <_sbrk_r+0x1a>
 800c274:	6023      	str	r3, [r4, #0]
 800c276:	bd38      	pop	{r3, r4, r5, pc}
 800c278:	240006f0 	.word	0x240006f0

0800c27c <_realloc_r>:
 800c27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c280:	4680      	mov	r8, r0
 800c282:	4615      	mov	r5, r2
 800c284:	460c      	mov	r4, r1
 800c286:	b921      	cbnz	r1, 800c292 <_realloc_r+0x16>
 800c288:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c28c:	4611      	mov	r1, r2
 800c28e:	f7ff bc59 	b.w	800bb44 <_malloc_r>
 800c292:	b92a      	cbnz	r2, 800c2a0 <_realloc_r+0x24>
 800c294:	f7ff fbea 	bl	800ba6c <_free_r>
 800c298:	2400      	movs	r4, #0
 800c29a:	4620      	mov	r0, r4
 800c29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2a0:	f000 f81a 	bl	800c2d8 <_malloc_usable_size_r>
 800c2a4:	4285      	cmp	r5, r0
 800c2a6:	4606      	mov	r6, r0
 800c2a8:	d802      	bhi.n	800c2b0 <_realloc_r+0x34>
 800c2aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c2ae:	d8f4      	bhi.n	800c29a <_realloc_r+0x1e>
 800c2b0:	4629      	mov	r1, r5
 800c2b2:	4640      	mov	r0, r8
 800c2b4:	f7ff fc46 	bl	800bb44 <_malloc_r>
 800c2b8:	4607      	mov	r7, r0
 800c2ba:	2800      	cmp	r0, #0
 800c2bc:	d0ec      	beq.n	800c298 <_realloc_r+0x1c>
 800c2be:	42b5      	cmp	r5, r6
 800c2c0:	462a      	mov	r2, r5
 800c2c2:	4621      	mov	r1, r4
 800c2c4:	bf28      	it	cs
 800c2c6:	4632      	movcs	r2, r6
 800c2c8:	f7ff fbc2 	bl	800ba50 <memcpy>
 800c2cc:	4621      	mov	r1, r4
 800c2ce:	4640      	mov	r0, r8
 800c2d0:	f7ff fbcc 	bl	800ba6c <_free_r>
 800c2d4:	463c      	mov	r4, r7
 800c2d6:	e7e0      	b.n	800c29a <_realloc_r+0x1e>

0800c2d8 <_malloc_usable_size_r>:
 800c2d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2dc:	1f18      	subs	r0, r3, #4
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	bfbc      	itt	lt
 800c2e2:	580b      	ldrlt	r3, [r1, r0]
 800c2e4:	18c0      	addlt	r0, r0, r3
 800c2e6:	4770      	bx	lr

0800c2e8 <_init>:
 800c2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ea:	bf00      	nop
 800c2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ee:	bc08      	pop	{r3}
 800c2f0:	469e      	mov	lr, r3
 800c2f2:	4770      	bx	lr

0800c2f4 <_fini>:
 800c2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f6:	bf00      	nop
 800c2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2fa:	bc08      	pop	{r3}
 800c2fc:	469e      	mov	lr, r3
 800c2fe:	4770      	bx	lr
