
VCU IFS06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c03c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  0800c30c  0800c30c  0000d30c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c65c  0800c65c  0000d65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c664  0800c664  0000d664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c668  0800c668  0000d668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  24000000  0800c66c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000690  24000070  0800c6dc  0000e070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000700  0800c6dc  0000e700  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ed5e  00000000  00000000  0000e09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c92  00000000  00000000  0002cdfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001848  00000000  00000000  0002fa90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001307  00000000  00000000  000312d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036e2e  00000000  00000000  000325df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001cd37  00000000  00000000  0006940d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017111b  00000000  00000000  00086144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f725f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007074  00000000  00000000  001f72a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006e  00000000  00000000  001fe318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000070 	.word	0x24000070
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c2f4 	.word	0x0800c2f4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000074 	.word	0x24000074
 800030c:	0800c2f4 	.word	0x0800c2f4

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b6:	f001 fc87 	bl	8001fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ba:	f000 fa15 	bl	8000ae8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006be:	f000 fa81 	bl	8000bc4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c2:	f000 fdff 	bl	80012c4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80006c6:	f000 faad 	bl	8000c24 <MX_ADC1_Init>
  MX_ADC2_Init();
 80006ca:	f000 fb23 	bl	8000d14 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 80006ce:	f000 fb85 	bl	8000ddc <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80006d2:	f000 fc01 	bl	8000ed8 <MX_FDCAN2_Init>
  MX_TIM1_Init();
 80006d6:	f000 fc7d 	bl	8000fd4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80006da:	f000 fda7 	bl	800122c <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80006de:	f000 fd31 	bl	8001144 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 80006e2:	f000 fd57 	bl	8001194 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //Inicialización de buses CAN

  //Inversor
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK){
 80006e6:	4889      	ldr	r0, [pc, #548]	@ (800090c <main+0x25c>)
 80006e8:	f004 f848 	bl	800477c <HAL_FDCAN_Start>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d002      	beq.n	80006f8 <main+0x48>
#if DEBUG
print("Error al inicializar CAN_INV");
 80006f2:	4887      	ldr	r0, [pc, #540]	@ (8000910 <main+0x260>)
 80006f4:	f000 feba 	bl	800146c <print>
#endif
  }

  //Acumulador
  if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK){
 80006f8:	4886      	ldr	r0, [pc, #536]	@ (8000914 <main+0x264>)
 80006fa:	f004 f83f 	bl	800477c <HAL_FDCAN_Start>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d002      	beq.n	800070a <main+0x5a>
#if DEBUG
print("Error al inicializar CAN_ACU");
 8000704:	4884      	ldr	r0, [pc, #528]	@ (8000918 <main+0x268>)
 8000706:	f000 feb1 	bl	800146c <print>
#endif
  }

  if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800070a:	2200      	movs	r2, #0
 800070c:	2101      	movs	r1, #1
 800070e:	4881      	ldr	r0, [pc, #516]	@ (8000914 <main+0x264>)
 8000710:	f004 fa26 	bl	8004b60 <HAL_FDCAN_ActivateNotification>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d01f      	beq.n	800075a <main+0xaa>
  {
#if DEBUG
print("Error al activar NOTIFICATION CAN_ACU");
 800071a:	4880      	ldr	r0, [pc, #512]	@ (800091c <main+0x26c>)
 800071c:	f000 fea6 	bl	800146c <print>


  //---------- SECUENCIA DE ARRANQUE ----------

  //Espera ACK inversor (DC bus)
  while (config_inv_lectura_v == 0){
 8000720:	e01b      	b.n	800075a <main+0xaa>
#if(DEBUG)
print("Solicitar tensión inversor");
 8000722:	487f      	ldr	r0, [pc, #508]	@ (8000920 <main+0x270>)
 8000724:	f000 fea2 	bl	800146c <print>
#endif
	if(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv, RxData_Inv) == HAL_OK){
 8000728:	4b7e      	ldr	r3, [pc, #504]	@ (8000924 <main+0x274>)
 800072a:	4a7f      	ldr	r2, [pc, #508]	@ (8000928 <main+0x278>)
 800072c:	2140      	movs	r1, #64	@ 0x40
 800072e:	4877      	ldr	r0, [pc, #476]	@ (800090c <main+0x25c>)
 8000730:	f004 f8aa 	bl	8004888 <HAL_FDCAN_GetRxMessage>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d10f      	bne.n	800075a <main+0xaa>
		if(RxHeader_Inv.Identifier == TX_STATE_7 && RxHeader_Inv.DataLength == 6){
 800073a:	4b7b      	ldr	r3, [pc, #492]	@ (8000928 <main+0x278>)
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	4b7b      	ldr	r3, [pc, #492]	@ (800092c <main+0x27c>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	429a      	cmp	r2, r3
 8000744:	d109      	bne.n	800075a <main+0xaa>
 8000746:	4b78      	ldr	r3, [pc, #480]	@ (8000928 <main+0x278>)
 8000748:	68db      	ldr	r3, [r3, #12]
 800074a:	2b06      	cmp	r3, #6
 800074c:	d105      	bne.n	800075a <main+0xaa>
			config_inv_lectura_v = 1; //Sale del bucle
 800074e:	4b78      	ldr	r3, [pc, #480]	@ (8000930 <main+0x280>)
 8000750:	2201      	movs	r2, #1
 8000752:	601a      	str	r2, [r3, #0]
#if DEBUG
print("CAN_INV: Lectura de DC_BUS_VOLTAGE correctamente");
 8000754:	4877      	ldr	r0, [pc, #476]	@ (8000934 <main+0x284>)
 8000756:	f000 fe89 	bl	800146c <print>
  while (config_inv_lectura_v == 0){
 800075a:	4b75      	ldr	r3, [pc, #468]	@ (8000930 <main+0x280>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d0df      	beq.n	8000722 <main+0x72>
		}
	}
  }

  //Estado STAND BY inversor
  while(state!=3){
 8000762:	e011      	b.n	8000788 <main+0xd8>
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv, RxData_Inv);
 8000764:	4b6f      	ldr	r3, [pc, #444]	@ (8000924 <main+0x274>)
 8000766:	4a70      	ldr	r2, [pc, #448]	@ (8000928 <main+0x278>)
 8000768:	2140      	movs	r1, #64	@ 0x40
 800076a:	4868      	ldr	r0, [pc, #416]	@ (800090c <main+0x25c>)
 800076c:	f004 f88c 	bl	8004888 <HAL_FDCAN_GetRxMessage>
	if(RxHeader_Inv.Identifier == TX_STATE_3){
 8000770:	4b6d      	ldr	r3, [pc, #436]	@ (8000928 <main+0x278>)
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	4b70      	ldr	r3, [pc, #448]	@ (8000938 <main+0x288>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	429a      	cmp	r2, r3
 800077a:	d105      	bne.n	8000788 <main+0xd8>
		state = RxData_Inv[2]>>0x1;
 800077c:	4b69      	ldr	r3, [pc, #420]	@ (8000924 <main+0x274>)
 800077e:	789b      	ldrb	r3, [r3, #2]
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	b2da      	uxtb	r2, r3
 8000784:	4b6d      	ldr	r3, [pc, #436]	@ (800093c <main+0x28c>)
 8000786:	701a      	strb	r2, [r3, #0]
  while(state!=3){
 8000788:	4b6c      	ldr	r3, [pc, #432]	@ (800093c <main+0x28c>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b03      	cmp	r3, #3
 800078e:	d1e9      	bne.n	8000764 <main+0xb4>
	}
  }

	//PRE-CHARGE
  while(precarga_inv == 0){
 8000790:	e04f      	b.n	8000832 <main+0x182>
#if DEBUG
print("Precarga");
 8000792:	486b      	ldr	r0, [pc, #428]	@ (8000940 <main+0x290>)
 8000794:	f000 fe6a 	bl	800146c <print>
#endif
	//Lectura DC_BUS_VOLTAGE del CAN_INV
	if(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv, RxData_Inv) == HAL_OK){
 8000798:	4b62      	ldr	r3, [pc, #392]	@ (8000924 <main+0x274>)
 800079a:	4a63      	ldr	r2, [pc, #396]	@ (8000928 <main+0x278>)
 800079c:	2140      	movs	r1, #64	@ 0x40
 800079e:	485b      	ldr	r0, [pc, #364]	@ (800090c <main+0x25c>)
 80007a0:	f004 f872 	bl	8004888 <HAL_FDCAN_GetRxMessage>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d143      	bne.n	8000832 <main+0x182>
		if(RxHeader_Inv.Identifier == TX_STATE_7 && RxHeader_Inv.DataLength == 6){
 80007aa:	4b5f      	ldr	r3, [pc, #380]	@ (8000928 <main+0x278>)
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	4b5f      	ldr	r3, [pc, #380]	@ (800092c <main+0x27c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d13d      	bne.n	8000832 <main+0x182>
 80007b6:	4b5c      	ldr	r3, [pc, #368]	@ (8000928 <main+0x278>)
 80007b8:	68db      	ldr	r3, [r3, #12]
 80007ba:	2b06      	cmp	r3, #6
 80007bc:	d139      	bne.n	8000832 <main+0x182>
			uint8_t byte0 = RxData_Inv[0];
 80007be:	4b59      	ldr	r3, [pc, #356]	@ (8000924 <main+0x274>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
			uint8_t byte1 = RxData_Inv[1];
 80007c4:	4b57      	ldr	r3, [pc, #348]	@ (8000924 <main+0x274>)
 80007c6:	785b      	ldrb	r3, [r3, #1]
 80007c8:	71bb      	strb	r3, [r7, #6]
			printHex(byte0);
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 fe89 	bl	80014e4 <printHex>
			printHex(byte1);
 80007d2:	79bb      	ldrb	r3, [r7, #6]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 fe85 	bl	80014e4 <printHex>
			//inv_dc_bus_voltage = (int)((byte1<<8)|byte0);
#if DEBUG
print("DC_BUS_VOLTAGE (V):");
 80007da:	485a      	ldr	r0, [pc, #360]	@ (8000944 <main+0x294>)
 80007dc:	f000 fe46 	bl	800146c <print>
printValue((int)((byte1<<8)|byte0));
 80007e0:	79bb      	ldrb	r3, [r7, #6]
 80007e2:	021a      	lsls	r2, r3, #8
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	4313      	orrs	r3, r2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fe5d 	bl	80014a8 <printValue>
#endif

			//Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
			TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 80007ee:	4b56      	ldr	r3, [pc, #344]	@ (8000948 <main+0x298>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a56      	ldr	r2, [pc, #344]	@ (800094c <main+0x29c>)
 80007f4:	6013      	str	r3, [r2, #0]
			TxHeader_Acu.DataLength = 2;
 80007f6:	4b55      	ldr	r3, [pc, #340]	@ (800094c <main+0x29c>)
 80007f8:	2202      	movs	r2, #2
 80007fa:	60da      	str	r2, [r3, #12]
			TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 80007fc:	4b53      	ldr	r3, [pc, #332]	@ (800094c <main+0x29c>)
 80007fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000802:	605a      	str	r2, [r3, #4]
			TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8000804:	4b51      	ldr	r3, [pc, #324]	@ (800094c <main+0x29c>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
			TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 800080a:	4b50      	ldr	r3, [pc, #320]	@ (800094c <main+0x29c>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]

			TxData_Acu[0] = byte0;
 8000810:	4a4f      	ldr	r2, [pc, #316]	@ (8000950 <main+0x2a0>)
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	7013      	strb	r3, [r2, #0]
			TxData_Acu[1] = byte1;
 8000816:	4a4e      	ldr	r2, [pc, #312]	@ (8000950 <main+0x2a0>)
 8000818:	79bb      	ldrb	r3, [r7, #6]
 800081a:	7053      	strb	r3, [r2, #1]
			if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK){
 800081c:	4a4c      	ldr	r2, [pc, #304]	@ (8000950 <main+0x2a0>)
 800081e:	494b      	ldr	r1, [pc, #300]	@ (800094c <main+0x29c>)
 8000820:	483c      	ldr	r0, [pc, #240]	@ (8000914 <main+0x264>)
 8000822:	f003 ffd6 	bl	80047d2 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d102      	bne.n	8000832 <main+0x182>
#if DEBUG
print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
 800082c:	4849      	ldr	r0, [pc, #292]	@ (8000954 <main+0x2a4>)
 800082e:	f000 fe1d 	bl	800146c <print>
  while(precarga_inv == 0){
 8000832:	4b49      	ldr	r3, [pc, #292]	@ (8000958 <main+0x2a8>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d0ab      	beq.n	8000792 <main+0xe2>
	    }
	}
  }

#if DEBUG
print("state : stand by");
 800083a:	4848      	ldr	r0, [pc, #288]	@ (800095c <main+0x2ac>)
 800083c:	f000 fe16 	bl	800146c <print>
 * TIM16 -> APB2 => 264MHzw
 * 10 ms interruption => 10ms * 264MHz = 2640000
 * prescalado 264 (por ejemplo)
 * timer count = 2640000 / 264 = 10000
 */
  HAL_TIM_Base_Start_IT(&htim16);
 8000840:	4847      	ldr	r0, [pc, #284]	@ (8000960 <main+0x2b0>)
 8000842:	f008 fcbb 	bl	80091bc <HAL_TIM_Base_Start_IT>


  //Estado READY inversor
  TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8000846:	4b47      	ldr	r3, [pc, #284]	@ (8000964 <main+0x2b4>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a47      	ldr	r2, [pc, #284]	@ (8000968 <main+0x2b8>)
 800084c:	6013      	str	r3, [r2, #0]
  TxHeader_Inv.DataLength = 3;
 800084e:	4b46      	ldr	r3, [pc, #280]	@ (8000968 <main+0x2b8>)
 8000850:	2203      	movs	r2, #3
 8000852:	60da      	str	r2, [r3, #12]
  TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8000854:	4b44      	ldr	r3, [pc, #272]	@ (8000968 <main+0x2b8>)
 8000856:	2200      	movs	r2, #0
 8000858:	605a      	str	r2, [r3, #4]

  TxData_Inv[0] = 0x0;
 800085a:	4b44      	ldr	r3, [pc, #272]	@ (800096c <main+0x2bc>)
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]
  TxData_Inv[1] = 0x0;
 8000860:	4b42      	ldr	r3, [pc, #264]	@ (800096c <main+0x2bc>)
 8000862:	2200      	movs	r2, #0
 8000864:	705a      	strb	r2, [r3, #1]
  TxData_Inv[2] = 0x4;
 8000866:	4b41      	ldr	r3, [pc, #260]	@ (800096c <main+0x2bc>)
 8000868:	2204      	movs	r2, #4
 800086a:	709a      	strb	r2, [r3, #2]
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 800086c:	4a3f      	ldr	r2, [pc, #252]	@ (800096c <main+0x2bc>)
 800086e:	493e      	ldr	r1, [pc, #248]	@ (8000968 <main+0x2b8>)
 8000870:	4826      	ldr	r0, [pc, #152]	@ (800090c <main+0x25c>)
 8000872:	f003 ffae 	bl	80047d2 <HAL_FDCAN_AddMessageToTxFifoQ>
  while(state!=4){
 8000876:	e011      	b.n	800089c <main+0x1ec>
	  HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv, RxData_Inv);
 8000878:	4b2a      	ldr	r3, [pc, #168]	@ (8000924 <main+0x274>)
 800087a:	4a2b      	ldr	r2, [pc, #172]	@ (8000928 <main+0x278>)
 800087c:	2140      	movs	r1, #64	@ 0x40
 800087e:	4823      	ldr	r0, [pc, #140]	@ (800090c <main+0x25c>)
 8000880:	f004 f802 	bl	8004888 <HAL_FDCAN_GetRxMessage>
	  if(RxHeader_Inv.Identifier == TX_STATE_3){
 8000884:	4b28      	ldr	r3, [pc, #160]	@ (8000928 <main+0x278>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4b2b      	ldr	r3, [pc, #172]	@ (8000938 <main+0x288>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	429a      	cmp	r2, r3
 800088e:	d105      	bne.n	800089c <main+0x1ec>
		  state = RxData_Inv[2]>>0x1;
 8000890:	4b24      	ldr	r3, [pc, #144]	@ (8000924 <main+0x274>)
 8000892:	789b      	ldrb	r3, [r3, #2]
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	b2da      	uxtb	r2, r3
 8000898:	4b28      	ldr	r3, [pc, #160]	@ (800093c <main+0x28c>)
 800089a:	701a      	strb	r2, [r3, #0]
  while(state!=4){
 800089c:	4b27      	ldr	r3, [pc, #156]	@ (800093c <main+0x28c>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	d1e9      	bne.n	8000878 <main+0x1c8>
	  }
  }
#if DEBUG
print("state: ready");
 80008a4:	4832      	ldr	r0, [pc, #200]	@ (8000970 <main+0x2c0>)
 80008a6:	f000 fde1 	bl	800146c <print>
#endif


  //Estado TORQUE inversor
  TxHeader_Inv.Identifier = RX_SETPOINT_1;
 80008aa:	4b2e      	ldr	r3, [pc, #184]	@ (8000964 <main+0x2b4>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a2e      	ldr	r2, [pc, #184]	@ (8000968 <main+0x2b8>)
 80008b0:	6013      	str	r3, [r2, #0]
  TxHeader_Inv.DataLength = 3;
 80008b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000968 <main+0x2b8>)
 80008b4:	2203      	movs	r2, #3
 80008b6:	60da      	str	r2, [r3, #12]
  TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 80008b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000968 <main+0x2b8>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	605a      	str	r2, [r3, #4]


  TxData_Inv[0] = 0x0;
 80008be:	4b2b      	ldr	r3, [pc, #172]	@ (800096c <main+0x2bc>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
  TxData_Inv[1] = 0x0;
 80008c4:	4b29      	ldr	r3, [pc, #164]	@ (800096c <main+0x2bc>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	705a      	strb	r2, [r3, #1]
  TxData_Inv[2] = 0x6;
 80008ca:	4b28      	ldr	r3, [pc, #160]	@ (800096c <main+0x2bc>)
 80008cc:	2206      	movs	r2, #6
 80008ce:	709a      	strb	r2, [r3, #2]
  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 80008d0:	4a26      	ldr	r2, [pc, #152]	@ (800096c <main+0x2bc>)
 80008d2:	4925      	ldr	r1, [pc, #148]	@ (8000968 <main+0x2b8>)
 80008d4:	480d      	ldr	r0, [pc, #52]	@ (800090c <main+0x25c>)
 80008d6:	f003 ff7c 	bl	80047d2 <HAL_FDCAN_AddMessageToTxFifoQ>
  while(state!=6){
 80008da:	e011      	b.n	8000900 <main+0x250>
	  HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv, RxData_Inv);
 80008dc:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <main+0x274>)
 80008de:	4a12      	ldr	r2, [pc, #72]	@ (8000928 <main+0x278>)
 80008e0:	2140      	movs	r1, #64	@ 0x40
 80008e2:	480a      	ldr	r0, [pc, #40]	@ (800090c <main+0x25c>)
 80008e4:	f003 ffd0 	bl	8004888 <HAL_FDCAN_GetRxMessage>
	  if(RxHeader_Inv.Identifier == TX_STATE_3){
 80008e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000928 <main+0x278>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <main+0x288>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d105      	bne.n	8000900 <main+0x250>
		  state = RxData_Inv[2]>>0x1;
 80008f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000924 <main+0x274>)
 80008f6:	789b      	ldrb	r3, [r3, #2]
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <main+0x28c>)
 80008fe:	701a      	strb	r2, [r3, #0]
  while(state!=6){
 8000900:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <main+0x28c>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b06      	cmp	r3, #6
 8000906:	d1e9      	bne.n	80008dc <main+0x22c>
	  }
  }


  //Espera a que se pulse el botón de arranque mientras se pisa el freno
  while(boton_arranque == 0){
 8000908:	e073      	b.n	80009f2 <main+0x342>
 800090a:	bf00      	nop
 800090c:	24000178 	.word	0x24000178
 8000910:	0800c30c 	.word	0x0800c30c
 8000914:	24000218 	.word	0x24000218
 8000918:	0800c32c 	.word	0x0800c32c
 800091c:	0800c34c 	.word	0x0800c34c
 8000920:	0800c374 	.word	0x0800c374
 8000924:	24000518 	.word	0x24000518
 8000928:	2400049c 	.word	0x2400049c
 800092c:	24000004 	.word	0x24000004
 8000930:	24000090 	.word	0x24000090
 8000934:	0800c390 	.word	0x0800c390
 8000938:	24000000 	.word	0x24000000
 800093c:	2400053e 	.word	0x2400053e
 8000940:	0800c3c4 	.word	0x0800c3c4
 8000944:	0800c3d0 	.word	0x0800c3d0
 8000948:	2400000c 	.word	0x2400000c
 800094c:	240004c4 	.word	0x240004c4
 8000950:	24000520 	.word	0x24000520
 8000954:	0800c3e4 	.word	0x0800c3e4
 8000958:	2400008c 	.word	0x2400008c
 800095c:	0800c40c 	.word	0x0800c40c
 8000960:	24000304 	.word	0x24000304
 8000964:	24000008 	.word	0x24000008
 8000968:	24000478 	.word	0x24000478
 800096c:	24000510 	.word	0x24000510
 8000970:	0800c420 	.word	0x0800c420
	  //Enciende el LED del boton para avisar al piloto
	  HAL_GPIO_WritePin(START_BUTTON_LED_GPIO_Port, START_BUTTON_LED_Pin, GPIO_PIN_RESET);
 8000974:	2200      	movs	r2, #0
 8000976:	2101      	movs	r1, #1
 8000978:	4846      	ldr	r0, [pc, #280]	@ (8000a94 <main+0x3e4>)
 800097a:	f005 f827 	bl	80059cc <HAL_GPIO_WritePin>

	  start_button_act = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port, START_BUTTON_Pin);
 800097e:	2180      	movs	r1, #128	@ 0x80
 8000980:	4845      	ldr	r0, [pc, #276]	@ (8000a98 <main+0x3e8>)
 8000982:	f005 f80b 	bl	800599c <HAL_GPIO_ReadPin>
 8000986:	4603      	mov	r3, r0
 8000988:	461a      	mov	r2, r3
 800098a:	4b44      	ldr	r3, [pc, #272]	@ (8000a9c <main+0x3ec>)
 800098c:	601a      	str	r2, [r3, #0]
	  if(start_button_act == 1 && start_button_ant == 0){
 800098e:	4b43      	ldr	r3, [pc, #268]	@ (8000a9c <main+0x3ec>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d12d      	bne.n	80009f2 <main+0x342>
 8000996:	4b42      	ldr	r3, [pc, #264]	@ (8000aa0 <main+0x3f0>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d129      	bne.n	80009f2 <main+0x342>
		  ADC1_Select_SF();
 800099e:	f000 fdc1 	bl	8001524 <ADC1_Select_SF>
		  HAL_ADC_Start(&hadc1);
 80009a2:	4840      	ldr	r0, [pc, #256]	@ (8000aa4 <main+0x3f4>)
 80009a4:	f002 f8ba 	bl	8002b1c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80009a8:	f04f 31ff 	mov.w	r1, #4294967295
 80009ac:	483d      	ldr	r0, [pc, #244]	@ (8000aa4 <main+0x3f4>)
 80009ae:	f002 f9b3 	bl	8002d18 <HAL_ADC_PollForConversion>
		  s_freno= HAL_ADC_GetValue(&hadc1);
 80009b2:	483c      	ldr	r0, [pc, #240]	@ (8000aa4 <main+0x3f4>)
 80009b4:	f002 faa4 	bl	8002f00 <HAL_ADC_GetValue>
 80009b8:	4603      	mov	r3, r0
 80009ba:	461a      	mov	r2, r3
 80009bc:	4b3a      	ldr	r3, [pc, #232]	@ (8000aa8 <main+0x3f8>)
 80009be:	601a      	str	r2, [r3, #0]
		  HAL_ADC_Stop(&hadc1);
 80009c0:	4838      	ldr	r0, [pc, #224]	@ (8000aa4 <main+0x3f4>)
 80009c2:	f002 f975 	bl	8002cb0 <HAL_ADC_Stop>
#if DEBUG
print("Botón Start + Freno:");
 80009c6:	4839      	ldr	r0, [pc, #228]	@ (8000aac <main+0x3fc>)
 80009c8:	f000 fd50 	bl	800146c <print>
printValue(s_freno);
 80009cc:	4b36      	ldr	r3, [pc, #216]	@ (8000aa8 <main+0x3f8>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 fd69 	bl	80014a8 <printValue>
#endif
		  if(s_freno>UMBRAL_FRENO){
 80009d6:	4b34      	ldr	r3, [pc, #208]	@ (8000aa8 <main+0x3f8>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2bd2      	cmp	r3, #210	@ 0xd2
 80009dc:	dd06      	ble.n	80009ec <main+0x33c>
			  boton_arranque = 1;
 80009de:	4b34      	ldr	r3, [pc, #208]	@ (8000ab0 <main+0x400>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	601a      	str	r2, [r3, #0]
#if DEBUG
print("Coche arrancado correctamente");
 80009e4:	4833      	ldr	r0, [pc, #204]	@ (8000ab4 <main+0x404>)
 80009e6:	f000 fd41 	bl	800146c <print>
 80009ea:	e002      	b.n	80009f2 <main+0x342>
#endif
		  }
		  else{
#if DEBUG
print("Pulsar freno para arrancar");
 80009ec:	4832      	ldr	r0, [pc, #200]	@ (8000ab8 <main+0x408>)
 80009ee:	f000 fd3d 	bl	800146c <print>
  while(boton_arranque == 0){
 80009f2:	4b2f      	ldr	r3, [pc, #188]	@ (8000ab0 <main+0x400>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d0bc      	beq.n	8000974 <main+0x2c4>
  }


  // Activar READY-TO-DRIVE-SOUND (RTDS) durante 2s
#if DEBUG
print("RTDS sonando");
 80009fa:	4830      	ldr	r0, [pc, #192]	@ (8000abc <main+0x40c>)
 80009fc:	f000 fd36 	bl	800146c <print>
#endif
  HAL_GPIO_WritePin(START_BUTTON_LED_GPIO_Port, START_BUTTON_LED_Pin, GPIO_PIN_SET); //Apaga LED botón
 8000a00:	2201      	movs	r2, #1
 8000a02:	2101      	movs	r1, #1
 8000a04:	4823      	ldr	r0, [pc, #140]	@ (8000a94 <main+0x3e4>)
 8000a06:	f004 ffe1 	bl	80059cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_SET); //Enciende RTDS
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	2102      	movs	r1, #2
 8000a0e:	4821      	ldr	r0, [pc, #132]	@ (8000a94 <main+0x3e4>)
 8000a10:	f004 ffdc 	bl	80059cc <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000a14:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a18:	f001 fb68 	bl	80020ec <HAL_Delay>
  HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_RESET); //Apaga RTDS
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2102      	movs	r1, #2
 8000a20:	481c      	ldr	r0, [pc, #112]	@ (8000a94 <main+0x3e4>)
 8000a22:	f004 ffd3 	bl	80059cc <HAL_GPIO_WritePin>
#if DEBUG
  print("RTDS apagado");
 8000a26:	4826      	ldr	r0, [pc, #152]	@ (8000ac0 <main+0x410>)
 8000a28:	f000 fd20 	bl	800146c <print>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		//Estado TORQUE inversor
		TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8000a2c:	4b25      	ldr	r3, [pc, #148]	@ (8000ac4 <main+0x414>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a25      	ldr	r2, [pc, #148]	@ (8000ac8 <main+0x418>)
 8000a32:	6013      	str	r3, [r2, #0]
		TxHeader_Inv.DataLength = 3;
 8000a34:	4b24      	ldr	r3, [pc, #144]	@ (8000ac8 <main+0x418>)
 8000a36:	2203      	movs	r2, #3
 8000a38:	60da      	str	r2, [r3, #12]
		TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8000a3a:	4b23      	ldr	r3, [pc, #140]	@ (8000ac8 <main+0x418>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	605a      	str	r2, [r3, #4]


		TxData_Inv[0] = 0x0;
 8000a40:	4b22      	ldr	r3, [pc, #136]	@ (8000acc <main+0x41c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 8000a46:	4b21      	ldr	r3, [pc, #132]	@ (8000acc <main+0x41c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = 0x6;
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000acc <main+0x41c>)
 8000a4e:	2206      	movs	r2, #6
 8000a50:	709a      	strb	r2, [r3, #2]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8000a52:	4a1e      	ldr	r2, [pc, #120]	@ (8000acc <main+0x41c>)
 8000a54:	491c      	ldr	r1, [pc, #112]	@ (8000ac8 <main+0x418>)
 8000a56:	481e      	ldr	r0, [pc, #120]	@ (8000ad0 <main+0x420>)
 8000a58:	f003 febb 	bl	80047d2 <HAL_FDCAN_AddMessageToTxFifoQ>

		HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv, RxData_Inv);
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad4 <main+0x424>)
 8000a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ad8 <main+0x428>)
 8000a60:	2140      	movs	r1, #64	@ 0x40
 8000a62:	481b      	ldr	r0, [pc, #108]	@ (8000ad0 <main+0x420>)
 8000a64:	f003 ff10 	bl	8004888 <HAL_FDCAN_GetRxMessage>
		if(RxHeader_Inv.Identifier == TX_STATE_3){
 8000a68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <main+0x428>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000adc <main+0x42c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d1db      	bne.n	8000a2c <main+0x37c>
			state = RxData_Inv[2]>>0x1;
 8000a74:	4b17      	ldr	r3, [pc, #92]	@ (8000ad4 <main+0x424>)
 8000a76:	789b      	ldrb	r3, [r3, #2]
 8000a78:	085b      	lsrs	r3, r3, #1
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ae0 <main+0x430>)
 8000a7e:	701a      	strb	r2, [r3, #0]
			if(state == 10){
 8000a80:	4b17      	ldr	r3, [pc, #92]	@ (8000ae0 <main+0x430>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b0a      	cmp	r3, #10
 8000a86:	d1d1      	bne.n	8000a2c <main+0x37c>
				error = RxData_Inv[0];
 8000a88:	4b12      	ldr	r3, [pc, #72]	@ (8000ad4 <main+0x424>)
 8000a8a:	781a      	ldrb	r2, [r3, #0]
 8000a8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <main+0x434>)
 8000a8e:	701a      	strb	r2, [r3, #0]
		TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8000a90:	e7cc      	b.n	8000a2c <main+0x37c>
 8000a92:	bf00      	nop
 8000a94:	58020800 	.word	0x58020800
 8000a98:	58021800 	.word	0x58021800
 8000a9c:	24000530 	.word	0x24000530
 8000aa0:	24000534 	.word	0x24000534
 8000aa4:	24000098 	.word	0x24000098
 8000aa8:	24000538 	.word	0x24000538
 8000aac:	0800c430 	.word	0x0800c430
 8000ab0:	24000094 	.word	0x24000094
 8000ab4:	0800c448 	.word	0x0800c448
 8000ab8:	0800c468 	.word	0x0800c468
 8000abc:	0800c484 	.word	0x0800c484
 8000ac0:	0800c494 	.word	0x0800c494
 8000ac4:	24000008 	.word	0x24000008
 8000ac8:	24000478 	.word	0x24000478
 8000acc:	24000510 	.word	0x24000510
 8000ad0:	24000178 	.word	0x24000178
 8000ad4:	24000518 	.word	0x24000518
 8000ad8:	2400049c 	.word	0x2400049c
 8000adc:	24000000 	.word	0x24000000
 8000ae0:	2400053e 	.word	0x2400053e
 8000ae4:	240005a4 	.word	0x240005a4

08000ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b09c      	sub	sp, #112	@ 0x70
 8000aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af2:	224c      	movs	r2, #76	@ 0x4c
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f00a ff7c 	bl	800b9f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2220      	movs	r2, #32
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f00a ff76 	bl	800b9f4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b08:	2002      	movs	r0, #2
 8000b0a:	f004 ff79 	bl	8005a00 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	4b2b      	ldr	r3, [pc, #172]	@ (8000bc0 <SystemClock_Config+0xd8>)
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	4a2a      	ldr	r2, [pc, #168]	@ (8000bc0 <SystemClock_Config+0xd8>)
 8000b18:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b1c:	6193      	str	r3, [r2, #24]
 8000b1e:	4b28      	ldr	r3, [pc, #160]	@ (8000bc0 <SystemClock_Config+0xd8>)
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b2a:	bf00      	nop
 8000b2c:	4b24      	ldr	r3, [pc, #144]	@ (8000bc0 <SystemClock_Config+0xd8>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b38:	d1f8      	bne.n	8000b2c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b42:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b44:	2302      	movs	r3, #2
 8000b46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000b50:	232c      	movs	r3, #44	@ 0x2c
 8000b52:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b54:	2301      	movs	r3, #1
 8000b56:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b58:	2304      	movs	r3, #4
 8000b5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b60:	230c      	movs	r3, #12
 8000b62:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b70:	4618      	mov	r0, r3
 8000b72:	f004 ff7f 	bl	8005a74 <HAL_RCC_OscConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b7c:	f000 fdbc 	bl	80016f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b80:	233f      	movs	r3, #63	@ 0x3f
 8000b82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b84:	2303      	movs	r3, #3
 8000b86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b8c:	2308      	movs	r3, #8
 8000b8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b90:	2340      	movs	r3, #64	@ 0x40
 8000b92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b94:	2340      	movs	r3, #64	@ 0x40
 8000b96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b9c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b9e:	2340      	movs	r3, #64	@ 0x40
 8000ba0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2103      	movs	r1, #3
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f005 fb3e 	bl	8006228 <HAL_RCC_ClockConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000bb2:	f000 fda1 	bl	80016f8 <Error_Handler>
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	3770      	adds	r7, #112	@ 0x70
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	58024800 	.word	0x58024800

08000bc4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b0ae      	sub	sp, #184	@ 0xb8
 8000bc8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bca:	463b      	mov	r3, r7
 8000bcc:	22b8      	movs	r2, #184	@ 0xb8
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f00a ff0f 	bl	800b9f4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bd6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000bda:	f04f 0300 	mov.w	r3, #0
 8000bde:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000be2:	2302      	movs	r3, #2
 8000be4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000be6:	2310      	movs	r3, #16
 8000be8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000bea:	2302      	movs	r3, #2
 8000bec:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000bf6:	23c0      	movs	r3, #192	@ 0xc0
 8000bf8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 8000bfe:	f640 3386 	movw	r3, #2950	@ 0xb86
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f005 fe97 	bl	8006940 <HAL_RCCEx_PeriphCLKConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000c18:	f000 fd6e 	bl	80016f8 <Error_Handler>
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	37b8      	adds	r7, #184	@ 0xb8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08c      	sub	sp, #48	@ 0x30
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c36:	463b      	mov	r3, r7
 8000c38:	2224      	movs	r2, #36	@ 0x24
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f00a fed9 	bl	800b9f4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c42:	4b31      	ldr	r3, [pc, #196]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c44:	4a31      	ldr	r2, [pc, #196]	@ (8000d0c <MX_ADC1_Init+0xe8>)
 8000c46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c48:	4b2f      	ldr	r3, [pc, #188]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000c4e:	4b2e      	ldr	r3, [pc, #184]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c50:	220c      	movs	r2, #12
 8000c52:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c54:	4b2c      	ldr	r3, [pc, #176]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c5a:	4b2b      	ldr	r3, [pc, #172]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c5c:	2204      	movs	r2, #4
 8000c5e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c60:	4b29      	ldr	r3, [pc, #164]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c66:	4b28      	ldr	r3, [pc, #160]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c6c:	4b26      	ldr	r3, [pc, #152]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c72:	4b25      	ldr	r3, [pc, #148]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c7a:	4b23      	ldr	r3, [pc, #140]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c80:	4b21      	ldr	r3, [pc, #132]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c86:	4b20      	ldr	r3, [pc, #128]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c92:	4b1d      	ldr	r3, [pc, #116]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000c98:	4b1b      	ldr	r3, [pc, #108]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ca0:	4819      	ldr	r0, [pc, #100]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000ca2:	f001 fd33 	bl	800270c <HAL_ADC_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000cac:	f000 fd24 	bl	80016f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4813      	ldr	r0, [pc, #76]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000cbc:	f003 f918 	bl	8003ef0 <HAL_ADCEx_MultiModeConfigChannel>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000cc6:	f000 fd17 	bl	80016f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cca:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <MX_ADC1_Init+0xec>)
 8000ccc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cce:	2306      	movs	r3, #6
 8000cd0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cd6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000cda:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cdc:	2304      	movs	r3, #4
 8000cde:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cea:	463b      	mov	r3, r7
 8000cec:	4619      	mov	r1, r3
 8000cee:	4806      	ldr	r0, [pc, #24]	@ (8000d08 <MX_ADC1_Init+0xe4>)
 8000cf0:	f002 f914 	bl	8002f1c <HAL_ADC_ConfigChannel>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000cfa:	f000 fcfd 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	3730      	adds	r7, #48	@ 0x30
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	24000098 	.word	0x24000098
 8000d0c:	40022000 	.word	0x40022000
 8000d10:	08600004 	.word	0x08600004

08000d14 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	@ 0x28
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	2224      	movs	r2, #36	@ 0x24
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f00a fe67 	bl	800b9f4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d26:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d28:	4a2a      	ldr	r2, [pc, #168]	@ (8000dd4 <MX_ADC2_Init+0xc0>)
 8000d2a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d2c:	4b28      	ldr	r3, [pc, #160]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000d32:	4b27      	ldr	r3, [pc, #156]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d38:	4b25      	ldr	r3, [pc, #148]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d3e:	4b24      	ldr	r3, [pc, #144]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d40:	2204      	movs	r2, #4
 8000d42:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d44:	4b22      	ldr	r3, [pc, #136]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000d50:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d56:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d70:	4b17      	ldr	r3, [pc, #92]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d76:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000d7c:	4b14      	ldr	r3, [pc, #80]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d84:	4812      	ldr	r0, [pc, #72]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d86:	f001 fcc1 	bl	800270c <HAL_ADC_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000d90:	f000 fcb2 	bl	80016f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d94:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <MX_ADC2_Init+0xc4>)
 8000d96:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d98:	2306      	movs	r3, #6
 8000d9a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000da0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000da4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000da6:	2304      	movs	r3, #4
 8000da8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000dba:	f002 f8af 	bl	8002f1c <HAL_ADC_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000dc4:	f000 fc98 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	3728      	adds	r7, #40	@ 0x28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	24000108 	.word	0x24000108
 8000dd4:	40022100 	.word	0x40022100
 8000dd8:	25b00200 	.word	0x25b00200

08000ddc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000de2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000de4:	4a3b      	ldr	r2, [pc, #236]	@ (8000ed4 <MX_FDCAN1_Init+0xf8>)
 8000de6:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000de8:	4b39      	ldr	r3, [pc, #228]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000dee:	4b38      	ldr	r3, [pc, #224]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000df4:	4b36      	ldr	r3, [pc, #216]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000dfa:	4b35      	ldr	r3, [pc, #212]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e00:	4b33      	ldr	r3, [pc, #204]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 8000e06:	4b32      	ldr	r3, [pc, #200]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e08:	2206      	movs	r2, #6
 8000e0a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e0c:	4b30      	ldr	r3, [pc, #192]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000e12:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e14:	2202      	movs	r2, #2
 8000e16:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8000e18:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e1a:	2205      	movs	r2, #5
 8000e1c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e24:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e2a:	4b29      	ldr	r3, [pc, #164]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e30:	4b27      	ldr	r3, [pc, #156]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000e36:	4b26      	ldr	r3, [pc, #152]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000e3c:	4b24      	ldr	r3, [pc, #144]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000e42:	4b23      	ldr	r3, [pc, #140]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000e48:	4b21      	ldr	r3, [pc, #132]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e4a:	2220      	movs	r2, #32
 8000e4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e4e:	4b20      	ldr	r3, [pc, #128]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e50:	2204      	movs	r2, #4
 8000e52:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8000e54:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e56:	2220      	movs	r2, #32
 8000e58:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e5c:	2204      	movs	r2, #4
 8000e5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000e60:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e66:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e68:	2204      	movs	r2, #4
 8000e6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000e6c:	4b18      	ldr	r3, [pc, #96]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000e72:	4b17      	ldr	r3, [pc, #92]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000e78:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e7a:	2220      	movs	r2, #32
 8000e7c:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e7e:	4b14      	ldr	r3, [pc, #80]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e84:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e86:	2204      	movs	r2, #4
 8000e88:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000e8a:	4811      	ldr	r0, [pc, #68]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000e8c:	f003 fa22 	bl	80042d4 <HAL_FDCAN_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000e96:	f000 fc2f 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4806      	ldr	r0, [pc, #24]	@ (8000ed0 <MX_FDCAN1_Init+0xf4>)
 8000eb8:	f003 fbea 	bl	8004690 <HAL_FDCAN_ConfigFilter>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_FDCAN1_Init+0xea>
  {
    Error_Handler();
 8000ec2:	f000 fc19 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	3720      	adds	r7, #32
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	24000178 	.word	0x24000178
 8000ed4:	4000a000 	.word	0x4000a000

08000ed8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000ede:	4b3b      	ldr	r3, [pc, #236]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000ee0:	4a3b      	ldr	r2, [pc, #236]	@ (8000fd0 <MX_FDCAN2_Init+0xf8>)
 8000ee2:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ee4:	4b39      	ldr	r3, [pc, #228]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000eea:	4b38      	ldr	r3, [pc, #224]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000ef0:	4b36      	ldr	r3, [pc, #216]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000ef6:	4b35      	ldr	r3, [pc, #212]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000efc:	4b33      	ldr	r3, [pc, #204]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 8000f02:	4b32      	ldr	r3, [pc, #200]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f04:	2206      	movs	r2, #6
 8000f06:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000f08:	4b30      	ldr	r3, [pc, #192]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 10;
 8000f0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f10:	220a      	movs	r2, #10
 8000f12:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8000f14:	4b2d      	ldr	r3, [pc, #180]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f16:	2205      	movs	r2, #5
 8000f18:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000f20:	4b2a      	ldr	r3, [pc, #168]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000f26:	4b29      	ldr	r3, [pc, #164]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000f2c:	4b27      	ldr	r3, [pc, #156]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000f32:	4b26      	ldr	r3, [pc, #152]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 8000f38:	4b24      	ldr	r3, [pc, #144]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 1;
 8000f3e:	4b23      	ldr	r3, [pc, #140]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 16;
 8000f44:	4b21      	ldr	r3, [pc, #132]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f46:	2210      	movs	r2, #16
 8000f48:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f4a:	4b20      	ldr	r3, [pc, #128]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 16;
 8000f50:	4b1e      	ldr	r3, [pc, #120]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f52:	2210      	movs	r2, #16
 8000f54:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f56:	4b1d      	ldr	r3, [pc, #116]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f58:	2204      	movs	r2, #4
 8000f5a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f62:	4b1a      	ldr	r3, [pc, #104]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f64:	2204      	movs	r2, #4
 8000f66:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000f68:	4b18      	ldr	r3, [pc, #96]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000f6e:	4b17      	ldr	r3, [pc, #92]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 16;
 8000f74:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f76:	2210      	movs	r2, #16
 8000f78:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f7a:	4b14      	ldr	r3, [pc, #80]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000f80:	4b12      	ldr	r3, [pc, #72]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f82:	2204      	movs	r2, #4
 8000f84:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000f86:	4811      	ldr	r0, [pc, #68]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000f88:	f003 f9a4 	bl	80042d4 <HAL_FDCAN_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8000f92:	f000 fbb1 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000f96:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f9a:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4805      	ldr	r0, [pc, #20]	@ (8000fcc <MX_FDCAN2_Init+0xf4>)
 8000fb6:	f003 fb6b 	bl	8004690 <HAL_FDCAN_ConfigFilter>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_FDCAN2_Init+0xec>
  {
    Error_Handler();
 8000fc0:	f000 fb9a 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE END FDCAN2_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	3720      	adds	r7, #32
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	24000218 	.word	0x24000218
 8000fd0:	4000a400 	.word	0x4000a400

08000fd4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b09c      	sub	sp, #112	@ 0x70
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fda:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
 8001004:	615a      	str	r2, [r3, #20]
 8001006:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	2234      	movs	r2, #52	@ 0x34
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f00a fcf0 	bl	800b9f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001014:	4b49      	ldr	r3, [pc, #292]	@ (800113c <MX_TIM1_Init+0x168>)
 8001016:	4a4a      	ldr	r2, [pc, #296]	@ (8001140 <MX_TIM1_Init+0x16c>)
 8001018:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800101a:	4b48      	ldr	r3, [pc, #288]	@ (800113c <MX_TIM1_Init+0x168>)
 800101c:	2200      	movs	r2, #0
 800101e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001020:	4b46      	ldr	r3, [pc, #280]	@ (800113c <MX_TIM1_Init+0x168>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001026:	4b45      	ldr	r3, [pc, #276]	@ (800113c <MX_TIM1_Init+0x168>)
 8001028:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800102c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102e:	4b43      	ldr	r3, [pc, #268]	@ (800113c <MX_TIM1_Init+0x168>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001034:	4b41      	ldr	r3, [pc, #260]	@ (800113c <MX_TIM1_Init+0x168>)
 8001036:	2200      	movs	r2, #0
 8001038:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800103a:	4b40      	ldr	r3, [pc, #256]	@ (800113c <MX_TIM1_Init+0x168>)
 800103c:	2280      	movs	r2, #128	@ 0x80
 800103e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001040:	483e      	ldr	r0, [pc, #248]	@ (800113c <MX_TIM1_Init+0x168>)
 8001042:	f008 f863 	bl	800910c <HAL_TIM_Base_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800104c:	f000 fb54 	bl	80016f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001050:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001054:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001056:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800105a:	4619      	mov	r1, r3
 800105c:	4837      	ldr	r0, [pc, #220]	@ (800113c <MX_TIM1_Init+0x168>)
 800105e:	f008 fbaf 	bl	80097c0 <HAL_TIM_ConfigClockSource>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001068:	f000 fb46 	bl	80016f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800106c:	4833      	ldr	r0, [pc, #204]	@ (800113c <MX_TIM1_Init+0x168>)
 800106e:	f008 f92b 	bl	80092c8 <HAL_TIM_PWM_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001078:	f000 fb3e 	bl	80016f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800107c:	2300      	movs	r3, #0
 800107e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001080:	2300      	movs	r3, #0
 8001082:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001088:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800108c:	4619      	mov	r1, r3
 800108e:	482b      	ldr	r0, [pc, #172]	@ (800113c <MX_TIM1_Init+0x168>)
 8001090:	f009 f8dc 	bl	800a24c <HAL_TIMEx_MasterConfigSynchronization>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800109a:	f000 fb2d 	bl	80016f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800109e:	2360      	movs	r3, #96	@ 0x60
 80010a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a6:	2300      	movs	r3, #0
 80010a8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010aa:	2300      	movs	r3, #0
 80010ac:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010b2:	2300      	movs	r3, #0
 80010b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010b6:	2300      	movs	r3, #0
 80010b8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010be:	2200      	movs	r2, #0
 80010c0:	4619      	mov	r1, r3
 80010c2:	481e      	ldr	r0, [pc, #120]	@ (800113c <MX_TIM1_Init+0x168>)
 80010c4:	f008 fa68 	bl	8009598 <HAL_TIM_PWM_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80010ce:	f000 fb13 	bl	80016f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010d6:	2204      	movs	r2, #4
 80010d8:	4619      	mov	r1, r3
 80010da:	4818      	ldr	r0, [pc, #96]	@ (800113c <MX_TIM1_Init+0x168>)
 80010dc:	f008 fa5c 	bl	8009598 <HAL_TIM_PWM_ConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80010e6:	f000 fb07 	bl	80016f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001102:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800110c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001110:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	4619      	mov	r1, r3
 800111e:	4807      	ldr	r0, [pc, #28]	@ (800113c <MX_TIM1_Init+0x168>)
 8001120:	f009 f930 	bl	800a384 <HAL_TIMEx_ConfigBreakDeadTime>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800112a:	f000 fae5 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800112e:	4803      	ldr	r0, [pc, #12]	@ (800113c <MX_TIM1_Init+0x168>)
 8001130:	f000 fd26 	bl	8001b80 <HAL_TIM_MspPostInit>

}
 8001134:	bf00      	nop
 8001136:	3770      	adds	r7, #112	@ 0x70
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	240002b8 	.word	0x240002b8
 8001140:	40010000 	.word	0x40010000

08001144 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001148:	4b10      	ldr	r3, [pc, #64]	@ (800118c <MX_TIM16_Init+0x48>)
 800114a:	4a11      	ldr	r2, [pc, #68]	@ (8001190 <MX_TIM16_Init+0x4c>)
 800114c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2640- 1;
 800114e:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <MX_TIM16_Init+0x48>)
 8001150:	f640 224f 	movw	r2, #2639	@ 0xa4f
 8001154:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001156:	4b0d      	ldr	r3, [pc, #52]	@ (800118c <MX_TIM16_Init+0x48>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 - 1;
 800115c:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <MX_TIM16_Init+0x48>)
 800115e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001162:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001164:	4b09      	ldr	r3, [pc, #36]	@ (800118c <MX_TIM16_Init+0x48>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800116a:	4b08      	ldr	r3, [pc, #32]	@ (800118c <MX_TIM16_Init+0x48>)
 800116c:	2200      	movs	r2, #0
 800116e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001170:	4b06      	ldr	r3, [pc, #24]	@ (800118c <MX_TIM16_Init+0x48>)
 8001172:	2200      	movs	r2, #0
 8001174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	@ (800118c <MX_TIM16_Init+0x48>)
 8001178:	f007 ffc8 	bl	800910c <HAL_TIM_Base_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001182:	f000 fab9 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	24000304 	.word	0x24000304
 8001190:	40014400 	.word	0x40014400

08001194 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001198:	4b22      	ldr	r3, [pc, #136]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 800119a:	4a23      	ldr	r2, [pc, #140]	@ (8001228 <MX_USART1_UART_Init+0x94>)
 800119c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800119e:	4b21      	ldr	r3, [pc, #132]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 80011a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 80011ba:	220c      	movs	r2, #12
 80011bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011be:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c4:	4b17      	ldr	r3, [pc, #92]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ca:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011d0:	4b14      	ldr	r3, [pc, #80]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011d6:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 80011d8:	2200      	movs	r2, #0
 80011da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011dc:	4811      	ldr	r0, [pc, #68]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 80011de:	f009 f97b 	bl	800a4d8 <HAL_UART_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80011e8:	f000 fa86 	bl	80016f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ec:	2100      	movs	r1, #0
 80011ee:	480d      	ldr	r0, [pc, #52]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 80011f0:	f00a fb15 	bl	800b81e <HAL_UARTEx_SetTxFifoThreshold>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80011fa:	f000 fa7d 	bl	80016f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011fe:	2100      	movs	r1, #0
 8001200:	4808      	ldr	r0, [pc, #32]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 8001202:	f00a fb4a 	bl	800b89a <HAL_UARTEx_SetRxFifoThreshold>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800120c:	f000 fa74 	bl	80016f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001210:	4804      	ldr	r0, [pc, #16]	@ (8001224 <MX_USART1_UART_Init+0x90>)
 8001212:	f00a facb 	bl	800b7ac <HAL_UARTEx_DisableFifoMode>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800121c:	f000 fa6c 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	24000350 	.word	0x24000350
 8001228:	40011000 	.word	0x40011000

0800122c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001230:	4b22      	ldr	r3, [pc, #136]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 8001232:	4a23      	ldr	r2, [pc, #140]	@ (80012c0 <MX_USART2_UART_Init+0x94>)
 8001234:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001236:	4b21      	ldr	r3, [pc, #132]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 8001238:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800123c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800123e:	4b1f      	ldr	r3, [pc, #124]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001244:	4b1d      	ldr	r3, [pc, #116]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800124a:	4b1c      	ldr	r3, [pc, #112]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001250:	4b1a      	ldr	r3, [pc, #104]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 8001252:	220c      	movs	r2, #12
 8001254:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001256:	4b19      	ldr	r3, [pc, #100]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800125c:	4b17      	ldr	r3, [pc, #92]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001262:	4b16      	ldr	r3, [pc, #88]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 8001264:	2200      	movs	r2, #0
 8001266:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001268:	4b14      	ldr	r3, [pc, #80]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 800126a:	2200      	movs	r2, #0
 800126c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800126e:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 8001270:	2200      	movs	r2, #0
 8001272:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001274:	4811      	ldr	r0, [pc, #68]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 8001276:	f009 f92f 	bl	800a4d8 <HAL_UART_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001280:	f000 fa3a 	bl	80016f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001284:	2100      	movs	r1, #0
 8001286:	480d      	ldr	r0, [pc, #52]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 8001288:	f00a fac9 	bl	800b81e <HAL_UARTEx_SetTxFifoThreshold>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001292:	f000 fa31 	bl	80016f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001296:	2100      	movs	r1, #0
 8001298:	4808      	ldr	r0, [pc, #32]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 800129a:	f00a fafe 	bl	800b89a <HAL_UARTEx_SetRxFifoThreshold>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80012a4:	f000 fa28 	bl	80016f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80012a8:	4804      	ldr	r0, [pc, #16]	@ (80012bc <MX_USART2_UART_Init+0x90>)
 80012aa:	f00a fa7f 	bl	800b7ac <HAL_UARTEx_DisableFifoMode>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80012b4:	f000 fa20 	bl	80016f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	240003e4 	.word	0x240003e4
 80012c0:	40004400 	.word	0x40004400

080012c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08e      	sub	sp, #56	@ 0x38
 80012c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012da:	4b60      	ldr	r3, [pc, #384]	@ (800145c <MX_GPIO_Init+0x198>)
 80012dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e0:	4a5e      	ldr	r2, [pc, #376]	@ (800145c <MX_GPIO_Init+0x198>)
 80012e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012ea:	4b5c      	ldr	r3, [pc, #368]	@ (800145c <MX_GPIO_Init+0x198>)
 80012ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012f4:	623b      	str	r3, [r7, #32]
 80012f6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f8:	4b58      	ldr	r3, [pc, #352]	@ (800145c <MX_GPIO_Init+0x198>)
 80012fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fe:	4a57      	ldr	r2, [pc, #348]	@ (800145c <MX_GPIO_Init+0x198>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001308:	4b54      	ldr	r3, [pc, #336]	@ (800145c <MX_GPIO_Init+0x198>)
 800130a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	61fb      	str	r3, [r7, #28]
 8001314:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	4b51      	ldr	r3, [pc, #324]	@ (800145c <MX_GPIO_Init+0x198>)
 8001318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131c:	4a4f      	ldr	r2, [pc, #316]	@ (800145c <MX_GPIO_Init+0x198>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001326:	4b4d      	ldr	r3, [pc, #308]	@ (800145c <MX_GPIO_Init+0x198>)
 8001328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	61bb      	str	r3, [r7, #24]
 8001332:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001334:	4b49      	ldr	r3, [pc, #292]	@ (800145c <MX_GPIO_Init+0x198>)
 8001336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800133a:	4a48      	ldr	r2, [pc, #288]	@ (800145c <MX_GPIO_Init+0x198>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001344:	4b45      	ldr	r3, [pc, #276]	@ (800145c <MX_GPIO_Init+0x198>)
 8001346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001352:	4b42      	ldr	r3, [pc, #264]	@ (800145c <MX_GPIO_Init+0x198>)
 8001354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001358:	4a40      	ldr	r2, [pc, #256]	@ (800145c <MX_GPIO_Init+0x198>)
 800135a:	f043 0320 	orr.w	r3, r3, #32
 800135e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001362:	4b3e      	ldr	r3, [pc, #248]	@ (800145c <MX_GPIO_Init+0x198>)
 8001364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001368:	f003 0320 	and.w	r3, r3, #32
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001370:	4b3a      	ldr	r3, [pc, #232]	@ (800145c <MX_GPIO_Init+0x198>)
 8001372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001376:	4a39      	ldr	r2, [pc, #228]	@ (800145c <MX_GPIO_Init+0x198>)
 8001378:	f043 0310 	orr.w	r3, r3, #16
 800137c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001380:	4b36      	ldr	r3, [pc, #216]	@ (800145c <MX_GPIO_Init+0x198>)
 8001382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001386:	f003 0310 	and.w	r3, r3, #16
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800138e:	4b33      	ldr	r3, [pc, #204]	@ (800145c <MX_GPIO_Init+0x198>)
 8001390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001394:	4a31      	ldr	r2, [pc, #196]	@ (800145c <MX_GPIO_Init+0x198>)
 8001396:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800139a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800139e:	4b2f      	ldr	r3, [pc, #188]	@ (800145c <MX_GPIO_Init+0x198>)
 80013a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ac:	4b2b      	ldr	r3, [pc, #172]	@ (800145c <MX_GPIO_Init+0x198>)
 80013ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b2:	4a2a      	ldr	r2, [pc, #168]	@ (800145c <MX_GPIO_Init+0x198>)
 80013b4:	f043 0308 	orr.w	r3, r3, #8
 80013b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013bc:	4b27      	ldr	r3, [pc, #156]	@ (800145c <MX_GPIO_Init+0x198>)
 80013be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, START_BUTTON_LED_Pin|RTDS_Pin, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2103      	movs	r1, #3
 80013ce:	4824      	ldr	r0, [pc, #144]	@ (8001460 <MX_GPIO_Init+0x19c>)
 80013d0:	f004 fafc 	bl	80059cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_Data_GPIO_Port, DS18B20_Data_Pin, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013da:	4822      	ldr	r0, [pc, #136]	@ (8001464 <MX_GPIO_Init+0x1a0>)
 80013dc:	f004 faf6 	bl	80059cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_BUTTON_LED_Pin RTDS_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_LED_Pin|RTDS_Pin;
 80013e0:	2303      	movs	r3, #3
 80013e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f4:	4619      	mov	r1, r3
 80013f6:	481a      	ldr	r0, [pc, #104]	@ (8001460 <MX_GPIO_Init+0x19c>)
 80013f8:	f004 f928 	bl	800564c <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_Data_Pin */
  GPIO_InitStruct.Pin = DS18B20_Data_Pin;
 80013fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001400:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001402:	2301      	movs	r3, #1
 8001404:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DS18B20_Data_GPIO_Port, &GPIO_InitStruct);
 800140e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001412:	4619      	mov	r1, r3
 8001414:	4813      	ldr	r0, [pc, #76]	@ (8001464 <MX_GPIO_Init+0x1a0>)
 8001416:	f004 f919 	bl	800564c <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141e:	2300      	movs	r3, #0
 8001420:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800142a:	4619      	mov	r1, r3
 800142c:	480e      	ldr	r0, [pc, #56]	@ (8001468 <MX_GPIO_Init+0x1a4>)
 800142e:	f004 f90d 	bl	800564c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001432:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001436:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8001444:	2302      	movs	r3, #2
 8001446:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001448:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800144c:	4619      	mov	r1, r3
 800144e:	4806      	ldr	r0, [pc, #24]	@ (8001468 <MX_GPIO_Init+0x1a4>)
 8001450:	f004 f8fc 	bl	800564c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001454:	bf00      	nop
 8001456:	3738      	adds	r7, #56	@ 0x38
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	58024400 	.word	0x58024400
 8001460:	58020800 	.word	0x58020800
 8001464:	58021000 	.word	0x58021000
 8001468:	58021800 	.word	0x58021800

0800146c <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[]){
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	4909      	ldr	r1, [pc, #36]	@ (800149c <print+0x30>)
 8001478:	4809      	ldr	r0, [pc, #36]	@ (80014a0 <print+0x34>)
 800147a:	f00a fa9b 	bl	800b9b4 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 800147e:	4808      	ldr	r0, [pc, #32]	@ (80014a0 <print+0x34>)
 8001480:	f7fe ff46 	bl	8000310 <strlen>
 8001484:	4603      	mov	r3, r0
 8001486:	b29a      	uxth	r2, r3
 8001488:	f04f 33ff 	mov.w	r3, #4294967295
 800148c:	4904      	ldr	r1, [pc, #16]	@ (80014a0 <print+0x34>)
 800148e:	4805      	ldr	r0, [pc, #20]	@ (80014a4 <print+0x38>)
 8001490:	f009 f872 	bl	800a578 <HAL_UART_Transmit>

}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	0800c4a4 	.word	0x0800c4a4
 80014a0:	24000540 	.word	0x24000540
 80014a4:	240003e4 	.word	0x240003e4

080014a8 <printValue>:

void printValue(int value){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	4909      	ldr	r1, [pc, #36]	@ (80014d8 <printValue+0x30>)
 80014b4:	4809      	ldr	r0, [pc, #36]	@ (80014dc <printValue+0x34>)
 80014b6:	f00a fa7d 	bl	800b9b4 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 80014ba:	4808      	ldr	r0, [pc, #32]	@ (80014dc <printValue+0x34>)
 80014bc:	f7fe ff28 	bl	8000310 <strlen>
 80014c0:	4603      	mov	r3, r0
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	f04f 33ff 	mov.w	r3, #4294967295
 80014c8:	4904      	ldr	r1, [pc, #16]	@ (80014dc <printValue+0x34>)
 80014ca:	4805      	ldr	r0, [pc, #20]	@ (80014e0 <printValue+0x38>)
 80014cc:	f009 f854 	bl	800a578 <HAL_UART_Transmit>

}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	0800c4ac 	.word	0x0800c4ac
 80014dc:	24000540 	.word	0x24000540
 80014e0:	240003e4 	.word	0x240003e4

080014e4 <printHex>:

void printHex(uint8_t value){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
	sprintf(uart_msg, "%02X \n\r", value);
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4909      	ldr	r1, [pc, #36]	@ (8001518 <printHex+0x34>)
 80014f4:	4809      	ldr	r0, [pc, #36]	@ (800151c <printHex+0x38>)
 80014f6:	f00a fa5d 	bl	800b9b4 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 80014fa:	4808      	ldr	r0, [pc, #32]	@ (800151c <printHex+0x38>)
 80014fc:	f7fe ff08 	bl	8000310 <strlen>
 8001500:	4603      	mov	r3, r0
 8001502:	b29a      	uxth	r2, r3
 8001504:	f04f 33ff 	mov.w	r3, #4294967295
 8001508:	4904      	ldr	r1, [pc, #16]	@ (800151c <printHex+0x38>)
 800150a:	4805      	ldr	r0, [pc, #20]	@ (8001520 <printHex+0x3c>)
 800150c:	f009 f834 	bl	800a578 <HAL_UART_Transmit>
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	0800c4b4 	.word	0x0800c4b4
 800151c:	24000540 	.word	0x24000540
 8001520:	240003e4 	.word	0x240003e4

08001524 <ADC1_Select_SF>:
	{
	  Error_Handler();
	}
}

void ADC1_Select_SF (void){
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	@ 0x28
 8001528:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	2224      	movs	r2, #36	@ 0x24
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f00a fa5f 	bl	800b9f4 <memset>
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	sConfig.Channel = ADC_CHANNEL_2;
 8001536:	4b0d      	ldr	r3, [pc, #52]	@ (800156c <ADC1_Select_SF+0x48>)
 8001538:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800153a:	2306      	movs	r3, #6
 800153c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLE_5;
 800153e:	2301      	movs	r3, #1
 8001540:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001542:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001546:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001548:	2304      	movs	r3, #4
 800154a:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	4619      	mov	r1, r3
 8001554:	4806      	ldr	r0, [pc, #24]	@ (8001570 <ADC1_Select_SF+0x4c>)
 8001556:	f001 fce1 	bl	8002f1c <HAL_ADC_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <ADC1_Select_SF+0x40>
	{
	  Error_Handler();
 8001560:	f000 f8ca 	bl	80016f8 <Error_Handler>
	}
}
 8001564:	bf00      	nop
 8001566:	3728      	adds	r7, #40	@ 0x28
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	08600004 	.word	0x08600004
 8001570:	24000098 	.word	0x24000098

08001574 <HAL_FDCAN_RxFifo0Callback>:
	  Error_Handler();
	}
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d021      	beq.n	80015cc <HAL_FDCAN_RxFifo0Callback+0x58>
  {
    /* Retreive Rx messages from RX FIFO1 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Acu, RxData_Acu) == HAL_OK)
 8001588:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <HAL_FDCAN_RxFifo0Callback+0x60>)
 800158a:	4a13      	ldr	r2, [pc, #76]	@ (80015d8 <HAL_FDCAN_RxFifo0Callback+0x64>)
 800158c:	2140      	movs	r1, #64	@ 0x40
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f003 f97a 	bl	8004888 <HAL_FDCAN_GetRxMessage>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10e      	bne.n	80015b8 <HAL_FDCAN_RxFifo0Callback+0x44>
    {
		switch (RxHeader_Acu.Identifier){
 800159a:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <HAL_FDCAN_RxFifo0Callback+0x64>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b20      	cmp	r3, #32
 80015a0:	d10a      	bne.n	80015b8 <HAL_FDCAN_RxFifo0Callback+0x44>
			case 0x20://ID_ack_precarga:
				if(RxData_Acu[0] == 0){
 80015a2:	4b0c      	ldr	r3, [pc, #48]	@ (80015d4 <HAL_FDCAN_RxFifo0Callback+0x60>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d105      	bne.n	80015b6 <HAL_FDCAN_RxFifo0Callback+0x42>
					precarga_inv = 1;
 80015aa:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <HAL_FDCAN_RxFifo0Callback+0x68>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	601a      	str	r2, [r3, #0]
					#if DEBUG
					print("CAN_ACU: Precarga correcta");
 80015b0:	480b      	ldr	r0, [pc, #44]	@ (80015e0 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 80015b2:	f7ff ff5b 	bl	800146c <print>
					#endif
				}
				break;
 80015b6:	bf00      	nop
		}

    }

    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80015b8:	2200      	movs	r2, #0
 80015ba:	2101      	movs	r1, #1
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f003 facf 	bl	8004b60 <HAL_FDCAN_ActivateNotification>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <HAL_FDCAN_RxFifo0Callback+0x58>
    {
      /* Notification Error */
      Error_Handler();
 80015c8:	f000 f896 	bl	80016f8 <Error_Handler>
    }
  }
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	24000528 	.word	0x24000528
 80015d8:	240004e8 	.word	0x240004e8
 80015dc:	2400008c 	.word	0x2400008c
 80015e0:	0800c4bc 	.word	0x0800c4bc

080015e4 <HAL_TIM_PeriodElapsedCallback>:
	return torque_real;
}



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	if(htim == &htim16){
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a38      	ldr	r2, [pc, #224]	@ (80016d0 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d168      	bne.n	80016c6 <HAL_TIM_PeriodElapsedCallback+0xe2>
		 // ---------- CONTROL DEL INVERSOR ----------
		if(state == 4){
 80015f4:	4b37      	ldr	r3, [pc, #220]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	d11c      	bne.n	8001636 <HAL_TIM_PeriodElapsedCallback+0x52>
			TxHeader_Inv.Identifier = 0x362;
 80015fc:	4b36      	ldr	r3, [pc, #216]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80015fe:	f240 3262 	movw	r2, #866	@ 0x362
 8001602:	601a      	str	r2, [r3, #0]
			TxHeader_Inv.DataLength = 4;
 8001604:	4b34      	ldr	r3, [pc, #208]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001606:	2204      	movs	r2, #4
 8001608:	60da      	str	r2, [r3, #12]

			real_torque = 0;
 800160a:	4b34      	ldr	r3, [pc, #208]	@ (80016dc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800160c:	2200      	movs	r2, #0
 800160e:	801a      	strh	r2, [r3, #0]

			TxData_Inv[0] = 0x0;
 8001610:	4b33      	ldr	r3, [pc, #204]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001616:	4b32      	ldr	r3, [pc, #200]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001618:	2200      	movs	r2, #0
 800161a:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = real_torque;
 800161c:	4b2f      	ldr	r3, [pc, #188]	@ (80016dc <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4b2f      	ldr	r3, [pc, #188]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001624:	709a      	strb	r2, [r3, #2]
			TxData_Inv[3] = 0x0;
 8001626:	4b2e      	ldr	r3, [pc, #184]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001628:	2200      	movs	r2, #0
 800162a:	70da      	strb	r2, [r3, #3]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 800162c:	4a2c      	ldr	r2, [pc, #176]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800162e:	492a      	ldr	r1, [pc, #168]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001630:	482c      	ldr	r0, [pc, #176]	@ (80016e4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001632:	f003 f8ce 	bl	80047d2 <HAL_FDCAN_AddMessageToTxFifoQ>
		}
		if(state == 6){
 8001636:	4b27      	ldr	r3, [pc, #156]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b06      	cmp	r3, #6
 800163c:	d137      	bne.n	80016ae <HAL_TIM_PeriodElapsedCallback+0xca>
			print("state: torque");
 800163e:	482a      	ldr	r0, [pc, #168]	@ (80016e8 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001640:	f7ff ff14 	bl	800146c <print>

			//Estado TORQUE inversor
			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001644:	4b29      	ldr	r3, [pc, #164]	@ (80016ec <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a23      	ldr	r2, [pc, #140]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800164a:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 800164c:	4b22      	ldr	r3, [pc, #136]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800164e:	2203      	movs	r2, #3
 8001650:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001652:	4b21      	ldr	r3, [pc, #132]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001654:	2200      	movs	r2, #0
 8001656:	605a      	str	r2, [r3, #4]


			TxData_Inv[0] = 0x0;
 8001658:	4b21      	ldr	r3, [pc, #132]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 800165e:	4b20      	ldr	r3, [pc, #128]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001660:	2200      	movs	r2, #0
 8001662:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x6;
 8001664:	4b1e      	ldr	r3, [pc, #120]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001666:	2206      	movs	r2, #6
 8001668:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 800166a:	4a1d      	ldr	r2, [pc, #116]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800166c:	491a      	ldr	r1, [pc, #104]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800166e:	481d      	ldr	r0, [pc, #116]	@ (80016e4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001670:	f003 f8af 	bl	80047d2 <HAL_FDCAN_AddMessageToTxFifoQ>

			//Request TORQUE inversor
			TxHeader_Inv.Identifier = 0x362;
 8001674:	4b18      	ldr	r3, [pc, #96]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001676:	f240 3262 	movw	r2, #866	@ 0x362
 800167a:	601a      	str	r2, [r3, #0]
			TxHeader_Inv.DataLength = 4;
 800167c:	4b16      	ldr	r3, [pc, #88]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800167e:	2204      	movs	r2, #4
 8001680:	60da      	str	r2, [r3, #12]

			//real_torque = setTorque();

			TxData_Inv[0] = 0x0;
 8001682:	4b17      	ldr	r3, [pc, #92]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001688:	4b15      	ldr	r3, [pc, #84]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800168a:	2200      	movs	r2, #0
 800168c:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0xFB; //torque 0 - 240
 800168e:	4b14      	ldr	r3, [pc, #80]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001690:	22fb      	movs	r2, #251	@ 0xfb
 8001692:	709a      	strb	r2, [r3, #2]
			TxData_Inv[3] = 0xFF; //negative torque
 8001694:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001696:	22ff      	movs	r2, #255	@ 0xff
 8001698:	70da      	strb	r2, [r3, #3]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 800169a:	4a11      	ldr	r2, [pc, #68]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800169c:	490e      	ldr	r1, [pc, #56]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800169e:	4811      	ldr	r0, [pc, #68]	@ (80016e4 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80016a0:	f003 f897 	bl	80047d2 <HAL_FDCAN_AddMessageToTxFifoQ>

			printValue(TxData_Inv[2]);
 80016a4:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80016a6:	789b      	ldrb	r3, [r3, #2]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fefd 	bl	80014a8 <printValue>
		}
		if(state == 10){
 80016ae:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b0a      	cmp	r3, #10
 80016b4:	d107      	bne.n	80016c6 <HAL_TIM_PeriodElapsedCallback+0xe2>
			print("state: soft fault");
 80016b6:	480e      	ldr	r0, [pc, #56]	@ (80016f0 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80016b8:	f7ff fed8 	bl	800146c <print>
			printValue(error);
 80016bc:	4b0d      	ldr	r3, [pc, #52]	@ (80016f4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fef1 	bl	80014a8 <printValue>
		}


	}
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	24000304 	.word	0x24000304
 80016d4:	2400053e 	.word	0x2400053e
 80016d8:	24000478 	.word	0x24000478
 80016dc:	2400053c 	.word	0x2400053c
 80016e0:	24000510 	.word	0x24000510
 80016e4:	24000178 	.word	0x24000178
 80016e8:	0800c570 	.word	0x0800c570
 80016ec:	24000008 	.word	0x24000008
 80016f0:	0800c580 	.word	0x0800c580
 80016f4:	240005a4 	.word	0x240005a4

080016f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016fc:	b672      	cpsid	i
}
 80016fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <Error_Handler+0x8>

08001704 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170a:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <HAL_MspInit+0x30>)
 800170c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001710:	4a08      	ldr	r2, [pc, #32]	@ (8001734 <HAL_MspInit+0x30>)
 8001712:	f043 0302 	orr.w	r3, r3, #2
 8001716:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800171a:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <HAL_MspInit+0x30>)
 800171c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	58024400 	.word	0x58024400

08001738 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b090      	sub	sp, #64	@ 0x40
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a70      	ldr	r2, [pc, #448]	@ (8001918 <HAL_ADC_MspInit+0x1e0>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d16a      	bne.n	8001830 <HAL_ADC_MspInit+0xf8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800175a:	4b70      	ldr	r3, [pc, #448]	@ (800191c <HAL_ADC_MspInit+0x1e4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	3301      	adds	r3, #1
 8001760:	4a6e      	ldr	r2, [pc, #440]	@ (800191c <HAL_ADC_MspInit+0x1e4>)
 8001762:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001764:	4b6d      	ldr	r3, [pc, #436]	@ (800191c <HAL_ADC_MspInit+0x1e4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d10e      	bne.n	800178a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800176c:	4b6c      	ldr	r3, [pc, #432]	@ (8001920 <HAL_ADC_MspInit+0x1e8>)
 800176e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001772:	4a6b      	ldr	r2, [pc, #428]	@ (8001920 <HAL_ADC_MspInit+0x1e8>)
 8001774:	f043 0320 	orr.w	r3, r3, #32
 8001778:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800177c:	4b68      	ldr	r3, [pc, #416]	@ (8001920 <HAL_ADC_MspInit+0x1e8>)
 800177e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001782:	f003 0320 	and.w	r3, r3, #32
 8001786:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800178a:	4b65      	ldr	r3, [pc, #404]	@ (8001920 <HAL_ADC_MspInit+0x1e8>)
 800178c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001790:	4a63      	ldr	r2, [pc, #396]	@ (8001920 <HAL_ADC_MspInit+0x1e8>)
 8001792:	f043 0304 	orr.w	r3, r3, #4
 8001796:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800179a:	4b61      	ldr	r3, [pc, #388]	@ (8001920 <HAL_ADC_MspInit+0x1e8>)
 800179c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80017a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a8:	4b5d      	ldr	r3, [pc, #372]	@ (8001920 <HAL_ADC_MspInit+0x1e8>)
 80017aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ae:	4a5c      	ldr	r2, [pc, #368]	@ (8001920 <HAL_ADC_MspInit+0x1e8>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017b8:	4b59      	ldr	r3, [pc, #356]	@ (8001920 <HAL_ADC_MspInit+0x1e8>)
 80017ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	623b      	str	r3, [r7, #32]
 80017c4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017c6:	4b56      	ldr	r3, [pc, #344]	@ (8001920 <HAL_ADC_MspInit+0x1e8>)
 80017c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017cc:	4a54      	ldr	r2, [pc, #336]	@ (8001920 <HAL_ADC_MspInit+0x1e8>)
 80017ce:	f043 0320 	orr.w	r3, r3, #32
 80017d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017d6:	4b52      	ldr	r3, [pc, #328]	@ (8001920 <HAL_ADC_MspInit+0x1e8>)
 80017d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017dc:	f003 0320 	and.w	r3, r3, #32
 80017e0:	61fb      	str	r3, [r7, #28]
 80017e2:	69fb      	ldr	r3, [r7, #28]
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = S_APPS_1_Pin|SUSPENSION_RL_Pin;
 80017e4:	2330      	movs	r3, #48	@ 0x30
 80017e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017e8:	2303      	movs	r3, #3
 80017ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017f4:	4619      	mov	r1, r3
 80017f6:	484b      	ldr	r0, [pc, #300]	@ (8001924 <HAL_ADC_MspInit+0x1ec>)
 80017f8:	f003 ff28 	bl	800564c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin|S_APPS_2_Pin;
 80017fc:	2303      	movs	r3, #3
 80017fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001800:	2303      	movs	r3, #3
 8001802:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001808:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800180c:	4619      	mov	r1, r3
 800180e:	4846      	ldr	r0, [pc, #280]	@ (8001928 <HAL_ADC_MspInit+0x1f0>)
 8001810:	f003 ff1c 	bl	800564c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_FRENO_Pin;
 8001814:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001818:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800181a:	2303      	movs	r3, #3
 800181c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(S_FRENO_GPIO_Port, &GPIO_InitStruct);
 8001822:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001826:	4619      	mov	r1, r3
 8001828:	4840      	ldr	r0, [pc, #256]	@ (800192c <HAL_ADC_MspInit+0x1f4>)
 800182a:	f003 ff0f 	bl	800564c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800182e:	e06e      	b.n	800190e <HAL_ADC_MspInit+0x1d6>
  else if(hadc->Instance==ADC2)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a3e      	ldr	r2, [pc, #248]	@ (8001930 <HAL_ADC_MspInit+0x1f8>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d169      	bne.n	800190e <HAL_ADC_MspInit+0x1d6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800183a:	4b38      	ldr	r3, [pc, #224]	@ (800191c <HAL_ADC_MspInit+0x1e4>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	3301      	adds	r3, #1
 8001840:	4a36      	ldr	r2, [pc, #216]	@ (800191c <HAL_ADC_MspInit+0x1e4>)
 8001842:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001844:	4b35      	ldr	r3, [pc, #212]	@ (800191c <HAL_ADC_MspInit+0x1e4>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d10e      	bne.n	800186a <HAL_ADC_MspInit+0x132>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800184c:	4b34      	ldr	r3, [pc, #208]	@ (8001920 <HAL_ADC_MspInit+0x1e8>)
 800184e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001852:	4a33      	ldr	r2, [pc, #204]	@ (8001920 <HAL_ADC_MspInit+0x1e8>)
 8001854:	f043 0320 	orr.w	r3, r3, #32
 8001858:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800185c:	4b30      	ldr	r3, [pc, #192]	@ (8001920 <HAL_ADC_MspInit+0x1e8>)
 800185e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001862:	f003 0320 	and.w	r3, r3, #32
 8001866:	61bb      	str	r3, [r7, #24]
 8001868:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800186a:	4b2d      	ldr	r3, [pc, #180]	@ (8001920 <HAL_ADC_MspInit+0x1e8>)
 800186c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001870:	4a2b      	ldr	r2, [pc, #172]	@ (8001920 <HAL_ADC_MspInit+0x1e8>)
 8001872:	f043 0304 	orr.w	r3, r3, #4
 8001876:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800187a:	4b29      	ldr	r3, [pc, #164]	@ (8001920 <HAL_ADC_MspInit+0x1e8>)
 800187c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001888:	4b25      	ldr	r3, [pc, #148]	@ (8001920 <HAL_ADC_MspInit+0x1e8>)
 800188a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800188e:	4a24      	ldr	r2, [pc, #144]	@ (8001920 <HAL_ADC_MspInit+0x1e8>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001898:	4b21      	ldr	r3, [pc, #132]	@ (8001920 <HAL_ADC_MspInit+0x1e8>)
 800189a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001920 <HAL_ADC_MspInit+0x1e8>)
 80018a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001920 <HAL_ADC_MspInit+0x1e8>)
 80018ae:	f043 0320 	orr.w	r3, r3, #32
 80018b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001920 <HAL_ADC_MspInit+0x1e8>)
 80018b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018bc:	f003 0320 	and.w	r3, r3, #32
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SUSPENSION_RL_Pin;
 80018c4:	2320      	movs	r3, #32
 80018c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c8:	2303      	movs	r3, #3
 80018ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RL_GPIO_Port, &GPIO_InitStruct);
 80018d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018d4:	4619      	mov	r1, r3
 80018d6:	4813      	ldr	r0, [pc, #76]	@ (8001924 <HAL_ADC_MspInit+0x1ec>)
 80018d8:	f003 feb8 	bl	800564c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin;
 80018dc:	2301      	movs	r3, #1
 80018de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e0:	2303      	movs	r3, #3
 80018e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RR_GPIO_Port, &GPIO_InitStruct);
 80018e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018ec:	4619      	mov	r1, r3
 80018ee:	480e      	ldr	r0, [pc, #56]	@ (8001928 <HAL_ADC_MspInit+0x1f0>)
 80018f0:	f003 feac 	bl	800564c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_FL_Pin|SUSPENSION_FR_Pin;
 80018f4:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80018f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018fa:	2303      	movs	r3, #3
 80018fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001902:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001906:	4619      	mov	r1, r3
 8001908:	4808      	ldr	r0, [pc, #32]	@ (800192c <HAL_ADC_MspInit+0x1f4>)
 800190a:	f003 fe9f 	bl	800564c <HAL_GPIO_Init>
}
 800190e:	bf00      	nop
 8001910:	3740      	adds	r7, #64	@ 0x40
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40022000 	.word	0x40022000
 800191c:	240005a8 	.word	0x240005a8
 8001920:	58024400 	.word	0x58024400
 8001924:	58020800 	.word	0x58020800
 8001928:	58020400 	.word	0x58020400
 800192c:	58021400 	.word	0x58021400
 8001930:	40022100 	.word	0x40022100

08001934 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b0ba      	sub	sp, #232	@ 0xe8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800194c:	f107 0318 	add.w	r3, r7, #24
 8001950:	22b8      	movs	r2, #184	@ 0xb8
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f00a f84d 	bl	800b9f4 <memset>
  if(hfdcan->Instance==FDCAN1)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a62      	ldr	r2, [pc, #392]	@ (8001ae8 <HAL_FDCAN_MspInit+0x1b4>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d157      	bne.n	8001a14 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001964:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001970:	2300      	movs	r3, #0
 8001972:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001976:	f107 0318 	add.w	r3, r7, #24
 800197a:	4618      	mov	r0, r3
 800197c:	f004 ffe0 	bl	8006940 <HAL_RCCEx_PeriphCLKConfig>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8001986:	f7ff feb7 	bl	80016f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800198a:	4b58      	ldr	r3, [pc, #352]	@ (8001aec <HAL_FDCAN_MspInit+0x1b8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	3301      	adds	r3, #1
 8001990:	4a56      	ldr	r2, [pc, #344]	@ (8001aec <HAL_FDCAN_MspInit+0x1b8>)
 8001992:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001994:	4b55      	ldr	r3, [pc, #340]	@ (8001aec <HAL_FDCAN_MspInit+0x1b8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d10e      	bne.n	80019ba <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800199c:	4b54      	ldr	r3, [pc, #336]	@ (8001af0 <HAL_FDCAN_MspInit+0x1bc>)
 800199e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80019a2:	4a53      	ldr	r2, [pc, #332]	@ (8001af0 <HAL_FDCAN_MspInit+0x1bc>)
 80019a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019a8:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80019ac:	4b50      	ldr	r3, [pc, #320]	@ (8001af0 <HAL_FDCAN_MspInit+0x1bc>)
 80019ae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80019b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ba:	4b4d      	ldr	r3, [pc, #308]	@ (8001af0 <HAL_FDCAN_MspInit+0x1bc>)
 80019bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019c0:	4a4b      	ldr	r2, [pc, #300]	@ (8001af0 <HAL_FDCAN_MspInit+0x1bc>)
 80019c2:	f043 0308 	orr.w	r3, r3, #8
 80019c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019ca:	4b49      	ldr	r3, [pc, #292]	@ (8001af0 <HAL_FDCAN_MspInit+0x1bc>)
 80019cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019d0:	f003 0308 	and.w	r3, r3, #8
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019d8:	2303      	movs	r3, #3
 80019da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80019f0:	2309      	movs	r3, #9
 80019f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019f6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019fa:	4619      	mov	r1, r3
 80019fc:	483d      	ldr	r0, [pc, #244]	@ (8001af4 <HAL_FDCAN_MspInit+0x1c0>)
 80019fe:	f003 fe25 	bl	800564c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	2013      	movs	r0, #19
 8001a08:	f002 fc2f 	bl	800426a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001a0c:	2013      	movs	r0, #19
 8001a0e:	f002 fc46 	bl	800429e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001a12:	e064      	b.n	8001ade <HAL_FDCAN_MspInit+0x1aa>
  else if(hfdcan->Instance==FDCAN2)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a37      	ldr	r2, [pc, #220]	@ (8001af8 <HAL_FDCAN_MspInit+0x1c4>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d15f      	bne.n	8001ade <HAL_FDCAN_MspInit+0x1aa>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001a1e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a30:	f107 0318 	add.w	r3, r7, #24
 8001a34:	4618      	mov	r0, r3
 8001a36:	f004 ff83 	bl	8006940 <HAL_RCCEx_PeriphCLKConfig>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 8001a40:	f7ff fe5a 	bl	80016f8 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001a44:	4b29      	ldr	r3, [pc, #164]	@ (8001aec <HAL_FDCAN_MspInit+0x1b8>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	4a28      	ldr	r2, [pc, #160]	@ (8001aec <HAL_FDCAN_MspInit+0x1b8>)
 8001a4c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001a4e:	4b27      	ldr	r3, [pc, #156]	@ (8001aec <HAL_FDCAN_MspInit+0x1b8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d10e      	bne.n	8001a74 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001a56:	4b26      	ldr	r3, [pc, #152]	@ (8001af0 <HAL_FDCAN_MspInit+0x1bc>)
 8001a58:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001a5c:	4a24      	ldr	r2, [pc, #144]	@ (8001af0 <HAL_FDCAN_MspInit+0x1bc>)
 8001a5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a62:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001a66:	4b22      	ldr	r3, [pc, #136]	@ (8001af0 <HAL_FDCAN_MspInit+0x1bc>)
 8001a68:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a74:	4b1e      	ldr	r3, [pc, #120]	@ (8001af0 <HAL_FDCAN_MspInit+0x1bc>)
 8001a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a7a:	4a1d      	ldr	r2, [pc, #116]	@ (8001af0 <HAL_FDCAN_MspInit+0x1bc>)
 8001a7c:	f043 0302 	orr.w	r3, r3, #2
 8001a80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a84:	4b1a      	ldr	r3, [pc, #104]	@ (8001af0 <HAL_FDCAN_MspInit+0x1bc>)
 8001a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a92:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001a96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001aac:	2309      	movs	r3, #9
 8001aae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4810      	ldr	r0, [pc, #64]	@ (8001afc <HAL_FDCAN_MspInit+0x1c8>)
 8001aba:	f003 fdc7 	bl	800564c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2014      	movs	r0, #20
 8001ac4:	f002 fbd1 	bl	800426a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001ac8:	2014      	movs	r0, #20
 8001aca:	f002 fbe8 	bl	800429e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 0, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	2016      	movs	r0, #22
 8001ad4:	f002 fbc9 	bl	800426a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8001ad8:	2016      	movs	r0, #22
 8001ada:	f002 fbe0 	bl	800429e <HAL_NVIC_EnableIRQ>
}
 8001ade:	bf00      	nop
 8001ae0:	37e8      	adds	r7, #232	@ 0xe8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	4000a000 	.word	0x4000a000
 8001aec:	240005ac 	.word	0x240005ac
 8001af0:	58024400 	.word	0x58024400
 8001af4:	58020c00 	.word	0x58020c00
 8001af8:	4000a400 	.word	0x4000a400
 8001afc:	58020400 	.word	0x58020400

08001b00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a19      	ldr	r2, [pc, #100]	@ (8001b74 <HAL_TIM_Base_MspInit+0x74>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d10f      	bne.n	8001b32 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b12:	4b19      	ldr	r3, [pc, #100]	@ (8001b78 <HAL_TIM_Base_MspInit+0x78>)
 8001b14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b18:	4a17      	ldr	r2, [pc, #92]	@ (8001b78 <HAL_TIM_Base_MspInit+0x78>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b22:	4b15      	ldr	r3, [pc, #84]	@ (8001b78 <HAL_TIM_Base_MspInit+0x78>)
 8001b24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001b30:	e01b      	b.n	8001b6a <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a11      	ldr	r2, [pc, #68]	@ (8001b7c <HAL_TIM_Base_MspInit+0x7c>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d116      	bne.n	8001b6a <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b78 <HAL_TIM_Base_MspInit+0x78>)
 8001b3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b42:	4a0d      	ldr	r2, [pc, #52]	@ (8001b78 <HAL_TIM_Base_MspInit+0x78>)
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b48:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b78 <HAL_TIM_Base_MspInit+0x78>)
 8001b4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2075      	movs	r0, #117	@ 0x75
 8001b60:	f002 fb83 	bl	800426a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001b64:	2075      	movs	r0, #117	@ 0x75
 8001b66:	f002 fb9a 	bl	800429e <HAL_NVIC_EnableIRQ>
}
 8001b6a:	bf00      	nop
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40010000 	.word	0x40010000
 8001b78:	58024400 	.word	0x58024400
 8001b7c:	40014400 	.word	0x40014400

08001b80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 030c 	add.w	r3, r7, #12
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a13      	ldr	r2, [pc, #76]	@ (8001bec <HAL_TIM_MspPostInit+0x6c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d11f      	bne.n	8001be2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ba2:	4b13      	ldr	r3, [pc, #76]	@ (8001bf0 <HAL_TIM_MspPostInit+0x70>)
 8001ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ba8:	4a11      	ldr	r2, [pc, #68]	@ (8001bf0 <HAL_TIM_MspPostInit+0x70>)
 8001baa:	f043 0310 	orr.w	r3, r3, #16
 8001bae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf0 <HAL_TIM_MspPostInit+0x70>)
 8001bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_FAN1_Pin|PWM_FAN2_Pin;
 8001bc0:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001bc4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bd6:	f107 030c 	add.w	r3, r7, #12
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4805      	ldr	r0, [pc, #20]	@ (8001bf4 <HAL_TIM_MspPostInit+0x74>)
 8001bde:	f003 fd35 	bl	800564c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001be2:	bf00      	nop
 8001be4:	3720      	adds	r7, #32
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40010000 	.word	0x40010000
 8001bf0:	58024400 	.word	0x58024400
 8001bf4:	58021000 	.word	0x58021000

08001bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b0ba      	sub	sp, #232	@ 0xe8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c10:	f107 0318 	add.w	r3, r7, #24
 8001c14:	22b8      	movs	r2, #184	@ 0xb8
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f009 feeb 	bl	800b9f4 <memset>
  if(huart->Instance==USART1)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a4d      	ldr	r2, [pc, #308]	@ (8001d58 <HAL_UART_MspInit+0x160>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d147      	bne.n	8001cb8 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c28:	f04f 0201 	mov.w	r2, #1
 8001c2c:	f04f 0300 	mov.w	r3, #0
 8001c30:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c3a:	f107 0318 	add.w	r3, r7, #24
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f004 fe7e 	bl	8006940 <HAL_RCCEx_PeriphCLKConfig>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001c4a:	f7ff fd55 	bl	80016f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c4e:	4b43      	ldr	r3, [pc, #268]	@ (8001d5c <HAL_UART_MspInit+0x164>)
 8001c50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c54:	4a41      	ldr	r2, [pc, #260]	@ (8001d5c <HAL_UART_MspInit+0x164>)
 8001c56:	f043 0310 	orr.w	r3, r3, #16
 8001c5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d5c <HAL_UART_MspInit+0x164>)
 8001c60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c64:	f003 0310 	and.w	r3, r3, #16
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6c:	4b3b      	ldr	r3, [pc, #236]	@ (8001d5c <HAL_UART_MspInit+0x164>)
 8001c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c72:	4a3a      	ldr	r2, [pc, #232]	@ (8001d5c <HAL_UART_MspInit+0x164>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c7c:	4b37      	ldr	r3, [pc, #220]	@ (8001d5c <HAL_UART_MspInit+0x164>)
 8001c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_GPS_Pin|USART1_RX_GPS_Pin;
 8001c8a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001c8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ca4:	2307      	movs	r3, #7
 8001ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001cae:	4619      	mov	r1, r3
 8001cb0:	482b      	ldr	r0, [pc, #172]	@ (8001d60 <HAL_UART_MspInit+0x168>)
 8001cb2:	f003 fccb 	bl	800564c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cb6:	e04a      	b.n	8001d4e <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a29      	ldr	r2, [pc, #164]	@ (8001d64 <HAL_UART_MspInit+0x16c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d145      	bne.n	8001d4e <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cc2:	f04f 0202 	mov.w	r2, #2
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cd4:	f107 0318 	add.w	r3, r7, #24
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f004 fe31 	bl	8006940 <HAL_RCCEx_PeriphCLKConfig>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001ce4:	f7ff fd08 	bl	80016f8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d5c <HAL_UART_MspInit+0x164>)
 8001cea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cee:	4a1b      	ldr	r2, [pc, #108]	@ (8001d5c <HAL_UART_MspInit+0x164>)
 8001cf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cf4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cf8:	4b18      	ldr	r3, [pc, #96]	@ (8001d5c <HAL_UART_MspInit+0x164>)
 8001cfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	4b15      	ldr	r3, [pc, #84]	@ (8001d5c <HAL_UART_MspInit+0x164>)
 8001d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d0c:	4a13      	ldr	r2, [pc, #76]	@ (8001d5c <HAL_UART_MspInit+0x164>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d16:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <HAL_UART_MspInit+0x164>)
 8001d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d24:	230c      	movs	r3, #12
 8001d26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2300      	movs	r3, #0
 8001d38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d3c:	2307      	movs	r3, #7
 8001d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d42:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d46:	4619      	mov	r1, r3
 8001d48:	4805      	ldr	r0, [pc, #20]	@ (8001d60 <HAL_UART_MspInit+0x168>)
 8001d4a:	f003 fc7f 	bl	800564c <HAL_GPIO_Init>
}
 8001d4e:	bf00      	nop
 8001d50:	37e8      	adds	r7, #232	@ 0xe8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40011000 	.word	0x40011000
 8001d5c:	58024400 	.word	0x58024400
 8001d60:	58020000 	.word	0x58020000
 8001d64:	40004400 	.word	0x40004400

08001d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <NMI_Handler+0x4>

08001d70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <HardFault_Handler+0x4>

08001d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <MemManage_Handler+0x4>

08001d80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <BusFault_Handler+0x4>

08001d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <UsageFault_Handler+0x4>

08001d90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dbe:	f000 f975 	bl	80020ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001dcc:	4802      	ldr	r0, [pc, #8]	@ (8001dd8 <FDCAN1_IT0_IRQHandler+0x10>)
 8001dce:	f002 ff41 	bl	8004c54 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	24000178 	.word	0x24000178

08001ddc <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8001de0:	4802      	ldr	r0, [pc, #8]	@ (8001dec <FDCAN2_IT0_IRQHandler+0x10>)
 8001de2:	f002 ff37 	bl	8004c54 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	24000218 	.word	0x24000218

08001df0 <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8001df4:	4802      	ldr	r0, [pc, #8]	@ (8001e00 <FDCAN2_IT1_IRQHandler+0x10>)
 8001df6:	f002 ff2d 	bl	8004c54 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	24000218 	.word	0x24000218

08001e04 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001e08:	4802      	ldr	r0, [pc, #8]	@ (8001e14 <TIM16_IRQHandler+0x10>)
 8001e0a:	f007 fabe 	bl	800938a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	24000304 	.word	0x24000304

08001e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e20:	4a14      	ldr	r2, [pc, #80]	@ (8001e74 <_sbrk+0x5c>)
 8001e22:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <_sbrk+0x60>)
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e2c:	4b13      	ldr	r3, [pc, #76]	@ (8001e7c <_sbrk+0x64>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d102      	bne.n	8001e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e34:	4b11      	ldr	r3, [pc, #68]	@ (8001e7c <_sbrk+0x64>)
 8001e36:	4a12      	ldr	r2, [pc, #72]	@ (8001e80 <_sbrk+0x68>)
 8001e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e3a:	4b10      	ldr	r3, [pc, #64]	@ (8001e7c <_sbrk+0x64>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d207      	bcs.n	8001e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e48:	f009 fddc 	bl	800ba04 <__errno>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	220c      	movs	r2, #12
 8001e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e52:	f04f 33ff 	mov.w	r3, #4294967295
 8001e56:	e009      	b.n	8001e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e58:	4b08      	ldr	r3, [pc, #32]	@ (8001e7c <_sbrk+0x64>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e5e:	4b07      	ldr	r3, [pc, #28]	@ (8001e7c <_sbrk+0x64>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	4a05      	ldr	r2, [pc, #20]	@ (8001e7c <_sbrk+0x64>)
 8001e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	24050000 	.word	0x24050000
 8001e78:	00000400 	.word	0x00000400
 8001e7c:	240005b0 	.word	0x240005b0
 8001e80:	24000700 	.word	0x24000700

08001e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e88:	4b32      	ldr	r3, [pc, #200]	@ (8001f54 <SystemInit+0xd0>)
 8001e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e8e:	4a31      	ldr	r2, [pc, #196]	@ (8001f54 <SystemInit+0xd0>)
 8001e90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e98:	4b2f      	ldr	r3, [pc, #188]	@ (8001f58 <SystemInit+0xd4>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	2b06      	cmp	r3, #6
 8001ea2:	d807      	bhi.n	8001eb4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ea4:	4b2c      	ldr	r3, [pc, #176]	@ (8001f58 <SystemInit+0xd4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f023 030f 	bic.w	r3, r3, #15
 8001eac:	4a2a      	ldr	r2, [pc, #168]	@ (8001f58 <SystemInit+0xd4>)
 8001eae:	f043 0307 	orr.w	r3, r3, #7
 8001eb2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001eb4:	4b29      	ldr	r3, [pc, #164]	@ (8001f5c <SystemInit+0xd8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a28      	ldr	r2, [pc, #160]	@ (8001f5c <SystemInit+0xd8>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ec0:	4b26      	ldr	r3, [pc, #152]	@ (8001f5c <SystemInit+0xd8>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ec6:	4b25      	ldr	r3, [pc, #148]	@ (8001f5c <SystemInit+0xd8>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	4924      	ldr	r1, [pc, #144]	@ (8001f5c <SystemInit+0xd8>)
 8001ecc:	4b24      	ldr	r3, [pc, #144]	@ (8001f60 <SystemInit+0xdc>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ed2:	4b21      	ldr	r3, [pc, #132]	@ (8001f58 <SystemInit+0xd4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d007      	beq.n	8001eee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ede:	4b1e      	ldr	r3, [pc, #120]	@ (8001f58 <SystemInit+0xd4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f023 030f 	bic.w	r3, r3, #15
 8001ee6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f58 <SystemInit+0xd4>)
 8001ee8:	f043 0307 	orr.w	r3, r3, #7
 8001eec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001eee:	4b1b      	ldr	r3, [pc, #108]	@ (8001f5c <SystemInit+0xd8>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ef4:	4b19      	ldr	r3, [pc, #100]	@ (8001f5c <SystemInit+0xd8>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001efa:	4b18      	ldr	r3, [pc, #96]	@ (8001f5c <SystemInit+0xd8>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001f00:	4b16      	ldr	r3, [pc, #88]	@ (8001f5c <SystemInit+0xd8>)
 8001f02:	4a18      	ldr	r2, [pc, #96]	@ (8001f64 <SystemInit+0xe0>)
 8001f04:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001f06:	4b15      	ldr	r3, [pc, #84]	@ (8001f5c <SystemInit+0xd8>)
 8001f08:	4a17      	ldr	r2, [pc, #92]	@ (8001f68 <SystemInit+0xe4>)
 8001f0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001f0c:	4b13      	ldr	r3, [pc, #76]	@ (8001f5c <SystemInit+0xd8>)
 8001f0e:	4a17      	ldr	r2, [pc, #92]	@ (8001f6c <SystemInit+0xe8>)
 8001f10:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001f12:	4b12      	ldr	r3, [pc, #72]	@ (8001f5c <SystemInit+0xd8>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001f18:	4b10      	ldr	r3, [pc, #64]	@ (8001f5c <SystemInit+0xd8>)
 8001f1a:	4a14      	ldr	r2, [pc, #80]	@ (8001f6c <SystemInit+0xe8>)
 8001f1c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f5c <SystemInit+0xd8>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001f24:	4b0d      	ldr	r3, [pc, #52]	@ (8001f5c <SystemInit+0xd8>)
 8001f26:	4a11      	ldr	r2, [pc, #68]	@ (8001f6c <SystemInit+0xe8>)
 8001f28:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f5c <SystemInit+0xd8>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f30:	4b0a      	ldr	r3, [pc, #40]	@ (8001f5c <SystemInit+0xd8>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a09      	ldr	r2, [pc, #36]	@ (8001f5c <SystemInit+0xd8>)
 8001f36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f3c:	4b07      	ldr	r3, [pc, #28]	@ (8001f5c <SystemInit+0xd8>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f42:	4b0b      	ldr	r3, [pc, #44]	@ (8001f70 <SystemInit+0xec>)
 8001f44:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001f48:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	e000ed00 	.word	0xe000ed00
 8001f58:	52002000 	.word	0x52002000
 8001f5c:	58024400 	.word	0x58024400
 8001f60:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f64:	02020200 	.word	0x02020200
 8001f68:	01ff0000 	.word	0x01ff0000
 8001f6c:	01010280 	.word	0x01010280
 8001f70:	52004000 	.word	0x52004000

08001f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f78:	f7ff ff84 	bl	8001e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f7c:	480c      	ldr	r0, [pc, #48]	@ (8001fb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f7e:	490d      	ldr	r1, [pc, #52]	@ (8001fb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f80:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f84:	e002      	b.n	8001f8c <LoopCopyDataInit>

08001f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f8a:	3304      	adds	r3, #4

08001f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f90:	d3f9      	bcc.n	8001f86 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f92:	4a0a      	ldr	r2, [pc, #40]	@ (8001fbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f94:	4c0a      	ldr	r4, [pc, #40]	@ (8001fc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f98:	e001      	b.n	8001f9e <LoopFillZerobss>

08001f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f9c:	3204      	adds	r2, #4

08001f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa0:	d3fb      	bcc.n	8001f9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fa2:	f009 fd35 	bl	800ba10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fa6:	f7fe fb83 	bl	80006b0 <main>
  bx  lr
 8001faa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fac:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001fb0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001fb4:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8001fb8:	0800c66c 	.word	0x0800c66c
  ldr r2, =_sbss
 8001fbc:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8001fc0:	24000700 	.word	0x24000700

08001fc4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fc4:	e7fe      	b.n	8001fc4 <ADC3_IRQHandler>
	...

08001fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fce:	2003      	movs	r0, #3
 8001fd0:	f002 f940 	bl	8004254 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001fd4:	f004 fade 	bl	8006594 <HAL_RCC_GetSysClockFreq>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	4b15      	ldr	r3, [pc, #84]	@ (8002030 <HAL_Init+0x68>)
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	f003 030f 	and.w	r3, r3, #15
 8001fe4:	4913      	ldr	r1, [pc, #76]	@ (8002034 <HAL_Init+0x6c>)
 8001fe6:	5ccb      	ldrb	r3, [r1, r3]
 8001fe8:	f003 031f 	and.w	r3, r3, #31
 8001fec:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8002030 <HAL_Init+0x68>)
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	4a0e      	ldr	r2, [pc, #56]	@ (8002034 <HAL_Init+0x6c>)
 8001ffc:	5cd3      	ldrb	r3, [r2, r3]
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	fa22 f303 	lsr.w	r3, r2, r3
 8002008:	4a0b      	ldr	r2, [pc, #44]	@ (8002038 <HAL_Init+0x70>)
 800200a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800200c:	4a0b      	ldr	r2, [pc, #44]	@ (800203c <HAL_Init+0x74>)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002012:	200f      	movs	r0, #15
 8002014:	f000 f814 	bl	8002040 <HAL_InitTick>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e002      	b.n	8002028 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002022:	f7ff fb6f 	bl	8001704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	58024400 	.word	0x58024400
 8002034:	0800c5e0 	.word	0x0800c5e0
 8002038:	24000014 	.word	0x24000014
 800203c:	24000010 	.word	0x24000010

08002040 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002048:	4b15      	ldr	r3, [pc, #84]	@ (80020a0 <HAL_InitTick+0x60>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e021      	b.n	8002098 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002054:	4b13      	ldr	r3, [pc, #76]	@ (80020a4 <HAL_InitTick+0x64>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4b11      	ldr	r3, [pc, #68]	@ (80020a0 <HAL_InitTick+0x60>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	4619      	mov	r1, r3
 800205e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002062:	fbb3 f3f1 	udiv	r3, r3, r1
 8002066:	fbb2 f3f3 	udiv	r3, r2, r3
 800206a:	4618      	mov	r0, r3
 800206c:	f002 f925 	bl	80042ba <HAL_SYSTICK_Config>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e00e      	b.n	8002098 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b0f      	cmp	r3, #15
 800207e:	d80a      	bhi.n	8002096 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002080:	2200      	movs	r2, #0
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	f04f 30ff 	mov.w	r0, #4294967295
 8002088:	f002 f8ef 	bl	800426a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800208c:	4a06      	ldr	r2, [pc, #24]	@ (80020a8 <HAL_InitTick+0x68>)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	e000      	b.n	8002098 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
}
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	2400001c 	.word	0x2400001c
 80020a4:	24000010 	.word	0x24000010
 80020a8:	24000018 	.word	0x24000018

080020ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020b0:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <HAL_IncTick+0x20>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <HAL_IncTick+0x24>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4413      	add	r3, r2
 80020bc:	4a04      	ldr	r2, [pc, #16]	@ (80020d0 <HAL_IncTick+0x24>)
 80020be:	6013      	str	r3, [r2, #0]
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	2400001c 	.word	0x2400001c
 80020d0:	240005b4 	.word	0x240005b4

080020d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return uwTick;
 80020d8:	4b03      	ldr	r3, [pc, #12]	@ (80020e8 <HAL_GetTick+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	240005b4 	.word	0x240005b4

080020ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f4:	f7ff ffee 	bl	80020d4 <HAL_GetTick>
 80020f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002104:	d005      	beq.n	8002112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002106:	4b0a      	ldr	r3, [pc, #40]	@ (8002130 <HAL_Delay+0x44>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4413      	add	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002112:	bf00      	nop
 8002114:	f7ff ffde 	bl	80020d4 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	429a      	cmp	r2, r3
 8002122:	d8f7      	bhi.n	8002114 <HAL_Delay+0x28>
  {
  }
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	2400001c 	.word	0x2400001c

08002134 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	609a      	str	r2, [r3, #8]
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	609a      	str	r2, [r3, #8]
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800219c:	b480      	push	{r7}
 800219e:	b087      	sub	sp, #28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	3360      	adds	r3, #96	@ 0x60
 80021ae:	461a      	mov	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4a10      	ldr	r2, [pc, #64]	@ (80021fc <LL_ADC_SetOffset+0x60>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d10b      	bne.n	80021d8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80021d6:	e00b      	b.n	80021f0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	430b      	orrs	r3, r1
 80021ea:	431a      	orrs	r2, r3
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	601a      	str	r2, [r3, #0]
}
 80021f0:	bf00      	nop
 80021f2:	371c      	adds	r7, #28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	58026000 	.word	0x58026000

08002200 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3360      	adds	r3, #96	@ 0x60
 800220e:	461a      	mov	r2, r3
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002220:	4618      	mov	r0, r3
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	f003 031f 	and.w	r3, r3, #31
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	fa01 f303 	lsl.w	r3, r1, r3
 800224c:	431a      	orrs	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	611a      	str	r2, [r3, #16]
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002260:	b480      	push	{r7}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4a0c      	ldr	r2, [pc, #48]	@ (80022a0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d00e      	beq.n	8002292 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	3360      	adds	r3, #96	@ 0x60
 8002278:	461a      	mov	r2, r3
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	431a      	orrs	r2, r3
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	601a      	str	r2, [r3, #0]
  }
}
 8002292:	bf00      	nop
 8002294:	371c      	adds	r7, #28
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	58026000 	.word	0x58026000

080022a4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b087      	sub	sp, #28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4a0c      	ldr	r2, [pc, #48]	@ (80022e4 <LL_ADC_SetOffsetSaturation+0x40>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d10e      	bne.n	80022d6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	3360      	adds	r3, #96	@ 0x60
 80022bc:	461a      	mov	r2, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	431a      	orrs	r2, r3
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80022d6:	bf00      	nop
 80022d8:	371c      	adds	r7, #28
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	58026000 	.word	0x58026000

080022e8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002328 <LL_ADC_SetOffsetSign+0x40>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d10e      	bne.n	800231a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	3360      	adds	r3, #96	@ 0x60
 8002300:	461a      	mov	r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	431a      	orrs	r2, r3
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800231a:	bf00      	nop
 800231c:	371c      	adds	r7, #28
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	58026000 	.word	0x58026000

0800232c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800232c:	b480      	push	{r7}
 800232e:	b087      	sub	sp, #28
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	3360      	adds	r3, #96	@ 0x60
 800233c:	461a      	mov	r2, r3
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4a0c      	ldr	r2, [pc, #48]	@ (800237c <LL_ADC_SetOffsetState+0x50>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d108      	bne.n	8002360 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	431a      	orrs	r2, r3
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800235e:	e007      	b.n	8002370 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	431a      	orrs	r2, r3
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	601a      	str	r2, [r3, #0]
}
 8002370:	bf00      	nop
 8002372:	371c      	adds	r7, #28
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	58026000 	.word	0x58026000

08002380 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002394:	2301      	movs	r3, #1
 8002396:	e000      	b.n	800239a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b087      	sub	sp, #28
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	3330      	adds	r3, #48	@ 0x30
 80023b6:	461a      	mov	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	0a1b      	lsrs	r3, r3, #8
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	4413      	add	r3, r2
 80023c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	f003 031f 	and.w	r3, r3, #31
 80023d0:	211f      	movs	r1, #31
 80023d2:	fa01 f303 	lsl.w	r3, r1, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	401a      	ands	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	0e9b      	lsrs	r3, r3, #26
 80023de:	f003 011f 	and.w	r1, r3, #31
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	f003 031f 	and.w	r3, r3, #31
 80023e8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ec:	431a      	orrs	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023f2:	bf00      	nop
 80023f4:	371c      	adds	r7, #28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023fe:	b480      	push	{r7}
 8002400:	b087      	sub	sp, #28
 8002402:	af00      	add	r7, sp, #0
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	3314      	adds	r3, #20
 800240e:	461a      	mov	r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	0e5b      	lsrs	r3, r3, #25
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	4413      	add	r3, r2
 800241c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	0d1b      	lsrs	r3, r3, #20
 8002426:	f003 031f 	and.w	r3, r3, #31
 800242a:	2107      	movs	r1, #7
 800242c:	fa01 f303 	lsl.w	r3, r1, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	401a      	ands	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	0d1b      	lsrs	r3, r3, #20
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	fa01 f303 	lsl.w	r3, r1, r3
 8002442:	431a      	orrs	r2, r3
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002448:	bf00      	nop
 800244a:	371c      	adds	r7, #28
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4a1a      	ldr	r2, [pc, #104]	@ (80024cc <LL_ADC_SetChannelSingleDiff+0x78>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d115      	bne.n	8002494 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002474:	43db      	mvns	r3, r3
 8002476:	401a      	ands	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f003 0318 	and.w	r3, r3, #24
 800247e:	4914      	ldr	r1, [pc, #80]	@ (80024d0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002480:	40d9      	lsrs	r1, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	400b      	ands	r3, r1
 8002486:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800248a:	431a      	orrs	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002492:	e014      	b.n	80024be <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024a0:	43db      	mvns	r3, r3
 80024a2:	401a      	ands	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f003 0318 	and.w	r3, r3, #24
 80024aa:	4909      	ldr	r1, [pc, #36]	@ (80024d0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80024ac:	40d9      	lsrs	r1, r3
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	400b      	ands	r3, r1
 80024b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024b6:	431a      	orrs	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80024be:	bf00      	nop
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	58026000 	.word	0x58026000
 80024d0:	000fffff 	.word	0x000fffff

080024d4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 031f 	and.w	r3, r3, #31
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	4b04      	ldr	r3, [pc, #16]	@ (800252c <LL_ADC_DisableDeepPowerDown+0x20>)
 800251a:	4013      	ands	r3, r2
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6093      	str	r3, [r2, #8]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	5fffffc0 	.word	0x5fffffc0

08002530 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002540:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002544:	d101      	bne.n	800254a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	4b05      	ldr	r3, [pc, #20]	@ (800257c <LL_ADC_EnableInternalRegulator+0x24>)
 8002566:	4013      	ands	r3, r2
 8002568:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	6fffffc0 	.word	0x6fffffc0

08002580 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002590:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002594:	d101      	bne.n	800259a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	4b05      	ldr	r3, [pc, #20]	@ (80025cc <LL_ADC_Enable+0x24>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	f043 0201 	orr.w	r2, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	7fffffc0 	.word	0x7fffffc0

080025d0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	4b05      	ldr	r3, [pc, #20]	@ (80025f4 <LL_ADC_Disable+0x24>)
 80025de:	4013      	ands	r3, r2
 80025e0:	f043 0202 	orr.w	r2, r3, #2
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	7fffffc0 	.word	0x7fffffc0

080025f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b01      	cmp	r3, #1
 800260a:	d101      	bne.n	8002610 <LL_ADC_IsEnabled+0x18>
 800260c:	2301      	movs	r3, #1
 800260e:	e000      	b.n	8002612 <LL_ADC_IsEnabled+0x1a>
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b02      	cmp	r3, #2
 8002630:	d101      	bne.n	8002636 <LL_ADC_IsDisableOngoing+0x18>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <LL_ADC_IsDisableOngoing+0x1a>
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	4b05      	ldr	r3, [pc, #20]	@ (8002668 <LL_ADC_REG_StartConversion+0x24>)
 8002652:	4013      	ands	r3, r2
 8002654:	f043 0204 	orr.w	r2, r3, #4
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	7fffffc0 	.word	0x7fffffc0

0800266c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	4b05      	ldr	r3, [pc, #20]	@ (8002690 <LL_ADC_REG_StopConversion+0x24>)
 800267a:	4013      	ands	r3, r2
 800267c:	f043 0210 	orr.w	r2, r3, #16
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	7fffffc0 	.word	0x7fffffc0

08002694 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d101      	bne.n	80026ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80026a8:	2301      	movs	r3, #1
 80026aa:	e000      	b.n	80026ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	4b05      	ldr	r3, [pc, #20]	@ (80026e0 <LL_ADC_INJ_StopConversion+0x24>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	f043 0220 	orr.w	r2, r3, #32
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	7fffffc0 	.word	0x7fffffc0

080026e4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d101      	bne.n	80026fc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
	...

0800270c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800270c:	b590      	push	{r4, r7, lr}
 800270e:	b089      	sub	sp, #36	@ 0x24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002718:	2300      	movs	r3, #0
 800271a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e1ee      	b.n	8002b04 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002730:	2b00      	cmp	r3, #0
 8002732:	d109      	bne.n	8002748 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7fe ffff 	bl	8001738 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff feef 	bl	8002530 <LL_ADC_IsDeepPowerDownEnabled>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d004      	beq.n	8002762 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fed5 	bl	800250c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff ff0a 	bl	8002580 <LL_ADC_IsInternalRegulatorEnabled>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d114      	bne.n	800279c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff feee 	bl	8002558 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800277c:	4b8e      	ldr	r3, [pc, #568]	@ (80029b8 <HAL_ADC_Init+0x2ac>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	099b      	lsrs	r3, r3, #6
 8002782:	4a8e      	ldr	r2, [pc, #568]	@ (80029bc <HAL_ADC_Init+0x2b0>)
 8002784:	fba2 2303 	umull	r2, r3, r2, r3
 8002788:	099b      	lsrs	r3, r3, #6
 800278a:	3301      	adds	r3, #1
 800278c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800278e:	e002      	b.n	8002796 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	3b01      	subs	r3, #1
 8002794:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1f9      	bne.n	8002790 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff feed 	bl	8002580 <LL_ADC_IsInternalRegulatorEnabled>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10d      	bne.n	80027c8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027b0:	f043 0210 	orr.w	r2, r3, #16
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027bc:	f043 0201 	orr.w	r2, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff61 	bl	8002694 <LL_ADC_REG_IsConversionOngoing>
 80027d2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027d8:	f003 0310 	and.w	r3, r3, #16
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f040 8188 	bne.w	8002af2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f040 8184 	bne.w	8002af2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ee:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80027f2:	f043 0202 	orr.w	r2, r3, #2
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff fefa 	bl	80025f8 <LL_ADC_IsEnabled>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d136      	bne.n	8002878 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a6c      	ldr	r2, [pc, #432]	@ (80029c0 <HAL_ADC_Init+0x2b4>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d004      	beq.n	800281e <HAL_ADC_Init+0x112>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a6a      	ldr	r2, [pc, #424]	@ (80029c4 <HAL_ADC_Init+0x2b8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d10e      	bne.n	800283c <HAL_ADC_Init+0x130>
 800281e:	4868      	ldr	r0, [pc, #416]	@ (80029c0 <HAL_ADC_Init+0x2b4>)
 8002820:	f7ff feea 	bl	80025f8 <LL_ADC_IsEnabled>
 8002824:	4604      	mov	r4, r0
 8002826:	4867      	ldr	r0, [pc, #412]	@ (80029c4 <HAL_ADC_Init+0x2b8>)
 8002828:	f7ff fee6 	bl	80025f8 <LL_ADC_IsEnabled>
 800282c:	4603      	mov	r3, r0
 800282e:	4323      	orrs	r3, r4
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	e008      	b.n	800284e <HAL_ADC_Init+0x142>
 800283c:	4862      	ldr	r0, [pc, #392]	@ (80029c8 <HAL_ADC_Init+0x2bc>)
 800283e:	f7ff fedb 	bl	80025f8 <LL_ADC_IsEnabled>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	bf0c      	ite	eq
 8002848:	2301      	moveq	r3, #1
 800284a:	2300      	movne	r3, #0
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d012      	beq.n	8002878 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a5a      	ldr	r2, [pc, #360]	@ (80029c0 <HAL_ADC_Init+0x2b4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d004      	beq.n	8002866 <HAL_ADC_Init+0x15a>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a58      	ldr	r2, [pc, #352]	@ (80029c4 <HAL_ADC_Init+0x2b8>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d101      	bne.n	800286a <HAL_ADC_Init+0x15e>
 8002866:	4a59      	ldr	r2, [pc, #356]	@ (80029cc <HAL_ADC_Init+0x2c0>)
 8002868:	e000      	b.n	800286c <HAL_ADC_Init+0x160>
 800286a:	4a59      	ldr	r2, [pc, #356]	@ (80029d0 <HAL_ADC_Init+0x2c4>)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4619      	mov	r1, r3
 8002872:	4610      	mov	r0, r2
 8002874:	f7ff fc5e 	bl	8002134 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a52      	ldr	r2, [pc, #328]	@ (80029c8 <HAL_ADC_Init+0x2bc>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d129      	bne.n	80028d6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	7e5b      	ldrb	r3, [r3, #25]
 8002886:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800288c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002892:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	2b08      	cmp	r3, #8
 800289a:	d013      	beq.n	80028c4 <HAL_ADC_Init+0x1b8>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b0c      	cmp	r3, #12
 80028a2:	d00d      	beq.n	80028c0 <HAL_ADC_Init+0x1b4>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2b1c      	cmp	r3, #28
 80028aa:	d007      	beq.n	80028bc <HAL_ADC_Init+0x1b0>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b18      	cmp	r3, #24
 80028b2:	d101      	bne.n	80028b8 <HAL_ADC_Init+0x1ac>
 80028b4:	2318      	movs	r3, #24
 80028b6:	e006      	b.n	80028c6 <HAL_ADC_Init+0x1ba>
 80028b8:	2300      	movs	r3, #0
 80028ba:	e004      	b.n	80028c6 <HAL_ADC_Init+0x1ba>
 80028bc:	2310      	movs	r3, #16
 80028be:	e002      	b.n	80028c6 <HAL_ADC_Init+0x1ba>
 80028c0:	2308      	movs	r3, #8
 80028c2:	e000      	b.n	80028c6 <HAL_ADC_Init+0x1ba>
 80028c4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80028c6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ce:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
 80028d4:	e00e      	b.n	80028f4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7e5b      	ldrb	r3, [r3, #25]
 80028da:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028e0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80028e6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ee:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d106      	bne.n	800290c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002902:	3b01      	subs	r3, #1
 8002904:	045b      	lsls	r3, r3, #17
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4313      	orrs	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002910:	2b00      	cmp	r3, #0
 8002912:	d009      	beq.n	8002928 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002918:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002920:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a26      	ldr	r2, [pc, #152]	@ (80029c8 <HAL_ADC_Init+0x2bc>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d115      	bne.n	800295e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	4b26      	ldr	r3, [pc, #152]	@ (80029d4 <HAL_ADC_Init+0x2c8>)
 800293a:	4013      	ands	r3, r2
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	69b9      	ldr	r1, [r7, #24]
 8002942:	430b      	orrs	r3, r1
 8002944:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	611a      	str	r2, [r3, #16]
 800295c:	e009      	b.n	8002972 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	4b1c      	ldr	r3, [pc, #112]	@ (80029d8 <HAL_ADC_Init+0x2cc>)
 8002966:	4013      	ands	r3, r2
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	69b9      	ldr	r1, [r7, #24]
 800296e:	430b      	orrs	r3, r1
 8002970:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff fe8c 	bl	8002694 <LL_ADC_REG_IsConversionOngoing>
 800297c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff feae 	bl	80026e4 <LL_ADC_INJ_IsConversionOngoing>
 8002988:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	2b00      	cmp	r3, #0
 800298e:	f040 808e 	bne.w	8002aae <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2b00      	cmp	r3, #0
 8002996:	f040 808a 	bne.w	8002aae <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a0a      	ldr	r2, [pc, #40]	@ (80029c8 <HAL_ADC_Init+0x2bc>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d11b      	bne.n	80029dc <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	7e1b      	ldrb	r3, [r3, #24]
 80029a8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80029b0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
 80029b6:	e018      	b.n	80029ea <HAL_ADC_Init+0x2de>
 80029b8:	24000010 	.word	0x24000010
 80029bc:	053e2d63 	.word	0x053e2d63
 80029c0:	40022000 	.word	0x40022000
 80029c4:	40022100 	.word	0x40022100
 80029c8:	58026000 	.word	0x58026000
 80029cc:	40022300 	.word	0x40022300
 80029d0:	58026300 	.word	0x58026300
 80029d4:	fff04007 	.word	0xfff04007
 80029d8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	7e1b      	ldrb	r3, [r3, #24]
 80029e0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	4b46      	ldr	r3, [pc, #280]	@ (8002b0c <HAL_ADC_Init+0x400>)
 80029f2:	4013      	ands	r3, r2
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	69b9      	ldr	r1, [r7, #24]
 80029fa:	430b      	orrs	r3, r1
 80029fc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d137      	bne.n	8002a78 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a3f      	ldr	r2, [pc, #252]	@ (8002b10 <HAL_ADC_Init+0x404>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d116      	bne.n	8002a46 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691a      	ldr	r2, [r3, #16]
 8002a1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b14 <HAL_ADC_Init+0x408>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002a2a:	4311      	orrs	r1, r2
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a30:	4311      	orrs	r1, r2
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002a36:	430a      	orrs	r2, r1
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	611a      	str	r2, [r3, #16]
 8002a44:	e020      	b.n	8002a88 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691a      	ldr	r2, [r3, #16]
 8002a4c:	4b32      	ldr	r3, [pc, #200]	@ (8002b18 <HAL_ADC_Init+0x40c>)
 8002a4e:	4013      	ands	r3, r2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a54:	3a01      	subs	r2, #1
 8002a56:	0411      	lsls	r1, r2, #16
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002a5c:	4311      	orrs	r1, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a62:	4311      	orrs	r1, r2
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 0201 	orr.w	r2, r2, #1
 8002a74:	611a      	str	r2, [r3, #16]
 8002a76:	e007      	b.n	8002a88 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691a      	ldr	r2, [r3, #16]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a1b      	ldr	r2, [pc, #108]	@ (8002b10 <HAL_ADC_Init+0x404>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d002      	beq.n	8002aae <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f001 f90d 	bl	8003cc8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abc:	f023 010f 	bic.w	r1, r3, #15
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	1e5a      	subs	r2, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ace:	e007      	b.n	8002ae0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 020f 	bic.w	r2, r2, #15
 8002ade:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ae4:	f023 0303 	bic.w	r3, r3, #3
 8002ae8:	f043 0201 	orr.w	r2, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	661a      	str	r2, [r3, #96]	@ 0x60
 8002af0:	e007      	b.n	8002b02 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002af6:	f043 0210 	orr.w	r2, r3, #16
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b02:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3724      	adds	r7, #36	@ 0x24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd90      	pop	{r4, r7, pc}
 8002b0c:	ffffbffc 	.word	0xffffbffc
 8002b10:	58026000 	.word	0x58026000
 8002b14:	fc00f81f 	.word	0xfc00f81f
 8002b18:	fc00f81e 	.word	0xfc00f81e

08002b1c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a5c      	ldr	r2, [pc, #368]	@ (8002c9c <HAL_ADC_Start+0x180>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d004      	beq.n	8002b38 <HAL_ADC_Start+0x1c>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a5b      	ldr	r2, [pc, #364]	@ (8002ca0 <HAL_ADC_Start+0x184>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d101      	bne.n	8002b3c <HAL_ADC_Start+0x20>
 8002b38:	4b5a      	ldr	r3, [pc, #360]	@ (8002ca4 <HAL_ADC_Start+0x188>)
 8002b3a:	e000      	b.n	8002b3e <HAL_ADC_Start+0x22>
 8002b3c:	4b5a      	ldr	r3, [pc, #360]	@ (8002ca8 <HAL_ADC_Start+0x18c>)
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fcc8 	bl	80024d4 <LL_ADC_GetMultimode>
 8002b44:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fda2 	bl	8002694 <LL_ADC_REG_IsConversionOngoing>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f040 809a 	bne.w	8002c8c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_ADC_Start+0x4a>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e095      	b.n	8002c92 <HAL_ADC_Start+0x176>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 ffc0 	bl	8003af4 <ADC_Enable>
 8002b74:	4603      	mov	r3, r0
 8002b76:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b78:	7dfb      	ldrb	r3, [r7, #23]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f040 8081 	bne.w	8002c82 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b84:	4b49      	ldr	r3, [pc, #292]	@ (8002cac <HAL_ADC_Start+0x190>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a42      	ldr	r2, [pc, #264]	@ (8002ca0 <HAL_ADC_Start+0x184>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d002      	beq.n	8002ba0 <HAL_ADC_Start+0x84>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	e000      	b.n	8002ba2 <HAL_ADC_Start+0x86>
 8002ba0:	4b3e      	ldr	r3, [pc, #248]	@ (8002c9c <HAL_ADC_Start+0x180>)
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6812      	ldr	r2, [r2, #0]
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d002      	beq.n	8002bb0 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d105      	bne.n	8002bbc <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bb4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bc8:	d106      	bne.n	8002bd8 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bce:	f023 0206 	bic.w	r2, r3, #6
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	665a      	str	r2, [r3, #100]	@ 0x64
 8002bd6:	e002      	b.n	8002bde <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	221c      	movs	r2, #28
 8002be4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a2b      	ldr	r2, [pc, #172]	@ (8002ca0 <HAL_ADC_Start+0x184>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d002      	beq.n	8002bfe <HAL_ADC_Start+0xe2>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	e000      	b.n	8002c00 <HAL_ADC_Start+0xe4>
 8002bfe:	4b27      	ldr	r3, [pc, #156]	@ (8002c9c <HAL_ADC_Start+0x180>)
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d008      	beq.n	8002c1a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d005      	beq.n	8002c1a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2b05      	cmp	r3, #5
 8002c12:	d002      	beq.n	8002c1a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	2b09      	cmp	r3, #9
 8002c18:	d114      	bne.n	8002c44 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d007      	beq.n	8002c38 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c2c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c30:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff fd01 	bl	8002644 <LL_ADC_REG_StartConversion>
 8002c42:	e025      	b.n	8002c90 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c48:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a12      	ldr	r2, [pc, #72]	@ (8002ca0 <HAL_ADC_Start+0x184>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d002      	beq.n	8002c60 <HAL_ADC_Start+0x144>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	e000      	b.n	8002c62 <HAL_ADC_Start+0x146>
 8002c60:	4b0e      	ldr	r3, [pc, #56]	@ (8002c9c <HAL_ADC_Start+0x180>)
 8002c62:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00f      	beq.n	8002c90 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c74:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c78:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	661a      	str	r2, [r3, #96]	@ 0x60
 8002c80:	e006      	b.n	8002c90 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8002c8a:	e001      	b.n	8002c90 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40022000 	.word	0x40022000
 8002ca0:	40022100 	.word	0x40022100
 8002ca4:	40022300 	.word	0x40022300
 8002ca8:	58026300 	.word	0x58026300
 8002cac:	fffff0fe 	.word	0xfffff0fe

08002cb0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_ADC_Stop+0x16>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e021      	b.n	8002d0a <HAL_ADC_Stop+0x5a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002cce:	2103      	movs	r1, #3
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 fe53 	bl	800397c <ADC_ConversionStop>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10f      	bne.n	8002d00 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 ff91 	bl	8003c08 <ADC_Disable>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d107      	bne.n	8002d00 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002cf4:	4b07      	ldr	r3, [pc, #28]	@ (8002d14 <HAL_ADC_Stop+0x64>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	f043 0201 	orr.w	r2, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	ffffeefe 	.word	0xffffeefe

08002d18 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a72      	ldr	r2, [pc, #456]	@ (8002ef0 <HAL_ADC_PollForConversion+0x1d8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d004      	beq.n	8002d36 <HAL_ADC_PollForConversion+0x1e>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a70      	ldr	r2, [pc, #448]	@ (8002ef4 <HAL_ADC_PollForConversion+0x1dc>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d101      	bne.n	8002d3a <HAL_ADC_PollForConversion+0x22>
 8002d36:	4b70      	ldr	r3, [pc, #448]	@ (8002ef8 <HAL_ADC_PollForConversion+0x1e0>)
 8002d38:	e000      	b.n	8002d3c <HAL_ADC_PollForConversion+0x24>
 8002d3a:	4b70      	ldr	r3, [pc, #448]	@ (8002efc <HAL_ADC_PollForConversion+0x1e4>)
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fbc9 	bl	80024d4 <LL_ADC_GetMultimode>
 8002d42:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d102      	bne.n	8002d52 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002d4c:	2308      	movs	r3, #8
 8002d4e:	61fb      	str	r3, [r7, #28]
 8002d50:	e037      	b.n	8002dc2 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	2b05      	cmp	r3, #5
 8002d5c:	d002      	beq.n	8002d64 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2b09      	cmp	r3, #9
 8002d62:	d111      	bne.n	8002d88 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d007      	beq.n	8002d82 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d76:	f043 0220 	orr.w	r2, r3, #32
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e0b1      	b.n	8002ee6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002d82:	2304      	movs	r3, #4
 8002d84:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002d86:	e01c      	b.n	8002dc2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a58      	ldr	r2, [pc, #352]	@ (8002ef0 <HAL_ADC_PollForConversion+0x1d8>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d004      	beq.n	8002d9c <HAL_ADC_PollForConversion+0x84>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a57      	ldr	r2, [pc, #348]	@ (8002ef4 <HAL_ADC_PollForConversion+0x1dc>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d101      	bne.n	8002da0 <HAL_ADC_PollForConversion+0x88>
 8002d9c:	4b56      	ldr	r3, [pc, #344]	@ (8002ef8 <HAL_ADC_PollForConversion+0x1e0>)
 8002d9e:	e000      	b.n	8002da2 <HAL_ADC_PollForConversion+0x8a>
 8002da0:	4b56      	ldr	r3, [pc, #344]	@ (8002efc <HAL_ADC_PollForConversion+0x1e4>)
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fba4 	bl	80024f0 <LL_ADC_GetMultiDMATransfer>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d007      	beq.n	8002dbe <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002db2:	f043 0220 	orr.w	r2, r3, #32
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e093      	b.n	8002ee6 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002dbe:	2304      	movs	r3, #4
 8002dc0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002dc2:	f7ff f987 	bl	80020d4 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002dc8:	e021      	b.n	8002e0e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd0:	d01d      	beq.n	8002e0e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002dd2:	f7ff f97f 	bl	80020d4 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d302      	bcc.n	8002de8 <HAL_ADC_PollForConversion+0xd0>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d112      	bne.n	8002e0e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	4013      	ands	r3, r2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10b      	bne.n	8002e0e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dfa:	f043 0204 	orr.w	r2, r3, #4
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e06b      	b.n	8002ee6 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0d6      	beq.n	8002dca <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e20:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff faa7 	bl	8002380 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d01c      	beq.n	8002e72 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	7e5b      	ldrb	r3, [r3, #25]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d118      	bne.n	8002e72 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b08      	cmp	r3, #8
 8002e4c:	d111      	bne.n	8002e72 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e52:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d105      	bne.n	8002e72 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e6a:	f043 0201 	orr.w	r2, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a1f      	ldr	r2, [pc, #124]	@ (8002ef4 <HAL_ADC_PollForConversion+0x1dc>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d002      	beq.n	8002e82 <HAL_ADC_PollForConversion+0x16a>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	e000      	b.n	8002e84 <HAL_ADC_PollForConversion+0x16c>
 8002e82:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef0 <HAL_ADC_PollForConversion+0x1d8>)
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6812      	ldr	r2, [r2, #0]
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d008      	beq.n	8002e9e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d005      	beq.n	8002e9e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2b05      	cmp	r3, #5
 8002e96:	d002      	beq.n	8002e9e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	2b09      	cmp	r3, #9
 8002e9c:	d104      	bne.n	8002ea8 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	61bb      	str	r3, [r7, #24]
 8002ea6:	e00c      	b.n	8002ec2 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a11      	ldr	r2, [pc, #68]	@ (8002ef4 <HAL_ADC_PollForConversion+0x1dc>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d002      	beq.n	8002eb8 <HAL_ADC_PollForConversion+0x1a0>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	e000      	b.n	8002eba <HAL_ADC_PollForConversion+0x1a2>
 8002eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef0 <HAL_ADC_PollForConversion+0x1d8>)
 8002eba:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	d104      	bne.n	8002ed2 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2208      	movs	r2, #8
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	e008      	b.n	8002ee4 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d103      	bne.n	8002ee4 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	220c      	movs	r2, #12
 8002ee2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3720      	adds	r7, #32
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40022000 	.word	0x40022000
 8002ef4:	40022100 	.word	0x40022100
 8002ef8:	40022300 	.word	0x40022300
 8002efc:	58026300 	.word	0x58026300

08002f00 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002f1c:	b590      	push	{r4, r7, lr}
 8002f1e:	b0b9      	sub	sp, #228	@ 0xe4
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f36:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	4aab      	ldr	r2, [pc, #684]	@ (80031ec <HAL_ADC_ConfigChannel+0x2d0>)
 8002f3e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d102      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x34>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	f000 bcfe 	b.w	800394c <HAL_ADC_ConfigChannel+0xa30>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff fb99 	bl	8002694 <LL_ADC_REG_IsConversionOngoing>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f040 84e2 	bne.w	800392e <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	db38      	blt.n	8002fe4 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a9e      	ldr	r2, [pc, #632]	@ (80031f0 <HAL_ADC_ConfigChannel+0x2d4>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d033      	beq.n	8002fe4 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d108      	bne.n	8002f9a <HAL_ADC_ConfigChannel+0x7e>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	0e9b      	lsrs	r3, r3, #26
 8002f8e:	f003 031f 	and.w	r3, r3, #31
 8002f92:	2201      	movs	r2, #1
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	e01d      	b.n	8002fd6 <HAL_ADC_ConfigChannel+0xba>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fa6:	fa93 f3a3 	rbit	r3, r3
 8002faa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002fae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002fb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8002fbe:	2320      	movs	r3, #32
 8002fc0:	e004      	b.n	8002fcc <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8002fc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002fc6:	fab3 f383 	clz	r3, r3
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f003 031f 	and.w	r3, r3, #31
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6812      	ldr	r2, [r2, #0]
 8002fda:	69d1      	ldr	r1, [r2, #28]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	430b      	orrs	r3, r1
 8002fe2:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6818      	ldr	r0, [r3, #0]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	6859      	ldr	r1, [r3, #4]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	f7ff f9d8 	bl	80023a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fb4a 	bl	8002694 <LL_ADC_REG_IsConversionOngoing>
 8003000:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff fb6b 	bl	80026e4 <LL_ADC_INJ_IsConversionOngoing>
 800300e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003012:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003016:	2b00      	cmp	r3, #0
 8003018:	f040 8270 	bne.w	80034fc <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800301c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003020:	2b00      	cmp	r3, #0
 8003022:	f040 826b 	bne.w	80034fc <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6818      	ldr	r0, [r3, #0]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	6819      	ldr	r1, [r3, #0]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	461a      	mov	r2, r3
 8003034:	f7ff f9e3 	bl	80023fe <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a6c      	ldr	r2, [pc, #432]	@ (80031f0 <HAL_ADC_ConfigChannel+0x2d4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d10d      	bne.n	800305e <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	08db      	lsrs	r3, r3, #3
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800305c:	e032      	b.n	80030c4 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800305e:	4b65      	ldr	r3, [pc, #404]	@ (80031f4 <HAL_ADC_ConfigChannel+0x2d8>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003066:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800306a:	d10b      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x168>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	695a      	ldr	r2, [r3, #20]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	089b      	lsrs	r3, r3, #2
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	e01d      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x1a4>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10b      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x18e>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	695a      	ldr	r2, [r3, #20]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	089b      	lsrs	r3, r3, #2
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	e00a      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x1a4>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	695a      	ldr	r2, [r3, #20]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	089b      	lsrs	r3, r3, #2
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d048      	beq.n	800315e <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6818      	ldr	r0, [r3, #0]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	6919      	ldr	r1, [r3, #16]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030dc:	f7ff f85e 	bl	800219c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a42      	ldr	r2, [pc, #264]	@ (80031f0 <HAL_ADC_ConfigChannel+0x2d4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d119      	bne.n	800311e <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	6919      	ldr	r1, [r3, #16]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	461a      	mov	r2, r3
 80030f8:	f7ff f8f6 	bl	80022e8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	6919      	ldr	r1, [r3, #16]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	f893 3020 	ldrb.w	r3, [r3, #32]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d102      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x1f8>
 800310e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003112:	e000      	b.n	8003116 <HAL_ADC_ConfigChannel+0x1fa>
 8003114:	2300      	movs	r3, #0
 8003116:	461a      	mov	r2, r3
 8003118:	f7ff f8c4 	bl	80022a4 <LL_ADC_SetOffsetSaturation>
 800311c:	e1ee      	b.n	80034fc <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6919      	ldr	r1, [r3, #16]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800312c:	2b01      	cmp	r3, #1
 800312e:	d102      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x21a>
 8003130:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003134:	e000      	b.n	8003138 <HAL_ADC_ConfigChannel+0x21c>
 8003136:	2300      	movs	r3, #0
 8003138:	461a      	mov	r2, r3
 800313a:	f7ff f891 	bl	8002260 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	6919      	ldr	r1, [r3, #16]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	7e1b      	ldrb	r3, [r3, #24]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d102      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x238>
 800314e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003152:	e000      	b.n	8003156 <HAL_ADC_ConfigChannel+0x23a>
 8003154:	2300      	movs	r3, #0
 8003156:	461a      	mov	r2, r3
 8003158:	f7ff f868 	bl	800222c <LL_ADC_SetDataRightShift>
 800315c:	e1ce      	b.n	80034fc <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a23      	ldr	r2, [pc, #140]	@ (80031f0 <HAL_ADC_ConfigChannel+0x2d4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	f040 8181 	bne.w	800346c <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2100      	movs	r1, #0
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff f845 	bl	8002200 <LL_ADC_GetOffsetChannel>
 8003176:	4603      	mov	r3, r0
 8003178:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10a      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x27a>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2100      	movs	r1, #0
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff f83a 	bl	8002200 <LL_ADC_GetOffsetChannel>
 800318c:	4603      	mov	r3, r0
 800318e:	0e9b      	lsrs	r3, r3, #26
 8003190:	f003 021f 	and.w	r2, r3, #31
 8003194:	e01e      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x2b8>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2100      	movs	r1, #0
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff f82f 	bl	8002200 <LL_ADC_GetOffsetChannel>
 80031a2:	4603      	mov	r3, r0
 80031a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80031ac:	fa93 f3a3 	rbit	r3, r3
 80031b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80031b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80031b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80031bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 80031c4:	2320      	movs	r3, #32
 80031c6:	e004      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 80031c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80031cc:	fab3 f383 	clz	r3, r3
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10b      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x2dc>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	0e9b      	lsrs	r3, r3, #26
 80031e6:	f003 031f 	and.w	r3, r3, #31
 80031ea:	e01e      	b.n	800322a <HAL_ADC_ConfigChannel+0x30e>
 80031ec:	47ff0000 	.word	0x47ff0000
 80031f0:	58026000 	.word	0x58026000
 80031f4:	5c001000 	.word	0x5c001000
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003200:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003204:	fa93 f3a3 	rbit	r3, r3
 8003208:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800320c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003210:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003214:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 800321c:	2320      	movs	r3, #32
 800321e:	e004      	b.n	800322a <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003220:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003224:	fab3 f383 	clz	r3, r3
 8003228:	b2db      	uxtb	r3, r3
 800322a:	429a      	cmp	r2, r3
 800322c:	d106      	bne.n	800323c <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2200      	movs	r2, #0
 8003234:	2100      	movs	r1, #0
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff f878 	bl	800232c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2101      	movs	r1, #1
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe ffdc 	bl	8002200 <LL_ADC_GetOffsetChannel>
 8003248:	4603      	mov	r3, r0
 800324a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10a      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x34c>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2101      	movs	r1, #1
 8003258:	4618      	mov	r0, r3
 800325a:	f7fe ffd1 	bl	8002200 <LL_ADC_GetOffsetChannel>
 800325e:	4603      	mov	r3, r0
 8003260:	0e9b      	lsrs	r3, r3, #26
 8003262:	f003 021f 	and.w	r2, r3, #31
 8003266:	e01e      	b.n	80032a6 <HAL_ADC_ConfigChannel+0x38a>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2101      	movs	r1, #1
 800326e:	4618      	mov	r0, r3
 8003270:	f7fe ffc6 	bl	8002200 <LL_ADC_GetOffsetChannel>
 8003274:	4603      	mov	r3, r0
 8003276:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800327e:	fa93 f3a3 	rbit	r3, r3
 8003282:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003286:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800328a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800328e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003296:	2320      	movs	r3, #32
 8003298:	e004      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 800329a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800329e:	fab3 f383 	clz	r3, r3
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	461a      	mov	r2, r3
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d105      	bne.n	80032be <HAL_ADC_ConfigChannel+0x3a2>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	0e9b      	lsrs	r3, r3, #26
 80032b8:	f003 031f 	and.w	r3, r3, #31
 80032bc:	e018      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x3d4>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032ca:	fa93 f3a3 	rbit	r3, r3
 80032ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80032d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80032d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80032da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 80032e2:	2320      	movs	r3, #32
 80032e4:	e004      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 80032e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032ea:	fab3 f383 	clz	r3, r3
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d106      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2200      	movs	r2, #0
 80032fa:	2101      	movs	r1, #1
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff f815 	bl	800232c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2102      	movs	r1, #2
 8003308:	4618      	mov	r0, r3
 800330a:	f7fe ff79 	bl	8002200 <LL_ADC_GetOffsetChannel>
 800330e:	4603      	mov	r3, r0
 8003310:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10a      	bne.n	800332e <HAL_ADC_ConfigChannel+0x412>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2102      	movs	r1, #2
 800331e:	4618      	mov	r0, r3
 8003320:	f7fe ff6e 	bl	8002200 <LL_ADC_GetOffsetChannel>
 8003324:	4603      	mov	r3, r0
 8003326:	0e9b      	lsrs	r3, r3, #26
 8003328:	f003 021f 	and.w	r2, r3, #31
 800332c:	e01e      	b.n	800336c <HAL_ADC_ConfigChannel+0x450>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2102      	movs	r1, #2
 8003334:	4618      	mov	r0, r3
 8003336:	f7fe ff63 	bl	8002200 <LL_ADC_GetOffsetChannel>
 800333a:	4603      	mov	r3, r0
 800333c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003340:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003344:	fa93 f3a3 	rbit	r3, r3
 8003348:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800334c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003350:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003354:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 800335c:	2320      	movs	r3, #32
 800335e:	e004      	b.n	800336a <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003360:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003364:	fab3 f383 	clz	r3, r3
 8003368:	b2db      	uxtb	r3, r3
 800336a:	461a      	mov	r2, r3
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003374:	2b00      	cmp	r3, #0
 8003376:	d105      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x468>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	0e9b      	lsrs	r3, r3, #26
 800337e:	f003 031f 	and.w	r3, r3, #31
 8003382:	e014      	b.n	80033ae <HAL_ADC_ConfigChannel+0x492>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800338c:	fa93 f3a3 	rbit	r3, r3
 8003390:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003392:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003394:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003398:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80033a0:	2320      	movs	r3, #32
 80033a2:	e004      	b.n	80033ae <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80033a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80033a8:	fab3 f383 	clz	r3, r3
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d106      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2200      	movs	r2, #0
 80033b8:	2102      	movs	r1, #2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fe ffb6 	bl	800232c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2103      	movs	r1, #3
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7fe ff1a 	bl	8002200 <LL_ADC_GetOffsetChannel>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10a      	bne.n	80033ec <HAL_ADC_ConfigChannel+0x4d0>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2103      	movs	r1, #3
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fe ff0f 	bl	8002200 <LL_ADC_GetOffsetChannel>
 80033e2:	4603      	mov	r3, r0
 80033e4:	0e9b      	lsrs	r3, r3, #26
 80033e6:	f003 021f 	and.w	r2, r3, #31
 80033ea:	e017      	b.n	800341c <HAL_ADC_ConfigChannel+0x500>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2103      	movs	r1, #3
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe ff04 	bl	8002200 <LL_ADC_GetOffsetChannel>
 80033f8:	4603      	mov	r3, r0
 80033fa:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033fe:	fa93 f3a3 	rbit	r3, r3
 8003402:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003404:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003406:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003408:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 800340e:	2320      	movs	r3, #32
 8003410:	e003      	b.n	800341a <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8003412:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003414:	fab3 f383 	clz	r3, r3
 8003418:	b2db      	uxtb	r3, r3
 800341a:	461a      	mov	r2, r3
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003424:	2b00      	cmp	r3, #0
 8003426:	d105      	bne.n	8003434 <HAL_ADC_ConfigChannel+0x518>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	0e9b      	lsrs	r3, r3, #26
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	e011      	b.n	8003458 <HAL_ADC_ConfigChannel+0x53c>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800343c:	fa93 f3a3 	rbit	r3, r3
 8003440:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003442:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003444:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003446:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 800344c:	2320      	movs	r3, #32
 800344e:	e003      	b.n	8003458 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8003450:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003452:	fab3 f383 	clz	r3, r3
 8003456:	b2db      	uxtb	r3, r3
 8003458:	429a      	cmp	r2, r3
 800345a:	d14f      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2200      	movs	r2, #0
 8003462:	2103      	movs	r1, #3
 8003464:	4618      	mov	r0, r3
 8003466:	f7fe ff61 	bl	800232c <LL_ADC_SetOffsetState>
 800346a:	e047      	b.n	80034fc <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003472:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	069b      	lsls	r3, r3, #26
 800347c:	429a      	cmp	r2, r3
 800347e:	d107      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800348e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003496:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	069b      	lsls	r3, r3, #26
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d107      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80034b2:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	069b      	lsls	r3, r3, #26
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d107      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80034d6:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	069b      	lsls	r3, r3, #26
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d107      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80034fa:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff f879 	bl	80025f8 <LL_ADC_IsEnabled>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	f040 8219 	bne.w	8003940 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6818      	ldr	r0, [r3, #0]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	6819      	ldr	r1, [r3, #0]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	461a      	mov	r2, r3
 800351c:	f7fe ff9a 	bl	8002454 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	4aa1      	ldr	r2, [pc, #644]	@ (80037ac <HAL_ADC_ConfigChannel+0x890>)
 8003526:	4293      	cmp	r3, r2
 8003528:	f040 812e 	bne.w	8003788 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10b      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x638>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	0e9b      	lsrs	r3, r3, #26
 8003542:	3301      	adds	r3, #1
 8003544:	f003 031f 	and.w	r3, r3, #31
 8003548:	2b09      	cmp	r3, #9
 800354a:	bf94      	ite	ls
 800354c:	2301      	movls	r3, #1
 800354e:	2300      	movhi	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	e019      	b.n	8003588 <HAL_ADC_ConfigChannel+0x66c>
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800355c:	fa93 f3a3 	rbit	r3, r3
 8003560:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003564:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003566:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800356c:	2320      	movs	r3, #32
 800356e:	e003      	b.n	8003578 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003570:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003572:	fab3 f383 	clz	r3, r3
 8003576:	b2db      	uxtb	r3, r3
 8003578:	3301      	adds	r3, #1
 800357a:	f003 031f 	and.w	r3, r3, #31
 800357e:	2b09      	cmp	r3, #9
 8003580:	bf94      	ite	ls
 8003582:	2301      	movls	r3, #1
 8003584:	2300      	movhi	r3, #0
 8003586:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003588:	2b00      	cmp	r3, #0
 800358a:	d079      	beq.n	8003680 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003594:	2b00      	cmp	r3, #0
 8003596:	d107      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x68c>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	0e9b      	lsrs	r3, r3, #26
 800359e:	3301      	adds	r3, #1
 80035a0:	069b      	lsls	r3, r3, #26
 80035a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035a6:	e015      	b.n	80035d4 <HAL_ADC_ConfigChannel+0x6b8>
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035b0:	fa93 f3a3 	rbit	r3, r3
 80035b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80035b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035b8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80035ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80035c0:	2320      	movs	r3, #32
 80035c2:	e003      	b.n	80035cc <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80035c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035c6:	fab3 f383 	clz	r3, r3
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	3301      	adds	r3, #1
 80035ce:	069b      	lsls	r3, r3, #26
 80035d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d109      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x6d8>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	0e9b      	lsrs	r3, r3, #26
 80035e6:	3301      	adds	r3, #1
 80035e8:	f003 031f 	and.w	r3, r3, #31
 80035ec:	2101      	movs	r1, #1
 80035ee:	fa01 f303 	lsl.w	r3, r1, r3
 80035f2:	e017      	b.n	8003624 <HAL_ADC_ConfigChannel+0x708>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035fc:	fa93 f3a3 	rbit	r3, r3
 8003600:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003604:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003606:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 800360c:	2320      	movs	r3, #32
 800360e:	e003      	b.n	8003618 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8003610:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003612:	fab3 f383 	clz	r3, r3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	3301      	adds	r3, #1
 800361a:	f003 031f 	and.w	r3, r3, #31
 800361e:	2101      	movs	r1, #1
 8003620:	fa01 f303 	lsl.w	r3, r1, r3
 8003624:	ea42 0103 	orr.w	r1, r2, r3
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10a      	bne.n	800364a <HAL_ADC_ConfigChannel+0x72e>
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	0e9b      	lsrs	r3, r3, #26
 800363a:	3301      	adds	r3, #1
 800363c:	f003 021f 	and.w	r2, r3, #31
 8003640:	4613      	mov	r3, r2
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	4413      	add	r3, r2
 8003646:	051b      	lsls	r3, r3, #20
 8003648:	e018      	b.n	800367c <HAL_ADC_ConfigChannel+0x760>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003652:	fa93 f3a3 	rbit	r3, r3
 8003656:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800365a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800365c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8003662:	2320      	movs	r3, #32
 8003664:	e003      	b.n	800366e <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8003666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003668:	fab3 f383 	clz	r3, r3
 800366c:	b2db      	uxtb	r3, r3
 800366e:	3301      	adds	r3, #1
 8003670:	f003 021f 	and.w	r2, r3, #31
 8003674:	4613      	mov	r3, r2
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	4413      	add	r3, r2
 800367a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800367c:	430b      	orrs	r3, r1
 800367e:	e07e      	b.n	800377e <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003688:	2b00      	cmp	r3, #0
 800368a:	d107      	bne.n	800369c <HAL_ADC_ConfigChannel+0x780>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	0e9b      	lsrs	r3, r3, #26
 8003692:	3301      	adds	r3, #1
 8003694:	069b      	lsls	r3, r3, #26
 8003696:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800369a:	e015      	b.n	80036c8 <HAL_ADC_ConfigChannel+0x7ac>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a4:	fa93 f3a3 	rbit	r3, r3
 80036a8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80036aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80036ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80036b4:	2320      	movs	r3, #32
 80036b6:	e003      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80036b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ba:	fab3 f383 	clz	r3, r3
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	3301      	adds	r3, #1
 80036c2:	069b      	lsls	r3, r3, #26
 80036c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d109      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x7cc>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	0e9b      	lsrs	r3, r3, #26
 80036da:	3301      	adds	r3, #1
 80036dc:	f003 031f 	and.w	r3, r3, #31
 80036e0:	2101      	movs	r1, #1
 80036e2:	fa01 f303 	lsl.w	r3, r1, r3
 80036e6:	e017      	b.n	8003718 <HAL_ADC_ConfigChannel+0x7fc>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	fa93 f3a3 	rbit	r3, r3
 80036f4:	61bb      	str	r3, [r7, #24]
  return result;
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8003700:	2320      	movs	r3, #32
 8003702:	e003      	b.n	800370c <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	fab3 f383 	clz	r3, r3
 800370a:	b2db      	uxtb	r3, r3
 800370c:	3301      	adds	r3, #1
 800370e:	f003 031f 	and.w	r3, r3, #31
 8003712:	2101      	movs	r1, #1
 8003714:	fa01 f303 	lsl.w	r3, r1, r3
 8003718:	ea42 0103 	orr.w	r1, r2, r3
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10d      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x828>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	0e9b      	lsrs	r3, r3, #26
 800372e:	3301      	adds	r3, #1
 8003730:	f003 021f 	and.w	r2, r3, #31
 8003734:	4613      	mov	r3, r2
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	4413      	add	r3, r2
 800373a:	3b1e      	subs	r3, #30
 800373c:	051b      	lsls	r3, r3, #20
 800373e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003742:	e01b      	b.n	800377c <HAL_ADC_ConfigChannel+0x860>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	fa93 f3a3 	rbit	r3, r3
 8003750:	60fb      	str	r3, [r7, #12]
  return result;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 800375c:	2320      	movs	r3, #32
 800375e:	e003      	b.n	8003768 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	fab3 f383 	clz	r3, r3
 8003766:	b2db      	uxtb	r3, r3
 8003768:	3301      	adds	r3, #1
 800376a:	f003 021f 	and.w	r2, r3, #31
 800376e:	4613      	mov	r3, r2
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	4413      	add	r3, r2
 8003774:	3b1e      	subs	r3, #30
 8003776:	051b      	lsls	r3, r3, #20
 8003778:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800377c:	430b      	orrs	r3, r1
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	6892      	ldr	r2, [r2, #8]
 8003782:	4619      	mov	r1, r3
 8003784:	f7fe fe3b 	bl	80023fe <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	f280 80d7 	bge.w	8003940 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a06      	ldr	r2, [pc, #24]	@ (80037b0 <HAL_ADC_ConfigChannel+0x894>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d004      	beq.n	80037a6 <HAL_ADC_ConfigChannel+0x88a>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a04      	ldr	r2, [pc, #16]	@ (80037b4 <HAL_ADC_ConfigChannel+0x898>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d10a      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x8a0>
 80037a6:	4b04      	ldr	r3, [pc, #16]	@ (80037b8 <HAL_ADC_ConfigChannel+0x89c>)
 80037a8:	e009      	b.n	80037be <HAL_ADC_ConfigChannel+0x8a2>
 80037aa:	bf00      	nop
 80037ac:	47ff0000 	.word	0x47ff0000
 80037b0:	40022000 	.word	0x40022000
 80037b4:	40022100 	.word	0x40022100
 80037b8:	40022300 	.word	0x40022300
 80037bc:	4b65      	ldr	r3, [pc, #404]	@ (8003954 <HAL_ADC_ConfigChannel+0xa38>)
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fe fcde 	bl	8002180 <LL_ADC_GetCommonPathInternalCh>
 80037c4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a62      	ldr	r2, [pc, #392]	@ (8003958 <HAL_ADC_ConfigChannel+0xa3c>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d004      	beq.n	80037dc <HAL_ADC_ConfigChannel+0x8c0>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a61      	ldr	r2, [pc, #388]	@ (800395c <HAL_ADC_ConfigChannel+0xa40>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d10e      	bne.n	80037fa <HAL_ADC_ConfigChannel+0x8de>
 80037dc:	485e      	ldr	r0, [pc, #376]	@ (8003958 <HAL_ADC_ConfigChannel+0xa3c>)
 80037de:	f7fe ff0b 	bl	80025f8 <LL_ADC_IsEnabled>
 80037e2:	4604      	mov	r4, r0
 80037e4:	485d      	ldr	r0, [pc, #372]	@ (800395c <HAL_ADC_ConfigChannel+0xa40>)
 80037e6:	f7fe ff07 	bl	80025f8 <LL_ADC_IsEnabled>
 80037ea:	4603      	mov	r3, r0
 80037ec:	4323      	orrs	r3, r4
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	bf0c      	ite	eq
 80037f2:	2301      	moveq	r3, #1
 80037f4:	2300      	movne	r3, #0
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	e008      	b.n	800380c <HAL_ADC_ConfigChannel+0x8f0>
 80037fa:	4859      	ldr	r0, [pc, #356]	@ (8003960 <HAL_ADC_ConfigChannel+0xa44>)
 80037fc:	f7fe fefc 	bl	80025f8 <LL_ADC_IsEnabled>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	bf0c      	ite	eq
 8003806:	2301      	moveq	r3, #1
 8003808:	2300      	movne	r3, #0
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 8084 	beq.w	800391a <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a53      	ldr	r2, [pc, #332]	@ (8003964 <HAL_ADC_ConfigChannel+0xa48>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d132      	bne.n	8003882 <HAL_ADC_ConfigChannel+0x966>
 800381c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003820:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d12c      	bne.n	8003882 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a4c      	ldr	r2, [pc, #304]	@ (8003960 <HAL_ADC_ConfigChannel+0xa44>)
 800382e:	4293      	cmp	r3, r2
 8003830:	f040 8086 	bne.w	8003940 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a47      	ldr	r2, [pc, #284]	@ (8003958 <HAL_ADC_ConfigChannel+0xa3c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d004      	beq.n	8003848 <HAL_ADC_ConfigChannel+0x92c>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a46      	ldr	r2, [pc, #280]	@ (800395c <HAL_ADC_ConfigChannel+0xa40>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d101      	bne.n	800384c <HAL_ADC_ConfigChannel+0x930>
 8003848:	4a47      	ldr	r2, [pc, #284]	@ (8003968 <HAL_ADC_ConfigChannel+0xa4c>)
 800384a:	e000      	b.n	800384e <HAL_ADC_ConfigChannel+0x932>
 800384c:	4a41      	ldr	r2, [pc, #260]	@ (8003954 <HAL_ADC_ConfigChannel+0xa38>)
 800384e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003852:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003856:	4619      	mov	r1, r3
 8003858:	4610      	mov	r0, r2
 800385a:	f7fe fc7e 	bl	800215a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800385e:	4b43      	ldr	r3, [pc, #268]	@ (800396c <HAL_ADC_ConfigChannel+0xa50>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	099b      	lsrs	r3, r3, #6
 8003864:	4a42      	ldr	r2, [pc, #264]	@ (8003970 <HAL_ADC_ConfigChannel+0xa54>)
 8003866:	fba2 2303 	umull	r2, r3, r2, r3
 800386a:	099b      	lsrs	r3, r3, #6
 800386c:	3301      	adds	r3, #1
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003872:	e002      	b.n	800387a <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	3b01      	subs	r3, #1
 8003878:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1f9      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003880:	e05e      	b.n	8003940 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a3b      	ldr	r2, [pc, #236]	@ (8003974 <HAL_ADC_ConfigChannel+0xa58>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d120      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x9b2>
 800388c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003890:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d11a      	bne.n	80038ce <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a30      	ldr	r2, [pc, #192]	@ (8003960 <HAL_ADC_ConfigChannel+0xa44>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d14e      	bne.n	8003940 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003958 <HAL_ADC_ConfigChannel+0xa3c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d004      	beq.n	80038b6 <HAL_ADC_ConfigChannel+0x99a>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a2a      	ldr	r2, [pc, #168]	@ (800395c <HAL_ADC_ConfigChannel+0xa40>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d101      	bne.n	80038ba <HAL_ADC_ConfigChannel+0x99e>
 80038b6:	4a2c      	ldr	r2, [pc, #176]	@ (8003968 <HAL_ADC_ConfigChannel+0xa4c>)
 80038b8:	e000      	b.n	80038bc <HAL_ADC_ConfigChannel+0x9a0>
 80038ba:	4a26      	ldr	r2, [pc, #152]	@ (8003954 <HAL_ADC_ConfigChannel+0xa38>)
 80038bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80038c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038c4:	4619      	mov	r1, r3
 80038c6:	4610      	mov	r0, r2
 80038c8:	f7fe fc47 	bl	800215a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038cc:	e038      	b.n	8003940 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a29      	ldr	r2, [pc, #164]	@ (8003978 <HAL_ADC_ConfigChannel+0xa5c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d133      	bne.n	8003940 <HAL_ADC_ConfigChannel+0xa24>
 80038d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80038dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d12d      	bne.n	8003940 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003960 <HAL_ADC_ConfigChannel+0xa44>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d128      	bne.n	8003940 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a19      	ldr	r2, [pc, #100]	@ (8003958 <HAL_ADC_ConfigChannel+0xa3c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d004      	beq.n	8003902 <HAL_ADC_ConfigChannel+0x9e6>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a17      	ldr	r2, [pc, #92]	@ (800395c <HAL_ADC_ConfigChannel+0xa40>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d101      	bne.n	8003906 <HAL_ADC_ConfigChannel+0x9ea>
 8003902:	4a19      	ldr	r2, [pc, #100]	@ (8003968 <HAL_ADC_ConfigChannel+0xa4c>)
 8003904:	e000      	b.n	8003908 <HAL_ADC_ConfigChannel+0x9ec>
 8003906:	4a13      	ldr	r2, [pc, #76]	@ (8003954 <HAL_ADC_ConfigChannel+0xa38>)
 8003908:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800390c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003910:	4619      	mov	r1, r3
 8003912:	4610      	mov	r0, r2
 8003914:	f7fe fc21 	bl	800215a <LL_ADC_SetCommonPathInternalCh>
 8003918:	e012      	b.n	8003940 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391e:	f043 0220 	orr.w	r2, r3, #32
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 800392c:	e008      	b.n	8003940 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003932:	f043 0220 	orr.w	r2, r3, #32
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003948:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 800394c:	4618      	mov	r0, r3
 800394e:	37e4      	adds	r7, #228	@ 0xe4
 8003950:	46bd      	mov	sp, r7
 8003952:	bd90      	pop	{r4, r7, pc}
 8003954:	58026300 	.word	0x58026300
 8003958:	40022000 	.word	0x40022000
 800395c:	40022100 	.word	0x40022100
 8003960:	58026000 	.word	0x58026000
 8003964:	c7520000 	.word	0xc7520000
 8003968:	40022300 	.word	0x40022300
 800396c:	24000010 	.word	0x24000010
 8003970:	053e2d63 	.word	0x053e2d63
 8003974:	c3210000 	.word	0xc3210000
 8003978:	cb840000 	.word	0xcb840000

0800397c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b088      	sub	sp, #32
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003986:	2300      	movs	r3, #0
 8003988:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f7fe fe7e 	bl	8002694 <LL_ADC_REG_IsConversionOngoing>
 8003998:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fe fea0 	bl	80026e4 <LL_ADC_INJ_IsConversionOngoing>
 80039a4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d103      	bne.n	80039b4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 8098 	beq.w	8003ae4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d02a      	beq.n	8003a18 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	7e5b      	ldrb	r3, [r3, #25]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d126      	bne.n	8003a18 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	7e1b      	ldrb	r3, [r3, #24]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d122      	bne.n	8003a18 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80039d2:	2301      	movs	r3, #1
 80039d4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80039d6:	e014      	b.n	8003a02 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	4a45      	ldr	r2, [pc, #276]	@ (8003af0 <ADC_ConversionStop+0x174>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d90d      	bls.n	80039fc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e4:	f043 0210 	orr.w	r2, r3, #16
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039f0:	f043 0201 	orr.w	r2, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e074      	b.n	8003ae6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	3301      	adds	r3, #1
 8003a00:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a0c:	2b40      	cmp	r3, #64	@ 0x40
 8003a0e:	d1e3      	bne.n	80039d8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2240      	movs	r2, #64	@ 0x40
 8003a16:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d014      	beq.n	8003a48 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fe fe36 	bl	8002694 <LL_ADC_REG_IsConversionOngoing>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00c      	beq.n	8003a48 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe fdf3 	bl	800261e <LL_ADC_IsDisableOngoing>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d104      	bne.n	8003a48 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fe fe12 	bl	800266c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d014      	beq.n	8003a78 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fe fe46 	bl	80026e4 <LL_ADC_INJ_IsConversionOngoing>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00c      	beq.n	8003a78 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fe fddb 	bl	800261e <LL_ADC_IsDisableOngoing>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d104      	bne.n	8003a78 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fe fe22 	bl	80026bc <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d005      	beq.n	8003a8a <ADC_ConversionStop+0x10e>
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d105      	bne.n	8003a90 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003a84:	230c      	movs	r3, #12
 8003a86:	617b      	str	r3, [r7, #20]
        break;
 8003a88:	e005      	b.n	8003a96 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003a8a:	2308      	movs	r3, #8
 8003a8c:	617b      	str	r3, [r7, #20]
        break;
 8003a8e:	e002      	b.n	8003a96 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003a90:	2304      	movs	r3, #4
 8003a92:	617b      	str	r3, [r7, #20]
        break;
 8003a94:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003a96:	f7fe fb1d 	bl	80020d4 <HAL_GetTick>
 8003a9a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003a9c:	e01b      	b.n	8003ad6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003a9e:	f7fe fb19 	bl	80020d4 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b05      	cmp	r3, #5
 8003aaa:	d914      	bls.n	8003ad6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00d      	beq.n	8003ad6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003abe:	f043 0210 	orr.w	r2, r3, #16
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003aca:	f043 0201 	orr.w	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e007      	b.n	8003ae6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1dc      	bne.n	8003a9e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3720      	adds	r7, #32
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	000cdbff 	.word	0x000cdbff

08003af4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fe fd79 	bl	80025f8 <LL_ADC_IsEnabled>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d16e      	bne.n	8003bea <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	4b38      	ldr	r3, [pc, #224]	@ (8003bf4 <ADC_Enable+0x100>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00d      	beq.n	8003b36 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b1e:	f043 0210 	orr.w	r2, r3, #16
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b2a:	f043 0201 	orr.w	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e05a      	b.n	8003bec <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fe fd34 	bl	80025a8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003b40:	f7fe fac8 	bl	80020d4 <HAL_GetTick>
 8003b44:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a2b      	ldr	r2, [pc, #172]	@ (8003bf8 <ADC_Enable+0x104>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d004      	beq.n	8003b5a <ADC_Enable+0x66>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a29      	ldr	r2, [pc, #164]	@ (8003bfc <ADC_Enable+0x108>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d101      	bne.n	8003b5e <ADC_Enable+0x6a>
 8003b5a:	4b29      	ldr	r3, [pc, #164]	@ (8003c00 <ADC_Enable+0x10c>)
 8003b5c:	e000      	b.n	8003b60 <ADC_Enable+0x6c>
 8003b5e:	4b29      	ldr	r3, [pc, #164]	@ (8003c04 <ADC_Enable+0x110>)
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fe fcb7 	bl	80024d4 <LL_ADC_GetMultimode>
 8003b66:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a23      	ldr	r2, [pc, #140]	@ (8003bfc <ADC_Enable+0x108>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d002      	beq.n	8003b78 <ADC_Enable+0x84>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	e000      	b.n	8003b7a <ADC_Enable+0x86>
 8003b78:	4b1f      	ldr	r3, [pc, #124]	@ (8003bf8 <ADC_Enable+0x104>)
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6812      	ldr	r2, [r2, #0]
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d02c      	beq.n	8003bdc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d130      	bne.n	8003bea <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b88:	e028      	b.n	8003bdc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fe fd32 	bl	80025f8 <LL_ADC_IsEnabled>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d104      	bne.n	8003ba4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fe fd02 	bl	80025a8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ba4:	f7fe fa96 	bl	80020d4 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d914      	bls.n	8003bdc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d00d      	beq.n	8003bdc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bc4:	f043 0210 	orr.w	r2, r3, #16
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bd0:	f043 0201 	orr.w	r2, r3, #1
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e007      	b.n	8003bec <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d1cf      	bne.n	8003b8a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	8000003f 	.word	0x8000003f
 8003bf8:	40022000 	.word	0x40022000
 8003bfc:	40022100 	.word	0x40022100
 8003c00:	40022300 	.word	0x40022300
 8003c04:	58026300 	.word	0x58026300

08003c08 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7fe fd02 	bl	800261e <LL_ADC_IsDisableOngoing>
 8003c1a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fe fce9 	bl	80025f8 <LL_ADC_IsEnabled>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d047      	beq.n	8003cbc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d144      	bne.n	8003cbc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 030d 	and.w	r3, r3, #13
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d10c      	bne.n	8003c5a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7fe fcc3 	bl	80025d0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2203      	movs	r2, #3
 8003c50:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c52:	f7fe fa3f 	bl	80020d4 <HAL_GetTick>
 8003c56:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c58:	e029      	b.n	8003cae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c5e:	f043 0210 	orr.w	r2, r3, #16
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c6a:	f043 0201 	orr.w	r2, r3, #1
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e023      	b.n	8003cbe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c76:	f7fe fa2d 	bl	80020d4 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d914      	bls.n	8003cae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00d      	beq.n	8003cae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c96:	f043 0210 	orr.w	r2, r3, #16
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ca2:	f043 0201 	orr.w	r2, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e007      	b.n	8003cbe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1dc      	bne.n	8003c76 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
	...

08003cc8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a6c      	ldr	r2, [pc, #432]	@ (8003e88 <ADC_ConfigureBoostMode+0x1c0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d004      	beq.n	8003ce4 <ADC_ConfigureBoostMode+0x1c>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a6b      	ldr	r2, [pc, #428]	@ (8003e8c <ADC_ConfigureBoostMode+0x1c4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d109      	bne.n	8003cf8 <ADC_ConfigureBoostMode+0x30>
 8003ce4:	4b6a      	ldr	r3, [pc, #424]	@ (8003e90 <ADC_ConfigureBoostMode+0x1c8>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	bf14      	ite	ne
 8003cf0:	2301      	movne	r3, #1
 8003cf2:	2300      	moveq	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	e008      	b.n	8003d0a <ADC_ConfigureBoostMode+0x42>
 8003cf8:	4b66      	ldr	r3, [pc, #408]	@ (8003e94 <ADC_ConfigureBoostMode+0x1cc>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	bf14      	ite	ne
 8003d04:	2301      	movne	r3, #1
 8003d06:	2300      	moveq	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d01c      	beq.n	8003d48 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003d0e:	f002 fdbb 	bl	8006888 <HAL_RCC_GetHCLKFreq>
 8003d12:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d1c:	d010      	beq.n	8003d40 <ADC_ConfigureBoostMode+0x78>
 8003d1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d22:	d873      	bhi.n	8003e0c <ADC_ConfigureBoostMode+0x144>
 8003d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d28:	d002      	beq.n	8003d30 <ADC_ConfigureBoostMode+0x68>
 8003d2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d2e:	d16d      	bne.n	8003e0c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	0c1b      	lsrs	r3, r3, #16
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3c:	60fb      	str	r3, [r7, #12]
        break;
 8003d3e:	e068      	b.n	8003e12 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	089b      	lsrs	r3, r3, #2
 8003d44:	60fb      	str	r3, [r7, #12]
        break;
 8003d46:	e064      	b.n	8003e12 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003d48:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003d4c:	f04f 0100 	mov.w	r1, #0
 8003d50:	f003 ff96 	bl	8007c80 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d54:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003d5e:	d051      	beq.n	8003e04 <ADC_ConfigureBoostMode+0x13c>
 8003d60:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003d64:	d854      	bhi.n	8003e10 <ADC_ConfigureBoostMode+0x148>
 8003d66:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003d6a:	d047      	beq.n	8003dfc <ADC_ConfigureBoostMode+0x134>
 8003d6c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003d70:	d84e      	bhi.n	8003e10 <ADC_ConfigureBoostMode+0x148>
 8003d72:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003d76:	d03d      	beq.n	8003df4 <ADC_ConfigureBoostMode+0x12c>
 8003d78:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003d7c:	d848      	bhi.n	8003e10 <ADC_ConfigureBoostMode+0x148>
 8003d7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d82:	d033      	beq.n	8003dec <ADC_ConfigureBoostMode+0x124>
 8003d84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d88:	d842      	bhi.n	8003e10 <ADC_ConfigureBoostMode+0x148>
 8003d8a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003d8e:	d029      	beq.n	8003de4 <ADC_ConfigureBoostMode+0x11c>
 8003d90:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003d94:	d83c      	bhi.n	8003e10 <ADC_ConfigureBoostMode+0x148>
 8003d96:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003d9a:	d01a      	beq.n	8003dd2 <ADC_ConfigureBoostMode+0x10a>
 8003d9c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003da0:	d836      	bhi.n	8003e10 <ADC_ConfigureBoostMode+0x148>
 8003da2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003da6:	d014      	beq.n	8003dd2 <ADC_ConfigureBoostMode+0x10a>
 8003da8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003dac:	d830      	bhi.n	8003e10 <ADC_ConfigureBoostMode+0x148>
 8003dae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003db2:	d00e      	beq.n	8003dd2 <ADC_ConfigureBoostMode+0x10a>
 8003db4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003db8:	d82a      	bhi.n	8003e10 <ADC_ConfigureBoostMode+0x148>
 8003dba:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003dbe:	d008      	beq.n	8003dd2 <ADC_ConfigureBoostMode+0x10a>
 8003dc0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003dc4:	d824      	bhi.n	8003e10 <ADC_ConfigureBoostMode+0x148>
 8003dc6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003dca:	d002      	beq.n	8003dd2 <ADC_ConfigureBoostMode+0x10a>
 8003dcc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003dd0:	d11e      	bne.n	8003e10 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	0c9b      	lsrs	r3, r3, #18
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de0:	60fb      	str	r3, [r7, #12]
        break;
 8003de2:	e016      	b.n	8003e12 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	091b      	lsrs	r3, r3, #4
 8003de8:	60fb      	str	r3, [r7, #12]
        break;
 8003dea:	e012      	b.n	8003e12 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	60fb      	str	r3, [r7, #12]
        break;
 8003df2:	e00e      	b.n	8003e12 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	099b      	lsrs	r3, r3, #6
 8003df8:	60fb      	str	r3, [r7, #12]
        break;
 8003dfa:	e00a      	b.n	8003e12 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	09db      	lsrs	r3, r3, #7
 8003e00:	60fb      	str	r3, [r7, #12]
        break;
 8003e02:	e006      	b.n	8003e12 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	0a1b      	lsrs	r3, r3, #8
 8003e08:	60fb      	str	r3, [r7, #12]
        break;
 8003e0a:	e002      	b.n	8003e12 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003e0c:	bf00      	nop
 8003e0e:	e000      	b.n	8003e12 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003e10:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	085b      	lsrs	r3, r3, #1
 8003e16:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4a1f      	ldr	r2, [pc, #124]	@ (8003e98 <ADC_ConfigureBoostMode+0x1d0>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d808      	bhi.n	8003e32 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003e2e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003e30:	e025      	b.n	8003e7e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4a19      	ldr	r2, [pc, #100]	@ (8003e9c <ADC_ConfigureBoostMode+0x1d4>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d80a      	bhi.n	8003e50 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e4c:	609a      	str	r2, [r3, #8]
}
 8003e4e:	e016      	b.n	8003e7e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4a13      	ldr	r2, [pc, #76]	@ (8003ea0 <ADC_ConfigureBoostMode+0x1d8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d80a      	bhi.n	8003e6e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e6a:	609a      	str	r2, [r3, #8]
}
 8003e6c:	e007      	b.n	8003e7e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003e7c:	609a      	str	r2, [r3, #8]
}
 8003e7e:	bf00      	nop
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40022000 	.word	0x40022000
 8003e8c:	40022100 	.word	0x40022100
 8003e90:	40022300 	.word	0x40022300
 8003e94:	58026300 	.word	0x58026300
 8003e98:	005f5e10 	.word	0x005f5e10
 8003e9c:	00bebc20 	.word	0x00bebc20
 8003ea0:	017d7840 	.word	0x017d7840

08003ea4 <LL_ADC_IsEnabled>:
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d101      	bne.n	8003ebc <LL_ADC_IsEnabled+0x18>
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e000      	b.n	8003ebe <LL_ADC_IsEnabled+0x1a>
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <LL_ADC_REG_IsConversionOngoing>:
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 0304 	and.w	r3, r3, #4
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d101      	bne.n	8003ee2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003ef0:	b590      	push	{r4, r7, lr}
 8003ef2:	b0a3      	sub	sp, #140	@ 0x8c
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d101      	bne.n	8003f0e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e0c1      	b.n	8004092 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003f16:	2300      	movs	r3, #0
 8003f18:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a5e      	ldr	r2, [pc, #376]	@ (800409c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d102      	bne.n	8003f2e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003f28:	4b5d      	ldr	r3, [pc, #372]	@ (80040a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	e001      	b.n	8003f32 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10b      	bne.n	8003f50 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f3c:	f043 0220 	orr.w	r2, r3, #32
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e0a0      	b.n	8004092 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff ffb9 	bl	8003eca <LL_ADC_REG_IsConversionOngoing>
 8003f58:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff ffb2 	bl	8003eca <LL_ADC_REG_IsConversionOngoing>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f040 8081 	bne.w	8004070 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003f6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d17c      	bne.n	8004070 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a48      	ldr	r2, [pc, #288]	@ (800409c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d004      	beq.n	8003f8a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a46      	ldr	r2, [pc, #280]	@ (80040a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d101      	bne.n	8003f8e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003f8a:	4b46      	ldr	r3, [pc, #280]	@ (80040a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003f8c:	e000      	b.n	8003f90 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003f8e:	4b46      	ldr	r3, [pc, #280]	@ (80040a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003f90:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d039      	beq.n	800400e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003f9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003faa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a3a      	ldr	r2, [pc, #232]	@ (800409c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d004      	beq.n	8003fc0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a39      	ldr	r2, [pc, #228]	@ (80040a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d10e      	bne.n	8003fde <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003fc0:	4836      	ldr	r0, [pc, #216]	@ (800409c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003fc2:	f7ff ff6f 	bl	8003ea4 <LL_ADC_IsEnabled>
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	4835      	ldr	r0, [pc, #212]	@ (80040a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003fca:	f7ff ff6b 	bl	8003ea4 <LL_ADC_IsEnabled>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4323      	orrs	r3, r4
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	bf0c      	ite	eq
 8003fd6:	2301      	moveq	r3, #1
 8003fd8:	2300      	movne	r3, #0
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	e008      	b.n	8003ff0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003fde:	4833      	ldr	r0, [pc, #204]	@ (80040ac <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003fe0:	f7ff ff60 	bl	8003ea4 <LL_ADC_IsEnabled>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	bf0c      	ite	eq
 8003fea:	2301      	moveq	r3, #1
 8003fec:	2300      	movne	r3, #0
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d047      	beq.n	8004084 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ff4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	4b2d      	ldr	r3, [pc, #180]	@ (80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	6811      	ldr	r1, [r2, #0]
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	6892      	ldr	r2, [r2, #8]
 8004004:	430a      	orrs	r2, r1
 8004006:	431a      	orrs	r2, r3
 8004008:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800400a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800400c:	e03a      	b.n	8004084 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800400e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004016:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004018:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a1f      	ldr	r2, [pc, #124]	@ (800409c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d004      	beq.n	800402e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a1d      	ldr	r2, [pc, #116]	@ (80040a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d10e      	bne.n	800404c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800402e:	481b      	ldr	r0, [pc, #108]	@ (800409c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004030:	f7ff ff38 	bl	8003ea4 <LL_ADC_IsEnabled>
 8004034:	4604      	mov	r4, r0
 8004036:	481a      	ldr	r0, [pc, #104]	@ (80040a0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004038:	f7ff ff34 	bl	8003ea4 <LL_ADC_IsEnabled>
 800403c:	4603      	mov	r3, r0
 800403e:	4323      	orrs	r3, r4
 8004040:	2b00      	cmp	r3, #0
 8004042:	bf0c      	ite	eq
 8004044:	2301      	moveq	r3, #1
 8004046:	2300      	movne	r3, #0
 8004048:	b2db      	uxtb	r3, r3
 800404a:	e008      	b.n	800405e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800404c:	4817      	ldr	r0, [pc, #92]	@ (80040ac <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800404e:	f7ff ff29 	bl	8003ea4 <LL_ADC_IsEnabled>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	bf0c      	ite	eq
 8004058:	2301      	moveq	r3, #1
 800405a:	2300      	movne	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d010      	beq.n	8004084 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004062:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	4b12      	ldr	r3, [pc, #72]	@ (80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004068:	4013      	ands	r3, r2
 800406a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800406c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800406e:	e009      	b.n	8004084 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004074:	f043 0220 	orr.w	r2, r3, #32
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004082:	e000      	b.n	8004086 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004084:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800408e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004092:	4618      	mov	r0, r3
 8004094:	378c      	adds	r7, #140	@ 0x8c
 8004096:	46bd      	mov	sp, r7
 8004098:	bd90      	pop	{r4, r7, pc}
 800409a:	bf00      	nop
 800409c:	40022000 	.word	0x40022000
 80040a0:	40022100 	.word	0x40022100
 80040a4:	40022300 	.word	0x40022300
 80040a8:	58026300 	.word	0x58026300
 80040ac:	58026000 	.word	0x58026000
 80040b0:	fffff0e0 	.word	0xfffff0e0

080040b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040c4:	4b0b      	ldr	r3, [pc, #44]	@ (80040f4 <__NVIC_SetPriorityGrouping+0x40>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80040d0:	4013      	ands	r3, r2
 80040d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80040dc:	4b06      	ldr	r3, [pc, #24]	@ (80040f8 <__NVIC_SetPriorityGrouping+0x44>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040e2:	4a04      	ldr	r2, [pc, #16]	@ (80040f4 <__NVIC_SetPriorityGrouping+0x40>)
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	60d3      	str	r3, [r2, #12]
}
 80040e8:	bf00      	nop
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	e000ed00 	.word	0xe000ed00
 80040f8:	05fa0000 	.word	0x05fa0000

080040fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004100:	4b04      	ldr	r3, [pc, #16]	@ (8004114 <__NVIC_GetPriorityGrouping+0x18>)
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	0a1b      	lsrs	r3, r3, #8
 8004106:	f003 0307 	and.w	r3, r3, #7
}
 800410a:	4618      	mov	r0, r3
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	e000ed00 	.word	0xe000ed00

08004118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	4603      	mov	r3, r0
 8004120:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004126:	2b00      	cmp	r3, #0
 8004128:	db0b      	blt.n	8004142 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800412a:	88fb      	ldrh	r3, [r7, #6]
 800412c:	f003 021f 	and.w	r2, r3, #31
 8004130:	4907      	ldr	r1, [pc, #28]	@ (8004150 <__NVIC_EnableIRQ+0x38>)
 8004132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	2001      	movs	r0, #1
 800413a:	fa00 f202 	lsl.w	r2, r0, r2
 800413e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	e000e100 	.word	0xe000e100

08004154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	4603      	mov	r3, r0
 800415c:	6039      	str	r1, [r7, #0]
 800415e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004160:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004164:	2b00      	cmp	r3, #0
 8004166:	db0a      	blt.n	800417e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	b2da      	uxtb	r2, r3
 800416c:	490c      	ldr	r1, [pc, #48]	@ (80041a0 <__NVIC_SetPriority+0x4c>)
 800416e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004172:	0112      	lsls	r2, r2, #4
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	440b      	add	r3, r1
 8004178:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800417c:	e00a      	b.n	8004194 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	b2da      	uxtb	r2, r3
 8004182:	4908      	ldr	r1, [pc, #32]	@ (80041a4 <__NVIC_SetPriority+0x50>)
 8004184:	88fb      	ldrh	r3, [r7, #6]
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	3b04      	subs	r3, #4
 800418c:	0112      	lsls	r2, r2, #4
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	440b      	add	r3, r1
 8004192:	761a      	strb	r2, [r3, #24]
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	e000e100 	.word	0xe000e100
 80041a4:	e000ed00 	.word	0xe000ed00

080041a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b089      	sub	sp, #36	@ 0x24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f1c3 0307 	rsb	r3, r3, #7
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	bf28      	it	cs
 80041c6:	2304      	movcs	r3, #4
 80041c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	3304      	adds	r3, #4
 80041ce:	2b06      	cmp	r3, #6
 80041d0:	d902      	bls.n	80041d8 <NVIC_EncodePriority+0x30>
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	3b03      	subs	r3, #3
 80041d6:	e000      	b.n	80041da <NVIC_EncodePriority+0x32>
 80041d8:	2300      	movs	r3, #0
 80041da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041dc:	f04f 32ff 	mov.w	r2, #4294967295
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	43da      	mvns	r2, r3
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	401a      	ands	r2, r3
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041f0:	f04f 31ff 	mov.w	r1, #4294967295
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	fa01 f303 	lsl.w	r3, r1, r3
 80041fa:	43d9      	mvns	r1, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004200:	4313      	orrs	r3, r2
         );
}
 8004202:	4618      	mov	r0, r3
 8004204:	3724      	adds	r7, #36	@ 0x24
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
	...

08004210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3b01      	subs	r3, #1
 800421c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004220:	d301      	bcc.n	8004226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004222:	2301      	movs	r3, #1
 8004224:	e00f      	b.n	8004246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004226:	4a0a      	ldr	r2, [pc, #40]	@ (8004250 <SysTick_Config+0x40>)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3b01      	subs	r3, #1
 800422c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800422e:	210f      	movs	r1, #15
 8004230:	f04f 30ff 	mov.w	r0, #4294967295
 8004234:	f7ff ff8e 	bl	8004154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004238:	4b05      	ldr	r3, [pc, #20]	@ (8004250 <SysTick_Config+0x40>)
 800423a:	2200      	movs	r2, #0
 800423c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800423e:	4b04      	ldr	r3, [pc, #16]	@ (8004250 <SysTick_Config+0x40>)
 8004240:	2207      	movs	r2, #7
 8004242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	e000e010 	.word	0xe000e010

08004254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f7ff ff29 	bl	80040b4 <__NVIC_SetPriorityGrouping>
}
 8004262:	bf00      	nop
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b086      	sub	sp, #24
 800426e:	af00      	add	r7, sp, #0
 8004270:	4603      	mov	r3, r0
 8004272:	60b9      	str	r1, [r7, #8]
 8004274:	607a      	str	r2, [r7, #4]
 8004276:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004278:	f7ff ff40 	bl	80040fc <__NVIC_GetPriorityGrouping>
 800427c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	6978      	ldr	r0, [r7, #20]
 8004284:	f7ff ff90 	bl	80041a8 <NVIC_EncodePriority>
 8004288:	4602      	mov	r2, r0
 800428a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800428e:	4611      	mov	r1, r2
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff ff5f 	bl	8004154 <__NVIC_SetPriority>
}
 8004296:	bf00      	nop
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b082      	sub	sp, #8
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	4603      	mov	r3, r0
 80042a6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff ff33 	bl	8004118 <__NVIC_EnableIRQ>
}
 80042b2:	bf00      	nop
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b082      	sub	sp, #8
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff ffa4 	bl	8004210 <SysTick_Config>
 80042c8:	4603      	mov	r3, r0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b098      	sub	sp, #96	@ 0x60
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80042dc:	4a84      	ldr	r2, [pc, #528]	@ (80044f0 <HAL_FDCAN_Init+0x21c>)
 80042de:	f107 030c 	add.w	r3, r7, #12
 80042e2:	4611      	mov	r1, r2
 80042e4:	224c      	movs	r2, #76	@ 0x4c
 80042e6:	4618      	mov	r0, r3
 80042e8:	f007 fbb8 	bl	800ba5c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e1c6      	b.n	8004684 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a7e      	ldr	r2, [pc, #504]	@ (80044f4 <HAL_FDCAN_Init+0x220>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d106      	bne.n	800430e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004308:	461a      	mov	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d106      	bne.n	8004328 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fd fb06 	bl	8001934 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0210 	bic.w	r2, r2, #16
 8004336:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004338:	f7fd fecc 	bl	80020d4 <HAL_GetTick>
 800433c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800433e:	e014      	b.n	800436a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004340:	f7fd fec8 	bl	80020d4 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b0a      	cmp	r3, #10
 800434c:	d90d      	bls.n	800436a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004354:	f043 0201 	orr.w	r2, r3, #1
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2203      	movs	r2, #3
 8004362:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e18c      	b.n	8004684 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b08      	cmp	r3, #8
 8004376:	d0e3      	beq.n	8004340 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699a      	ldr	r2, [r3, #24]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004388:	f7fd fea4 	bl	80020d4 <HAL_GetTick>
 800438c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800438e:	e014      	b.n	80043ba <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004390:	f7fd fea0 	bl	80020d4 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b0a      	cmp	r3, #10
 800439c:	d90d      	bls.n	80043ba <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043a4:	f043 0201 	orr.w	r2, r3, #1
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2203      	movs	r2, #3
 80043b2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e164      	b.n	8004684 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0e3      	beq.n	8004390 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699a      	ldr	r2, [r3, #24]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0202 	orr.w	r2, r2, #2
 80043d6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	7c1b      	ldrb	r3, [r3, #16]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d108      	bne.n	80043f2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699a      	ldr	r2, [r3, #24]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043ee:	619a      	str	r2, [r3, #24]
 80043f0:	e007      	b.n	8004402 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699a      	ldr	r2, [r3, #24]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004400:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	7c5b      	ldrb	r3, [r3, #17]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d108      	bne.n	800441c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	699a      	ldr	r2, [r3, #24]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004418:	619a      	str	r2, [r3, #24]
 800441a:	e007      	b.n	800442c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800442a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	7c9b      	ldrb	r3, [r3, #18]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d108      	bne.n	8004446 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699a      	ldr	r2, [r3, #24]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004442:	619a      	str	r2, [r3, #24]
 8004444:	e007      	b.n	8004456 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	699a      	ldr	r2, [r3, #24]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004454:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699a      	ldr	r2, [r3, #24]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800447a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691a      	ldr	r2, [r3, #16]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0210 	bic.w	r2, r2, #16
 800448a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d108      	bne.n	80044a6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699a      	ldr	r2, [r3, #24]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0204 	orr.w	r2, r2, #4
 80044a2:	619a      	str	r2, [r3, #24]
 80044a4:	e030      	b.n	8004508 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d02c      	beq.n	8004508 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d020      	beq.n	80044f8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699a      	ldr	r2, [r3, #24]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80044c4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	691a      	ldr	r2, [r3, #16]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f042 0210 	orr.w	r2, r2, #16
 80044d4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	2b03      	cmp	r3, #3
 80044dc:	d114      	bne.n	8004508 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	699a      	ldr	r2, [r3, #24]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f042 0220 	orr.w	r2, r2, #32
 80044ec:	619a      	str	r2, [r3, #24]
 80044ee:	e00b      	b.n	8004508 <HAL_FDCAN_Init+0x234>
 80044f0:	0800c594 	.word	0x0800c594
 80044f4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699a      	ldr	r2, [r3, #24]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0220 	orr.w	r2, r2, #32
 8004506:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	3b01      	subs	r3, #1
 800450e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	3b01      	subs	r3, #1
 8004516:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004518:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004520:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	3b01      	subs	r3, #1
 800452a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004530:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004532:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800453c:	d115      	bne.n	800456a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004542:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004548:	3b01      	subs	r3, #1
 800454a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800454c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004552:	3b01      	subs	r3, #1
 8004554:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004556:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455e:	3b01      	subs	r3, #1
 8004560:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004566:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004568:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004590:	4413      	add	r3, r2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d011      	beq.n	80045ba <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800459e:	f023 0107 	bic.w	r1, r3, #7
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	3360      	adds	r3, #96	@ 0x60
 80045aa:	443b      	add	r3, r7
 80045ac:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d011      	beq.n	80045e6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80045ca:	f023 0107 	bic.w	r1, r3, #7
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	3360      	adds	r3, #96	@ 0x60
 80045d6:	443b      	add	r3, r7
 80045d8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d012      	beq.n	8004614 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80045f6:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	3360      	adds	r3, #96	@ 0x60
 8004602:	443b      	add	r3, r7
 8004604:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004608:	011a      	lsls	r2, r3, #4
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004618:	2b00      	cmp	r3, #0
 800461a:	d012      	beq.n	8004642 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004624:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	3360      	adds	r3, #96	@ 0x60
 8004630:	443b      	add	r3, r7
 8004632:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004636:	021a      	lsls	r2, r3, #8
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a11      	ldr	r2, [pc, #68]	@ (800468c <HAL_FDCAN_Init+0x3b8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d107      	bne.n	800465c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	689a      	ldr	r2, [r3, #8]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f022 0203 	bic.w	r2, r2, #3
 800465a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 fde5 	bl	8005244 <FDCAN_CalcultateRamBlockAddresses>
 800467a:	4603      	mov	r3, r0
 800467c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8004680:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8004684:	4618      	mov	r0, r3
 8004686:	3760      	adds	r7, #96	@ 0x60
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	4000a000 	.word	0x4000a000

08004690 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8004690:	b480      	push	{r7}
 8004692:	b087      	sub	sp, #28
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80046a0:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d002      	beq.n	80046ae <HAL_FDCAN_ConfigFilter+0x1e>
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d157      	bne.n	800475e <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d12b      	bne.n	800470e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	2b07      	cmp	r3, #7
 80046bc:	d10d      	bne.n	80046da <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	69db      	ldr	r3, [r3, #28]
 80046c8:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80046ca:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80046d0:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80046d2:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 80046d6:	617b      	str	r3, [r7, #20]
 80046d8:	e00e      	b.n	80046f8 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80046e6:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80046ee:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80046f4:	4313      	orrs	r3, r2
 80046f6:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4413      	add	r3, r2
 8004704:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	e025      	b.n	800475a <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	075a      	lsls	r2, r3, #29
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	2b07      	cmp	r3, #7
 8004722:	d103      	bne.n	800472c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	613b      	str	r3, [r7, #16]
 800472a:	e006      	b.n	800473a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	079a      	lsls	r2, r3, #30
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	4313      	orrs	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	4413      	add	r3, r2
 8004746:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	3304      	adds	r3, #4
 8004752:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800475a:	2300      	movs	r3, #0
 800475c:	e008      	b.n	8004770 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004764:	f043 0202 	orr.w	r2, r3, #2
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
  }
}
 8004770:	4618      	mov	r0, r3
 8004772:	371c      	adds	r7, #28
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b01      	cmp	r3, #1
 800478e:	d111      	bne.n	80047b4 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699a      	ldr	r2, [r3, #24]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0201 	bic.w	r2, r2, #1
 80047a6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80047b0:	2300      	movs	r3, #0
 80047b2:	e008      	b.n	80047c6 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047ba:	f043 0204 	orr.w	r2, r3, #4
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
  }
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b086      	sub	sp, #24
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	60f8      	str	r0, [r7, #12]
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d141      	bne.n	800486e <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80047f2:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d109      	bne.n	800480e <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004800:	f043 0220 	orr.w	r2, r3, #32
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e038      	b.n	8004880 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004816:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d009      	beq.n	8004832 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004824:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e026      	b.n	8004880 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800483a:	0c1b      	lsrs	r3, r3, #16
 800483c:	f003 031f 	and.w	r3, r3, #31
 8004840:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	68b9      	ldr	r1, [r7, #8]
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 fe81 	bl	8005550 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2101      	movs	r1, #1
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	fa01 f202 	lsl.w	r2, r1, r2
 800485a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800485e:	2201      	movs	r2, #1
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	409a      	lsls	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	e008      	b.n	8004880 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004874:	f043 0208 	orr.w	r2, r3, #8
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
  }
}
 8004880:	4618      	mov	r0, r3
 8004882:	3718      	adds	r7, #24
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8004888:	b480      	push	{r7}
 800488a:	b08b      	sub	sp, #44	@ 0x2c
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8004896:	2300      	movs	r3, #0
 8004898:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80048a0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80048a2:	7efb      	ldrb	r3, [r7, #27]
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	f040 8149 	bne.w	8004b3c <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2b40      	cmp	r3, #64	@ 0x40
 80048ae:	d14c      	bne.n	800494a <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80048b8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d109      	bne.n	80048d4 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048c6:	f043 0220 	orr.w	r2, r3, #32
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e13c      	b.n	8004b4e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d109      	bne.n	80048f8 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e12a      	b.n	8004b4e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004900:	0e1b      	lsrs	r3, r3, #24
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b01      	cmp	r3, #1
 8004908:	d10a      	bne.n	8004920 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004912:	0fdb      	lsrs	r3, r3, #31
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b01      	cmp	r3, #1
 800491a:	d101      	bne.n	8004920 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800491c:	2301      	movs	r3, #1
 800491e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004928:	0a1b      	lsrs	r3, r3, #8
 800492a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800492e:	69fa      	ldr	r2, [r7, #28]
 8004930:	4413      	add	r3, r2
 8004932:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800493c:	69f9      	ldr	r1, [r7, #28]
 800493e:	fb01 f303 	mul.w	r3, r1, r3
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	627b      	str	r3, [r7, #36]	@ 0x24
 8004948:	e068      	b.n	8004a1c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2b41      	cmp	r3, #65	@ 0x41
 800494e:	d14c      	bne.n	80049ea <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004958:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d109      	bne.n	8004974 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004966:	f043 0220 	orr.w	r2, r3, #32
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e0ec      	b.n	8004b4e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800497c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004980:	2b00      	cmp	r3, #0
 8004982:	d109      	bne.n	8004998 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800498a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e0da      	b.n	8004b4e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80049a0:	0e1b      	lsrs	r3, r3, #24
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d10a      	bne.n	80049c0 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80049b2:	0fdb      	lsrs	r3, r3, #31
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d101      	bne.n	80049c0 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80049bc:	2301      	movs	r3, #1
 80049be:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80049c8:	0a1b      	lsrs	r3, r3, #8
 80049ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049ce:	69fa      	ldr	r2, [r7, #28]
 80049d0:	4413      	add	r3, r2
 80049d2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049dc:	69f9      	ldr	r1, [r7, #28]
 80049de:	fb01 f303 	mul.w	r3, r1, r3
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80049e8:	e018      	b.n	8004a1c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d309      	bcc.n	8004a08 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049fa:	f043 0220 	orr.w	r2, r3, #32
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e0a2      	b.n	8004b4e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a10:	68b9      	ldr	r1, [r7, #8]
 8004a12:	fb01 f303 	mul.w	r3, r1, r3
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d107      	bne.n	8004a40 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8004a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	0c9b      	lsrs	r3, r3, #18
 8004a36:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	e005      	b.n	8004a4c <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8004a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8004a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8004a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a66:	3304      	adds	r3, #4
 8004a68:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8004a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	0c1b      	lsrs	r3, r3, #16
 8004a7a:	f003 020f 	and.w	r2, r3, #15
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8004a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	0e1b      	lsrs	r3, r3, #24
 8004aa0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	0fda      	lsrs	r2, r3, #31
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aba:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004abc:	2300      	movs	r3, #0
 8004abe:	623b      	str	r3, [r7, #32]
 8004ac0:	e00a      	b.n	8004ad8 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	441a      	add	r2, r3
 8004ac8:	6839      	ldr	r1, [r7, #0]
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	440b      	add	r3, r1
 8004ace:	7812      	ldrb	r2, [r2, #0]
 8004ad0:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	623b      	str	r3, [r7, #32]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	4a1f      	ldr	r2, [pc, #124]	@ (8004b5c <HAL_FDCAN_GetRxMessage+0x2d4>)
 8004ade:	5cd3      	ldrb	r3, [r2, r3]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d3ec      	bcc.n	8004ac2 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b40      	cmp	r3, #64	@ 0x40
 8004aec:	d105      	bne.n	8004afa <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69fa      	ldr	r2, [r7, #28]
 8004af4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8004af8:	e01e      	b.n	8004b38 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	2b41      	cmp	r3, #65	@ 0x41
 8004afe:	d105      	bne.n	8004b0c <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69fa      	ldr	r2, [r7, #28]
 8004b06:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8004b0a:	e015      	b.n	8004b38 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b1f      	cmp	r3, #31
 8004b10:	d808      	bhi.n	8004b24 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2101      	movs	r1, #1
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b1e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8004b22:	e009      	b.n	8004b38 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f003 021f 	and.w	r2, r3, #31
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2101      	movs	r1, #1
 8004b30:	fa01 f202 	lsl.w	r2, r1, r2
 8004b34:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	e008      	b.n	8004b4e <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b42:	f043 0208 	orr.w	r2, r3, #8
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
  }
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	372c      	adds	r7, #44	@ 0x2c
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	0800c5f0 	.word	0x0800c5f0

08004b60 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8004b72:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004b74:	7dfb      	ldrb	r3, [r7, #23]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d002      	beq.n	8004b80 <HAL_FDCAN_ActivateNotification+0x20>
 8004b7a:	7dfb      	ldrb	r3, [r7, #23]
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d155      	bne.n	8004c2c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d108      	bne.n	8004ba0 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f042 0201 	orr.w	r2, r2, #1
 8004b9c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004b9e:	e014      	b.n	8004bca <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d108      	bne.n	8004bc2 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0202 	orr.w	r2, r2, #2
 8004bbe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004bc0:	e003      	b.n	8004bca <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2203      	movs	r2, #3
 8004bc8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d009      	beq.n	8004be8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d009      	beq.n	8004c06 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8004c4c <HAL_FDCAN_ActivateNotification+0xec>)
 8004c10:	4013      	ands	r3, r2
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	6812      	ldr	r2, [r2, #0]
 8004c16:	430b      	orrs	r3, r1
 8004c18:	6553      	str	r3, [r2, #84]	@ 0x54
 8004c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c50 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004c1c:	695a      	ldr	r2, [r3, #20]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	0f9b      	lsrs	r3, r3, #30
 8004c22:	490b      	ldr	r1, [pc, #44]	@ (8004c50 <HAL_FDCAN_ActivateNotification+0xf0>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	e008      	b.n	8004c3e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c32:	f043 0202 	orr.w	r2, r3, #2
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
  }
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	371c      	adds	r7, #28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	3fcfffff 	.word	0x3fcfffff
 8004c50:	4000a800 	.word	0x4000a800

08004c54 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b096      	sub	sp, #88	@ 0x58
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004c5c:	4b95      	ldr	r3, [pc, #596]	@ (8004eb4 <HAL_FDCAN_IRQHandler+0x260>)
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	079b      	lsls	r3, r3, #30
 8004c62:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004c64:	4b93      	ldr	r3, [pc, #588]	@ (8004eb4 <HAL_FDCAN_IRQHandler+0x260>)
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	079b      	lsls	r3, r3, #30
 8004c6a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c76:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004c7a:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c82:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004c84:	4013      	ands	r3, r2
 8004c86:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ca6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004caa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cbe:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8004cc2:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ccc:	4013      	ands	r3, r2
 8004cce:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cd6:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8004cda:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cf6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00f      	beq.n	8004d22 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00a      	beq.n	8004d22 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d14:	651a      	str	r2, [r3, #80]	@ 0x50
 8004d16:	4b67      	ldr	r3, [pc, #412]	@ (8004eb4 <HAL_FDCAN_IRQHandler+0x260>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 fa44 	bl	80051aa <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d01c      	beq.n	8004d66 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d017      	beq.n	8004d66 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004d3e:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d56:	651a      	str	r2, [r3, #80]	@ 0x50
 8004d58:	4b56      	ldr	r3, [pc, #344]	@ (8004eb4 <HAL_FDCAN_IRQHandler+0x260>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004d5e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f9f9 	bl	8005158 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8004d66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00d      	beq.n	8004d88 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d72:	4b51      	ldr	r3, [pc, #324]	@ (8004eb8 <HAL_FDCAN_IRQHandler+0x264>)
 8004d74:	400b      	ands	r3, r1
 8004d76:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d78:	4a4e      	ldr	r2, [pc, #312]	@ (8004eb4 <HAL_FDCAN_IRQHandler+0x260>)
 8004d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d7c:	0f9b      	lsrs	r3, r3, #30
 8004d7e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8004d80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f9b2 	bl	80050ec <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004d88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00d      	beq.n	8004daa <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004d94:	4b48      	ldr	r3, [pc, #288]	@ (8004eb8 <HAL_FDCAN_IRQHandler+0x264>)
 8004d96:	400b      	ands	r3, r1
 8004d98:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d9a:	4a46      	ldr	r2, [pc, #280]	@ (8004eb4 <HAL_FDCAN_IRQHandler+0x260>)
 8004d9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d9e:	0f9b      	lsrs	r3, r3, #30
 8004da0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004da2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 f9ac 	bl	8005102 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004daa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00d      	beq.n	8004dcc <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004db6:	4b40      	ldr	r3, [pc, #256]	@ (8004eb8 <HAL_FDCAN_IRQHandler+0x264>)
 8004db8:	400b      	ands	r3, r1
 8004dba:	6513      	str	r3, [r2, #80]	@ 0x50
 8004dbc:	4a3d      	ldr	r2, [pc, #244]	@ (8004eb4 <HAL_FDCAN_IRQHandler+0x260>)
 8004dbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dc0:	0f9b      	lsrs	r3, r3, #30
 8004dc2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004dc4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7fc fbd4 	bl	8001574 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004dcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00d      	beq.n	8004dee <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004dd8:	4b37      	ldr	r3, [pc, #220]	@ (8004eb8 <HAL_FDCAN_IRQHandler+0x264>)
 8004dda:	400b      	ands	r3, r1
 8004ddc:	6513      	str	r3, [r2, #80]	@ 0x50
 8004dde:	4a35      	ldr	r2, [pc, #212]	@ (8004eb4 <HAL_FDCAN_IRQHandler+0x260>)
 8004de0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004de2:	0f9b      	lsrs	r3, r3, #30
 8004de4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004de6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 f995 	bl	8005118 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004df0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00f      	beq.n	8004e18 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e0a:	651a      	str	r2, [r3, #80]	@ 0x50
 8004e0c:	4b29      	ldr	r3, [pc, #164]	@ (8004eb4 <HAL_FDCAN_IRQHandler+0x260>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f98b 	bl	800512e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8004e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e1a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d01c      	beq.n	8004e5c <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d017      	beq.n	8004e5c <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004e34:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e40:	4013      	ands	r3, r2
 8004e42:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e4c:	651a      	str	r2, [r3, #80]	@ 0x50
 8004e4e:	4b19      	ldr	r3, [pc, #100]	@ (8004eb4 <HAL_FDCAN_IRQHandler+0x260>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004e54:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f973 	bl	8005142 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004e5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00f      	beq.n	8004e86 <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00a      	beq.n	8004e86 <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004e78:	651a      	str	r2, [r3, #80]	@ 0x50
 8004e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8004eb4 <HAL_FDCAN_IRQHandler+0x260>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f974 	bl	800516e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d015      	beq.n	8004ebc <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d010      	beq.n	8004ebc <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004ea2:	651a      	str	r2, [r3, #80]	@ 0x50
 8004ea4:	4b03      	ldr	r3, [pc, #12]	@ (8004eb4 <HAL_FDCAN_IRQHandler+0x260>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f969 	bl	8005182 <HAL_FDCAN_TimestampWraparoundCallback>
 8004eb0:	e004      	b.n	8004ebc <HAL_FDCAN_IRQHandler+0x268>
 8004eb2:	bf00      	nop
 8004eb4:	4000a800 	.word	0x4000a800
 8004eb8:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ebe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00f      	beq.n	8004ee6 <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00a      	beq.n	8004ee6 <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004ed8:	651a      	str	r2, [r3, #80]	@ 0x50
 8004eda:	4b81      	ldr	r3, [pc, #516]	@ (80050e0 <HAL_FDCAN_IRQHandler+0x48c>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f958 	bl	8005196 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d014      	beq.n	8004f1a <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00f      	beq.n	8004f1a <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004f02:	651a      	str	r2, [r3, #80]	@ 0x50
 8004f04:	4b76      	ldr	r3, [pc, #472]	@ (80050e0 <HAL_FDCAN_IRQHandler+0x48c>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f10:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004f1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00d      	beq.n	8004f3c <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f26:	4b6f      	ldr	r3, [pc, #444]	@ (80050e4 <HAL_FDCAN_IRQHandler+0x490>)
 8004f28:	400b      	ands	r3, r1
 8004f2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f2c:	4a6c      	ldr	r2, [pc, #432]	@ (80050e0 <HAL_FDCAN_IRQHandler+0x48c>)
 8004f2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f30:	0f9b      	lsrs	r3, r3, #30
 8004f32:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004f34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 f94b 	bl	80051d2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004f3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d011      	beq.n	8004f66 <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f48:	4b66      	ldr	r3, [pc, #408]	@ (80050e4 <HAL_FDCAN_IRQHandler+0x490>)
 8004f4a:	400b      	ands	r3, r1
 8004f4c:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f4e:	4a64      	ldr	r2, [pc, #400]	@ (80050e0 <HAL_FDCAN_IRQHandler+0x48c>)
 8004f50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f52:	0f9b      	lsrs	r3, r3, #30
 8004f54:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004f5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a5f      	ldr	r2, [pc, #380]	@ (80050e8 <HAL_FDCAN_IRQHandler+0x494>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	f040 80aa 	bne.w	80050c6 <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f003 0303 	and.w	r3, r3, #3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 80a2 	beq.w	80050c6 <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	f003 030f 	and.w	r3, r3, #15
 8004f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f96:	4013      	ands	r3, r2
 8004f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fae:	4013      	ands	r3, r2
 8004fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004fbc:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8004fd4:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fdc:	6a3a      	ldr	r2, [r7, #32]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8004fec:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff4:	69fa      	ldr	r2, [r7, #28]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005000:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800500a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800500c:	2b00      	cmp	r3, #0
 800500e:	d007      	beq.n	8005020 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005016:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005018:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f8e4 	bl	80051e8 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005022:	2b00      	cmp	r3, #0
 8005024:	d007      	beq.n	8005036 <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800502c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800502e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f8e4 	bl	80051fe <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800503c:	2b00      	cmp	r3, #0
 800503e:	d019      	beq.n	8005074 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005046:	2b00      	cmp	r3, #0
 8005048:	d014      	beq.n	8005074 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005050:	0c1b      	lsrs	r3, r3, #16
 8005052:	b29b      	uxth	r3, r3
 8005054:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800505c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005060:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2240      	movs	r2, #64	@ 0x40
 8005068:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	6939      	ldr	r1, [r7, #16]
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f8d0 	bl	8005214 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005076:	2b00      	cmp	r3, #0
 8005078:	d007      	beq.n	800508a <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005080:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005082:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f8d1 	bl	800522c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00b      	beq.n	80050a8 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	6a3a      	ldr	r2, [r7, #32]
 8005096:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	431a      	orrs	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00b      	beq.n	80050c6 <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	69fa      	ldr	r2, [r7, #28]
 80050b4:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	431a      	orrs	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f874 	bl	80051be <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80050d6:	bf00      	nop
 80050d8:	3758      	adds	r7, #88	@ 0x58
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	4000a800 	.word	0x4000a800
 80050e4:	3fcfffff 	.word	0x3fcfffff
 80050e8:	4000a000 	.word	0x4000a000

080050ec <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80050f6:	bf00      	nop
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005102:	b480      	push	{r7}
 8005104:	b083      	sub	sp, #12
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005162:	bf00      	nop
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800516e:	b480      	push	{r7}
 8005170:	b083      	sub	sp, #12
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80051b2:	bf00      	nop
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b083      	sub	sp, #12
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80051fe:	b480      	push	{r7}
 8005200:	b083      	sub	sp, #12
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005220:	bf00      	nop
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
	...

08005244 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005250:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800525a:	4ba7      	ldr	r3, [pc, #668]	@ (80054f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800525c:	4013      	ands	r3, r2
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	0091      	lsls	r1, r2, #2
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6812      	ldr	r2, [r2, #0]
 8005266:	430b      	orrs	r3, r1
 8005268:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005274:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800527c:	041a      	lsls	r2, r3, #16
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	4413      	add	r3, r2
 8005290:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800529a:	4b97      	ldr	r3, [pc, #604]	@ (80054f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800529c:	4013      	ands	r3, r2
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	0091      	lsls	r1, r2, #2
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	6812      	ldr	r2, [r2, #0]
 80052a6:	430b      	orrs	r3, r1
 80052a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b4:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052bc:	041a      	lsls	r2, r3, #16
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	4413      	add	r3, r2
 80052d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80052dc:	4b86      	ldr	r3, [pc, #536]	@ (80054f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80052de:	4013      	ands	r3, r2
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	0091      	lsls	r1, r2, #2
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6812      	ldr	r2, [r2, #0]
 80052e8:	430b      	orrs	r3, r1
 80052ea:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80052f6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fe:	041a      	lsls	r2, r3, #16
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005312:	fb02 f303 	mul.w	r3, r2, r3
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	4413      	add	r3, r2
 800531a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005324:	4b74      	ldr	r3, [pc, #464]	@ (80054f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005326:	4013      	ands	r3, r2
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	0091      	lsls	r1, r2, #2
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6812      	ldr	r2, [r2, #0]
 8005330:	430b      	orrs	r3, r1
 8005332:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800533e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005346:	041a      	lsls	r2, r3, #16
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800535a:	fb02 f303 	mul.w	r3, r2, r3
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	4413      	add	r3, r2
 8005362:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800536c:	4b62      	ldr	r3, [pc, #392]	@ (80054f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800536e:	4013      	ands	r3, r2
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	0091      	lsls	r1, r2, #2
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6812      	ldr	r2, [r2, #0]
 8005378:	430b      	orrs	r3, r1
 800537a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005386:	fb02 f303 	mul.w	r3, r2, r3
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	4413      	add	r3, r2
 800538e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005398:	4b57      	ldr	r3, [pc, #348]	@ (80054f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800539a:	4013      	ands	r3, r2
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	0091      	lsls	r1, r2, #2
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	6812      	ldr	r2, [r2, #0]
 80053a4:	430b      	orrs	r3, r1
 80053a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053b2:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ba:	041a      	lsls	r2, r3, #16
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	4413      	add	r3, r2
 80053d0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80053da:	4b47      	ldr	r3, [pc, #284]	@ (80054f8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80053dc:	4013      	ands	r3, r2
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	0091      	lsls	r1, r2, #2
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	6812      	ldr	r2, [r2, #0]
 80053e6:	430b      	orrs	r3, r1
 80053e8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80053f4:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053fc:	041a      	lsls	r2, r3, #16
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005410:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005418:	061a      	lsls	r2, r3, #24
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005428:	4b34      	ldr	r3, [pc, #208]	@ (80054fc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800542a:	4413      	add	r3, r2
 800542c:	009a      	lsls	r2, r3, #2
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	441a      	add	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800544a:	00db      	lsls	r3, r3, #3
 800544c:	441a      	add	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545a:	6879      	ldr	r1, [r7, #4]
 800545c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800545e:	fb01 f303 	mul.w	r3, r1, r3
 8005462:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005464:	441a      	add	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005472:	6879      	ldr	r1, [r7, #4]
 8005474:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8005476:	fb01 f303 	mul.w	r3, r1, r3
 800547a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800547c:	441a      	add	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800548a:	6879      	ldr	r1, [r7, #4]
 800548c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800548e:	fb01 f303 	mul.w	r3, r1, r3
 8005492:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005494:	441a      	add	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a6:	00db      	lsls	r3, r3, #3
 80054a8:	441a      	add	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ba:	6879      	ldr	r1, [r7, #4]
 80054bc:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80054be:	fb01 f303 	mul.w	r3, r1, r3
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	441a      	add	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80054da:	fb01 f303 	mul.w	r3, r1, r3
 80054de:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80054e0:	441a      	add	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ee:	4a04      	ldr	r2, [pc, #16]	@ (8005500 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d915      	bls.n	8005520 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80054f4:	e006      	b.n	8005504 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80054f6:	bf00      	nop
 80054f8:	ffff0003 	.word	0xffff0003
 80054fc:	10002b00 	.word	0x10002b00
 8005500:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800550a:	f043 0220 	orr.w	r2, r3, #32
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2203      	movs	r2, #3
 8005518:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e010      	b.n	8005542 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005524:	60fb      	str	r3, [r7, #12]
 8005526:	e005      	b.n	8005534 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	3304      	adds	r3, #4
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	429a      	cmp	r2, r3
 800553e:	d3f3      	bcc.n	8005528 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop

08005550 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8005550:	b480      	push	{r7}
 8005552:	b089      	sub	sp, #36	@ 0x24
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10a      	bne.n	800557c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800556e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005576:	4313      	orrs	r3, r2
 8005578:	61fb      	str	r3, [r7, #28]
 800557a:	e00a      	b.n	8005592 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005584:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800558a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800558c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005590:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800559c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80055a2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80055a8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80055b0:	4313      	orrs	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055be:	6839      	ldr	r1, [r7, #0]
 80055c0:	fb01 f303 	mul.w	r3, r1, r3
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	69fa      	ldr	r2, [r7, #28]
 80055ce:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	3304      	adds	r3, #4
 80055d4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	3304      	adds	r3, #4
 80055e0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80055e2:	2300      	movs	r3, #0
 80055e4:	617b      	str	r3, [r7, #20]
 80055e6:	e020      	b.n	800562a <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	3303      	adds	r3, #3
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	4413      	add	r3, r2
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	3302      	adds	r3, #2
 80055f8:	6879      	ldr	r1, [r7, #4]
 80055fa:	440b      	add	r3, r1
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8005600:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	3301      	adds	r3, #1
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	440b      	add	r3, r1
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800560e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8005610:	6879      	ldr	r1, [r7, #4]
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	440a      	add	r2, r1
 8005616:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8005618:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	3304      	adds	r3, #4
 8005622:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	3304      	adds	r3, #4
 8005628:	617b      	str	r3, [r7, #20]
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	4a06      	ldr	r2, [pc, #24]	@ (8005648 <FDCAN_CopyMessageToRAM+0xf8>)
 8005630:	5cd3      	ldrb	r3, [r2, r3]
 8005632:	461a      	mov	r2, r3
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	4293      	cmp	r3, r2
 8005638:	d3d6      	bcc.n	80055e8 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 800563a:	bf00      	nop
 800563c:	bf00      	nop
 800563e:	3724      	adds	r7, #36	@ 0x24
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	0800c5f0 	.word	0x0800c5f0

0800564c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800564c:	b480      	push	{r7}
 800564e:	b089      	sub	sp, #36	@ 0x24
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005656:	2300      	movs	r3, #0
 8005658:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800565a:	4b86      	ldr	r3, [pc, #536]	@ (8005874 <HAL_GPIO_Init+0x228>)
 800565c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800565e:	e18c      	b.n	800597a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	2101      	movs	r1, #1
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	fa01 f303 	lsl.w	r3, r1, r3
 800566c:	4013      	ands	r3, r2
 800566e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 817e 	beq.w	8005974 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f003 0303 	and.w	r3, r3, #3
 8005680:	2b01      	cmp	r3, #1
 8005682:	d005      	beq.n	8005690 <HAL_GPIO_Init+0x44>
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f003 0303 	and.w	r3, r3, #3
 800568c:	2b02      	cmp	r3, #2
 800568e:	d130      	bne.n	80056f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	2203      	movs	r2, #3
 800569c:	fa02 f303 	lsl.w	r3, r2, r3
 80056a0:	43db      	mvns	r3, r3
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	4013      	ands	r3, r2
 80056a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	68da      	ldr	r2, [r3, #12]
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80056c6:	2201      	movs	r2, #1
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	fa02 f303 	lsl.w	r3, r2, r3
 80056ce:	43db      	mvns	r3, r3
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	4013      	ands	r3, r2
 80056d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	091b      	lsrs	r3, r3, #4
 80056dc:	f003 0201 	and.w	r2, r3, #1
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	fa02 f303 	lsl.w	r3, r2, r3
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f003 0303 	and.w	r3, r3, #3
 80056fa:	2b03      	cmp	r3, #3
 80056fc:	d017      	beq.n	800572e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	2203      	movs	r2, #3
 800570a:	fa02 f303 	lsl.w	r3, r2, r3
 800570e:	43db      	mvns	r3, r3
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	4013      	ands	r3, r2
 8005714:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	689a      	ldr	r2, [r3, #8]
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	fa02 f303 	lsl.w	r3, r2, r3
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	4313      	orrs	r3, r2
 8005726:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f003 0303 	and.w	r3, r3, #3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d123      	bne.n	8005782 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	08da      	lsrs	r2, r3, #3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3208      	adds	r2, #8
 8005742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005746:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	220f      	movs	r2, #15
 8005752:	fa02 f303 	lsl.w	r3, r2, r3
 8005756:	43db      	mvns	r3, r3
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	4013      	ands	r3, r2
 800575c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	691a      	ldr	r2, [r3, #16]
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	f003 0307 	and.w	r3, r3, #7
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	fa02 f303 	lsl.w	r3, r2, r3
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	4313      	orrs	r3, r2
 8005772:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	08da      	lsrs	r2, r3, #3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	3208      	adds	r2, #8
 800577c:	69b9      	ldr	r1, [r7, #24]
 800577e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	005b      	lsls	r3, r3, #1
 800578c:	2203      	movs	r2, #3
 800578e:	fa02 f303 	lsl.w	r3, r2, r3
 8005792:	43db      	mvns	r3, r3
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	4013      	ands	r3, r2
 8005798:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f003 0203 	and.w	r2, r3, #3
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	fa02 f303 	lsl.w	r3, r2, r3
 80057aa:	69ba      	ldr	r2, [r7, #24]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f000 80d8 	beq.w	8005974 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057c4:	4b2c      	ldr	r3, [pc, #176]	@ (8005878 <HAL_GPIO_Init+0x22c>)
 80057c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80057ca:	4a2b      	ldr	r2, [pc, #172]	@ (8005878 <HAL_GPIO_Init+0x22c>)
 80057cc:	f043 0302 	orr.w	r3, r3, #2
 80057d0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80057d4:	4b28      	ldr	r3, [pc, #160]	@ (8005878 <HAL_GPIO_Init+0x22c>)
 80057d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	60fb      	str	r3, [r7, #12]
 80057e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057e2:	4a26      	ldr	r2, [pc, #152]	@ (800587c <HAL_GPIO_Init+0x230>)
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	089b      	lsrs	r3, r3, #2
 80057e8:	3302      	adds	r3, #2
 80057ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	f003 0303 	and.w	r3, r3, #3
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	220f      	movs	r2, #15
 80057fa:	fa02 f303 	lsl.w	r3, r2, r3
 80057fe:	43db      	mvns	r3, r3
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	4013      	ands	r3, r2
 8005804:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a1d      	ldr	r2, [pc, #116]	@ (8005880 <HAL_GPIO_Init+0x234>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d04a      	beq.n	80058a4 <HAL_GPIO_Init+0x258>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a1c      	ldr	r2, [pc, #112]	@ (8005884 <HAL_GPIO_Init+0x238>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d02b      	beq.n	800586e <HAL_GPIO_Init+0x222>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a1b      	ldr	r2, [pc, #108]	@ (8005888 <HAL_GPIO_Init+0x23c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d025      	beq.n	800586a <HAL_GPIO_Init+0x21e>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a1a      	ldr	r2, [pc, #104]	@ (800588c <HAL_GPIO_Init+0x240>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d01f      	beq.n	8005866 <HAL_GPIO_Init+0x21a>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a19      	ldr	r2, [pc, #100]	@ (8005890 <HAL_GPIO_Init+0x244>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d019      	beq.n	8005862 <HAL_GPIO_Init+0x216>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a18      	ldr	r2, [pc, #96]	@ (8005894 <HAL_GPIO_Init+0x248>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d013      	beq.n	800585e <HAL_GPIO_Init+0x212>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a17      	ldr	r2, [pc, #92]	@ (8005898 <HAL_GPIO_Init+0x24c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d00d      	beq.n	800585a <HAL_GPIO_Init+0x20e>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a16      	ldr	r2, [pc, #88]	@ (800589c <HAL_GPIO_Init+0x250>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d007      	beq.n	8005856 <HAL_GPIO_Init+0x20a>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a15      	ldr	r2, [pc, #84]	@ (80058a0 <HAL_GPIO_Init+0x254>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d101      	bne.n	8005852 <HAL_GPIO_Init+0x206>
 800584e:	2309      	movs	r3, #9
 8005850:	e029      	b.n	80058a6 <HAL_GPIO_Init+0x25a>
 8005852:	230a      	movs	r3, #10
 8005854:	e027      	b.n	80058a6 <HAL_GPIO_Init+0x25a>
 8005856:	2307      	movs	r3, #7
 8005858:	e025      	b.n	80058a6 <HAL_GPIO_Init+0x25a>
 800585a:	2306      	movs	r3, #6
 800585c:	e023      	b.n	80058a6 <HAL_GPIO_Init+0x25a>
 800585e:	2305      	movs	r3, #5
 8005860:	e021      	b.n	80058a6 <HAL_GPIO_Init+0x25a>
 8005862:	2304      	movs	r3, #4
 8005864:	e01f      	b.n	80058a6 <HAL_GPIO_Init+0x25a>
 8005866:	2303      	movs	r3, #3
 8005868:	e01d      	b.n	80058a6 <HAL_GPIO_Init+0x25a>
 800586a:	2302      	movs	r3, #2
 800586c:	e01b      	b.n	80058a6 <HAL_GPIO_Init+0x25a>
 800586e:	2301      	movs	r3, #1
 8005870:	e019      	b.n	80058a6 <HAL_GPIO_Init+0x25a>
 8005872:	bf00      	nop
 8005874:	58000080 	.word	0x58000080
 8005878:	58024400 	.word	0x58024400
 800587c:	58000400 	.word	0x58000400
 8005880:	58020000 	.word	0x58020000
 8005884:	58020400 	.word	0x58020400
 8005888:	58020800 	.word	0x58020800
 800588c:	58020c00 	.word	0x58020c00
 8005890:	58021000 	.word	0x58021000
 8005894:	58021400 	.word	0x58021400
 8005898:	58021800 	.word	0x58021800
 800589c:	58021c00 	.word	0x58021c00
 80058a0:	58022400 	.word	0x58022400
 80058a4:	2300      	movs	r3, #0
 80058a6:	69fa      	ldr	r2, [r7, #28]
 80058a8:	f002 0203 	and.w	r2, r2, #3
 80058ac:	0092      	lsls	r2, r2, #2
 80058ae:	4093      	lsls	r3, r2
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058b6:	4938      	ldr	r1, [pc, #224]	@ (8005998 <HAL_GPIO_Init+0x34c>)
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	089b      	lsrs	r3, r3, #2
 80058bc:	3302      	adds	r3, #2
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	43db      	mvns	r3, r3
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	4013      	ands	r3, r2
 80058d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80058ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80058f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	43db      	mvns	r3, r3
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	4013      	ands	r3, r2
 8005902:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	4313      	orrs	r3, r2
 8005916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005918:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	43db      	mvns	r3, r3
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	4013      	ands	r3, r2
 800592e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	4313      	orrs	r3, r2
 8005942:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	69ba      	ldr	r2, [r7, #24]
 8005948:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	43db      	mvns	r3, r3
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	4013      	ands	r3, r2
 8005958:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005966:	69ba      	ldr	r2, [r7, #24]
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	4313      	orrs	r3, r2
 800596c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	3301      	adds	r3, #1
 8005978:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	fa22 f303 	lsr.w	r3, r2, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	f47f ae6b 	bne.w	8005660 <HAL_GPIO_Init+0x14>
  }
}
 800598a:	bf00      	nop
 800598c:	bf00      	nop
 800598e:	3724      	adds	r7, #36	@ 0x24
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	58000400 	.word	0x58000400

0800599c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	460b      	mov	r3, r1
 80059a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	691a      	ldr	r2, [r3, #16]
 80059ac:	887b      	ldrh	r3, [r7, #2]
 80059ae:	4013      	ands	r3, r2
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d002      	beq.n	80059ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059b4:	2301      	movs	r3, #1
 80059b6:	73fb      	strb	r3, [r7, #15]
 80059b8:	e001      	b.n	80059be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059ba:	2300      	movs	r3, #0
 80059bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059be:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	460b      	mov	r3, r1
 80059d6:	807b      	strh	r3, [r7, #2]
 80059d8:	4613      	mov	r3, r2
 80059da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059dc:	787b      	ldrb	r3, [r7, #1]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80059e2:	887a      	ldrh	r2, [r7, #2]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80059e8:	e003      	b.n	80059f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80059ea:	887b      	ldrh	r3, [r7, #2]
 80059ec:	041a      	lsls	r2, r3, #16
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	619a      	str	r2, [r3, #24]
}
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
	...

08005a00 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005a08:	4b19      	ldr	r3, [pc, #100]	@ (8005a70 <HAL_PWREx_ConfigSupply+0x70>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f003 0304 	and.w	r3, r3, #4
 8005a10:	2b04      	cmp	r3, #4
 8005a12:	d00a      	beq.n	8005a2a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005a14:	4b16      	ldr	r3, [pc, #88]	@ (8005a70 <HAL_PWREx_ConfigSupply+0x70>)
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f003 0307 	and.w	r3, r3, #7
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d001      	beq.n	8005a26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e01f      	b.n	8005a66 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	e01d      	b.n	8005a66 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005a2a:	4b11      	ldr	r3, [pc, #68]	@ (8005a70 <HAL_PWREx_ConfigSupply+0x70>)
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	f023 0207 	bic.w	r2, r3, #7
 8005a32:	490f      	ldr	r1, [pc, #60]	@ (8005a70 <HAL_PWREx_ConfigSupply+0x70>)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005a3a:	f7fc fb4b 	bl	80020d4 <HAL_GetTick>
 8005a3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005a40:	e009      	b.n	8005a56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005a42:	f7fc fb47 	bl	80020d4 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005a50:	d901      	bls.n	8005a56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e007      	b.n	8005a66 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005a56:	4b06      	ldr	r3, [pc, #24]	@ (8005a70 <HAL_PWREx_ConfigSupply+0x70>)
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a62:	d1ee      	bne.n	8005a42 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	58024800 	.word	0x58024800

08005a74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08c      	sub	sp, #48	@ 0x30
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e3c8      	b.n	8006218 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 8087 	beq.w	8005ba2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a94:	4b88      	ldr	r3, [pc, #544]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a9e:	4b86      	ldr	r3, [pc, #536]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa6:	2b10      	cmp	r3, #16
 8005aa8:	d007      	beq.n	8005aba <HAL_RCC_OscConfig+0x46>
 8005aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aac:	2b18      	cmp	r3, #24
 8005aae:	d110      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x5e>
 8005ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab2:	f003 0303 	and.w	r3, r3, #3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d10b      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aba:	4b7f      	ldr	r3, [pc, #508]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d06c      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x12c>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d168      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e3a2      	b.n	8006218 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ada:	d106      	bne.n	8005aea <HAL_RCC_OscConfig+0x76>
 8005adc:	4b76      	ldr	r3, [pc, #472]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a75      	ldr	r2, [pc, #468]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005ae2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ae6:	6013      	str	r3, [r2, #0]
 8005ae8:	e02e      	b.n	8005b48 <HAL_RCC_OscConfig+0xd4>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10c      	bne.n	8005b0c <HAL_RCC_OscConfig+0x98>
 8005af2:	4b71      	ldr	r3, [pc, #452]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a70      	ldr	r2, [pc, #448]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005af8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	4b6e      	ldr	r3, [pc, #440]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a6d      	ldr	r2, [pc, #436]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005b04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b08:	6013      	str	r3, [r2, #0]
 8005b0a:	e01d      	b.n	8005b48 <HAL_RCC_OscConfig+0xd4>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b14:	d10c      	bne.n	8005b30 <HAL_RCC_OscConfig+0xbc>
 8005b16:	4b68      	ldr	r3, [pc, #416]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a67      	ldr	r2, [pc, #412]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005b1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b20:	6013      	str	r3, [r2, #0]
 8005b22:	4b65      	ldr	r3, [pc, #404]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a64      	ldr	r2, [pc, #400]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005b28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b2c:	6013      	str	r3, [r2, #0]
 8005b2e:	e00b      	b.n	8005b48 <HAL_RCC_OscConfig+0xd4>
 8005b30:	4b61      	ldr	r3, [pc, #388]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a60      	ldr	r2, [pc, #384]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005b36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b3a:	6013      	str	r3, [r2, #0]
 8005b3c:	4b5e      	ldr	r3, [pc, #376]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a5d      	ldr	r2, [pc, #372]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005b42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d013      	beq.n	8005b78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b50:	f7fc fac0 	bl	80020d4 <HAL_GetTick>
 8005b54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b56:	e008      	b.n	8005b6a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b58:	f7fc fabc 	bl	80020d4 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b64      	cmp	r3, #100	@ 0x64
 8005b64:	d901      	bls.n	8005b6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e356      	b.n	8006218 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b6a:	4b53      	ldr	r3, [pc, #332]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d0f0      	beq.n	8005b58 <HAL_RCC_OscConfig+0xe4>
 8005b76:	e014      	b.n	8005ba2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b78:	f7fc faac 	bl	80020d4 <HAL_GetTick>
 8005b7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b7e:	e008      	b.n	8005b92 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b80:	f7fc faa8 	bl	80020d4 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b64      	cmp	r3, #100	@ 0x64
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e342      	b.n	8006218 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b92:	4b49      	ldr	r3, [pc, #292]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1f0      	bne.n	8005b80 <HAL_RCC_OscConfig+0x10c>
 8005b9e:	e000      	b.n	8005ba2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 808c 	beq.w	8005cc8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bb0:	4b41      	ldr	r3, [pc, #260]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bb8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005bba:	4b3f      	ldr	r3, [pc, #252]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bbe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d007      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x162>
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	2b18      	cmp	r3, #24
 8005bca:	d137      	bne.n	8005c3c <HAL_RCC_OscConfig+0x1c8>
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	f003 0303 	and.w	r3, r3, #3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d132      	bne.n	8005c3c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bd6:	4b38      	ldr	r3, [pc, #224]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0304 	and.w	r3, r3, #4
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d005      	beq.n	8005bee <HAL_RCC_OscConfig+0x17a>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e314      	b.n	8006218 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005bee:	4b32      	ldr	r3, [pc, #200]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f023 0219 	bic.w	r2, r3, #25
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	492f      	ldr	r1, [pc, #188]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c00:	f7fc fa68 	bl	80020d4 <HAL_GetTick>
 8005c04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c06:	e008      	b.n	8005c1a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c08:	f7fc fa64 	bl	80020d4 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e2fe      	b.n	8006218 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c1a:	4b27      	ldr	r3, [pc, #156]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0304 	and.w	r3, r3, #4
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d0f0      	beq.n	8005c08 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c26:	4b24      	ldr	r3, [pc, #144]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	061b      	lsls	r3, r3, #24
 8005c34:	4920      	ldr	r1, [pc, #128]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005c36:	4313      	orrs	r3, r2
 8005c38:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c3a:	e045      	b.n	8005cc8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d026      	beq.n	8005c92 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005c44:	4b1c      	ldr	r3, [pc, #112]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f023 0219 	bic.w	r2, r3, #25
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	4919      	ldr	r1, [pc, #100]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c56:	f7fc fa3d 	bl	80020d4 <HAL_GetTick>
 8005c5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c5c:	e008      	b.n	8005c70 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c5e:	f7fc fa39 	bl	80020d4 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d901      	bls.n	8005c70 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e2d3      	b.n	8006218 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c70:	4b11      	ldr	r3, [pc, #68]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0304 	and.w	r3, r3, #4
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d0f0      	beq.n	8005c5e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	061b      	lsls	r3, r3, #24
 8005c8a:	490b      	ldr	r1, [pc, #44]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	604b      	str	r3, [r1, #4]
 8005c90:	e01a      	b.n	8005cc8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c92:	4b09      	ldr	r3, [pc, #36]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a08      	ldr	r2, [pc, #32]	@ (8005cb8 <HAL_RCC_OscConfig+0x244>)
 8005c98:	f023 0301 	bic.w	r3, r3, #1
 8005c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9e:	f7fc fa19 	bl	80020d4 <HAL_GetTick>
 8005ca2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005ca4:	e00a      	b.n	8005cbc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ca6:	f7fc fa15 	bl	80020d4 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d903      	bls.n	8005cbc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e2af      	b.n	8006218 <HAL_RCC_OscConfig+0x7a4>
 8005cb8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005cbc:	4b96      	ldr	r3, [pc, #600]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1ee      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0310 	and.w	r3, r3, #16
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d06a      	beq.n	8005daa <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cd4:	4b90      	ldr	r3, [pc, #576]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cdc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005cde:	4b8e      	ldr	r3, [pc, #568]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	2b08      	cmp	r3, #8
 8005ce8:	d007      	beq.n	8005cfa <HAL_RCC_OscConfig+0x286>
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	2b18      	cmp	r3, #24
 8005cee:	d11b      	bne.n	8005d28 <HAL_RCC_OscConfig+0x2b4>
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d116      	bne.n	8005d28 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005cfa:	4b87      	ldr	r3, [pc, #540]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d005      	beq.n	8005d12 <HAL_RCC_OscConfig+0x29e>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	2b80      	cmp	r3, #128	@ 0x80
 8005d0c:	d001      	beq.n	8005d12 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e282      	b.n	8006218 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d12:	4b81      	ldr	r3, [pc, #516]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	061b      	lsls	r3, r3, #24
 8005d20:	497d      	ldr	r1, [pc, #500]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d26:	e040      	b.n	8005daa <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	69db      	ldr	r3, [r3, #28]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d023      	beq.n	8005d78 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005d30:	4b79      	ldr	r3, [pc, #484]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a78      	ldr	r2, [pc, #480]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005d36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d3c:	f7fc f9ca 	bl	80020d4 <HAL_GetTick>
 8005d40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d42:	e008      	b.n	8005d56 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005d44:	f7fc f9c6 	bl	80020d4 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e260      	b.n	8006218 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d56:	4b70      	ldr	r3, [pc, #448]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d0f0      	beq.n	8005d44 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d62:	4b6d      	ldr	r3, [pc, #436]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	061b      	lsls	r3, r3, #24
 8005d70:	4969      	ldr	r1, [pc, #420]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	60cb      	str	r3, [r1, #12]
 8005d76:	e018      	b.n	8005daa <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005d78:	4b67      	ldr	r3, [pc, #412]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a66      	ldr	r2, [pc, #408]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005d7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d84:	f7fc f9a6 	bl	80020d4 <HAL_GetTick>
 8005d88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d8a:	e008      	b.n	8005d9e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005d8c:	f7fc f9a2 	bl	80020d4 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e23c      	b.n	8006218 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d9e:	4b5e      	ldr	r3, [pc, #376]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1f0      	bne.n	8005d8c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0308 	and.w	r3, r3, #8
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d036      	beq.n	8005e24 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d019      	beq.n	8005df2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dbe:	4b56      	ldr	r3, [pc, #344]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dc2:	4a55      	ldr	r2, [pc, #340]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005dc4:	f043 0301 	orr.w	r3, r3, #1
 8005dc8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dca:	f7fc f983 	bl	80020d4 <HAL_GetTick>
 8005dce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005dd0:	e008      	b.n	8005de4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dd2:	f7fc f97f 	bl	80020d4 <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d901      	bls.n	8005de4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e219      	b.n	8006218 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005de4:	4b4c      	ldr	r3, [pc, #304]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005de6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d0f0      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x35e>
 8005df0:	e018      	b.n	8005e24 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005df2:	4b49      	ldr	r3, [pc, #292]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005df4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005df6:	4a48      	ldr	r2, [pc, #288]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005df8:	f023 0301 	bic.w	r3, r3, #1
 8005dfc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dfe:	f7fc f969 	bl	80020d4 <HAL_GetTick>
 8005e02:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e04:	e008      	b.n	8005e18 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e06:	f7fc f965 	bl	80020d4 <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d901      	bls.n	8005e18 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e1ff      	b.n	8006218 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e18:	4b3f      	ldr	r3, [pc, #252]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005e1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1f0      	bne.n	8005e06 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0320 	and.w	r3, r3, #32
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d036      	beq.n	8005e9e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d019      	beq.n	8005e6c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e38:	4b37      	ldr	r3, [pc, #220]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a36      	ldr	r2, [pc, #216]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005e3e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005e42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e44:	f7fc f946 	bl	80020d4 <HAL_GetTick>
 8005e48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e4a:	e008      	b.n	8005e5e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e4c:	f7fc f942 	bl	80020d4 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d901      	bls.n	8005e5e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e1dc      	b.n	8006218 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e5e:	4b2e      	ldr	r3, [pc, #184]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0f0      	beq.n	8005e4c <HAL_RCC_OscConfig+0x3d8>
 8005e6a:	e018      	b.n	8005e9e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e6c:	4b2a      	ldr	r3, [pc, #168]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a29      	ldr	r2, [pc, #164]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005e72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e78:	f7fc f92c 	bl	80020d4 <HAL_GetTick>
 8005e7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e80:	f7fc f928 	bl	80020d4 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e1c2      	b.n	8006218 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e92:	4b21      	ldr	r3, [pc, #132]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1f0      	bne.n	8005e80 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 8086 	beq.w	8005fb8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005eac:	4b1b      	ldr	r3, [pc, #108]	@ (8005f1c <HAL_RCC_OscConfig+0x4a8>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a1a      	ldr	r2, [pc, #104]	@ (8005f1c <HAL_RCC_OscConfig+0x4a8>)
 8005eb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005eb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005eb8:	f7fc f90c 	bl	80020d4 <HAL_GetTick>
 8005ebc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ec0:	f7fc f908 	bl	80020d4 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b64      	cmp	r3, #100	@ 0x64
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e1a2      	b.n	8006218 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ed2:	4b12      	ldr	r3, [pc, #72]	@ (8005f1c <HAL_RCC_OscConfig+0x4a8>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d0f0      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d106      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x480>
 8005ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eea:	4a0b      	ldr	r2, [pc, #44]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005eec:	f043 0301 	orr.w	r3, r3, #1
 8005ef0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ef2:	e032      	b.n	8005f5a <HAL_RCC_OscConfig+0x4e6>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d111      	bne.n	8005f20 <HAL_RCC_OscConfig+0x4ac>
 8005efc:	4b06      	ldr	r3, [pc, #24]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f00:	4a05      	ldr	r2, [pc, #20]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005f02:	f023 0301 	bic.w	r3, r3, #1
 8005f06:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f08:	4b03      	ldr	r3, [pc, #12]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f0c:	4a02      	ldr	r2, [pc, #8]	@ (8005f18 <HAL_RCC_OscConfig+0x4a4>)
 8005f0e:	f023 0304 	bic.w	r3, r3, #4
 8005f12:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f14:	e021      	b.n	8005f5a <HAL_RCC_OscConfig+0x4e6>
 8005f16:	bf00      	nop
 8005f18:	58024400 	.word	0x58024400
 8005f1c:	58024800 	.word	0x58024800
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	2b05      	cmp	r3, #5
 8005f26:	d10c      	bne.n	8005f42 <HAL_RCC_OscConfig+0x4ce>
 8005f28:	4b83      	ldr	r3, [pc, #524]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 8005f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f2c:	4a82      	ldr	r2, [pc, #520]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 8005f2e:	f043 0304 	orr.w	r3, r3, #4
 8005f32:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f34:	4b80      	ldr	r3, [pc, #512]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 8005f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f38:	4a7f      	ldr	r2, [pc, #508]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 8005f3a:	f043 0301 	orr.w	r3, r3, #1
 8005f3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f40:	e00b      	b.n	8005f5a <HAL_RCC_OscConfig+0x4e6>
 8005f42:	4b7d      	ldr	r3, [pc, #500]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 8005f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f46:	4a7c      	ldr	r2, [pc, #496]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 8005f48:	f023 0301 	bic.w	r3, r3, #1
 8005f4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f4e:	4b7a      	ldr	r3, [pc, #488]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 8005f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f52:	4a79      	ldr	r2, [pc, #484]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 8005f54:	f023 0304 	bic.w	r3, r3, #4
 8005f58:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d015      	beq.n	8005f8e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f62:	f7fc f8b7 	bl	80020d4 <HAL_GetTick>
 8005f66:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f68:	e00a      	b.n	8005f80 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f6a:	f7fc f8b3 	bl	80020d4 <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d901      	bls.n	8005f80 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e14b      	b.n	8006218 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f80:	4b6d      	ldr	r3, [pc, #436]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 8005f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d0ee      	beq.n	8005f6a <HAL_RCC_OscConfig+0x4f6>
 8005f8c:	e014      	b.n	8005fb8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f8e:	f7fc f8a1 	bl	80020d4 <HAL_GetTick>
 8005f92:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f94:	e00a      	b.n	8005fac <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f96:	f7fc f89d 	bl	80020d4 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d901      	bls.n	8005fac <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e135      	b.n	8006218 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005fac:	4b62      	ldr	r3, [pc, #392]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 8005fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1ee      	bne.n	8005f96 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 812a 	beq.w	8006216 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005fc2:	4b5d      	ldr	r3, [pc, #372]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fca:	2b18      	cmp	r3, #24
 8005fcc:	f000 80ba 	beq.w	8006144 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	f040 8095 	bne.w	8006104 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fda:	4b57      	ldr	r3, [pc, #348]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a56      	ldr	r2, [pc, #344]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 8005fe0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe6:	f7fc f875 	bl	80020d4 <HAL_GetTick>
 8005fea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005fec:	e008      	b.n	8006000 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fee:	f7fc f871 	bl	80020d4 <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d901      	bls.n	8006000 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e10b      	b.n	8006218 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006000:	4b4d      	ldr	r3, [pc, #308]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1f0      	bne.n	8005fee <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800600c:	4b4a      	ldr	r3, [pc, #296]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 800600e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006010:	4b4a      	ldr	r3, [pc, #296]	@ (800613c <HAL_RCC_OscConfig+0x6c8>)
 8006012:	4013      	ands	r3, r2
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800601c:	0112      	lsls	r2, r2, #4
 800601e:	430a      	orrs	r2, r1
 8006020:	4945      	ldr	r1, [pc, #276]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 8006022:	4313      	orrs	r3, r2
 8006024:	628b      	str	r3, [r1, #40]	@ 0x28
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800602a:	3b01      	subs	r3, #1
 800602c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006034:	3b01      	subs	r3, #1
 8006036:	025b      	lsls	r3, r3, #9
 8006038:	b29b      	uxth	r3, r3
 800603a:	431a      	orrs	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006040:	3b01      	subs	r3, #1
 8006042:	041b      	lsls	r3, r3, #16
 8006044:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006048:	431a      	orrs	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800604e:	3b01      	subs	r3, #1
 8006050:	061b      	lsls	r3, r3, #24
 8006052:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006056:	4938      	ldr	r1, [pc, #224]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 8006058:	4313      	orrs	r3, r2
 800605a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800605c:	4b36      	ldr	r3, [pc, #216]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 800605e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006060:	4a35      	ldr	r2, [pc, #212]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 8006062:	f023 0301 	bic.w	r3, r3, #1
 8006066:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006068:	4b33      	ldr	r3, [pc, #204]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 800606a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800606c:	4b34      	ldr	r3, [pc, #208]	@ (8006140 <HAL_RCC_OscConfig+0x6cc>)
 800606e:	4013      	ands	r3, r2
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006074:	00d2      	lsls	r2, r2, #3
 8006076:	4930      	ldr	r1, [pc, #192]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 8006078:	4313      	orrs	r3, r2
 800607a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800607c:	4b2e      	ldr	r3, [pc, #184]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 800607e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006080:	f023 020c 	bic.w	r2, r3, #12
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006088:	492b      	ldr	r1, [pc, #172]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 800608a:	4313      	orrs	r3, r2
 800608c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800608e:	4b2a      	ldr	r3, [pc, #168]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 8006090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006092:	f023 0202 	bic.w	r2, r3, #2
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800609a:	4927      	ldr	r1, [pc, #156]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 800609c:	4313      	orrs	r3, r2
 800609e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80060a0:	4b25      	ldr	r3, [pc, #148]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 80060a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a4:	4a24      	ldr	r2, [pc, #144]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 80060a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060ac:	4b22      	ldr	r3, [pc, #136]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 80060ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b0:	4a21      	ldr	r2, [pc, #132]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 80060b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80060b8:	4b1f      	ldr	r3, [pc, #124]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 80060ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060bc:	4a1e      	ldr	r2, [pc, #120]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 80060be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80060c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80060c4:	4b1c      	ldr	r3, [pc, #112]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 80060c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c8:	4a1b      	ldr	r2, [pc, #108]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 80060ca:	f043 0301 	orr.w	r3, r3, #1
 80060ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060d0:	4b19      	ldr	r3, [pc, #100]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a18      	ldr	r2, [pc, #96]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 80060d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80060da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060dc:	f7fb fffa 	bl	80020d4 <HAL_GetTick>
 80060e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060e2:	e008      	b.n	80060f6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060e4:	f7fb fff6 	bl	80020d4 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e090      	b.n	8006218 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060f6:	4b10      	ldr	r3, [pc, #64]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d0f0      	beq.n	80060e4 <HAL_RCC_OscConfig+0x670>
 8006102:	e088      	b.n	8006216 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006104:	4b0c      	ldr	r3, [pc, #48]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a0b      	ldr	r2, [pc, #44]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 800610a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800610e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006110:	f7fb ffe0 	bl	80020d4 <HAL_GetTick>
 8006114:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006116:	e008      	b.n	800612a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006118:	f7fb ffdc 	bl	80020d4 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	2b02      	cmp	r3, #2
 8006124:	d901      	bls.n	800612a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e076      	b.n	8006218 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800612a:	4b03      	ldr	r3, [pc, #12]	@ (8006138 <HAL_RCC_OscConfig+0x6c4>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1f0      	bne.n	8006118 <HAL_RCC_OscConfig+0x6a4>
 8006136:	e06e      	b.n	8006216 <HAL_RCC_OscConfig+0x7a2>
 8006138:	58024400 	.word	0x58024400
 800613c:	fffffc0c 	.word	0xfffffc0c
 8006140:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006144:	4b36      	ldr	r3, [pc, #216]	@ (8006220 <HAL_RCC_OscConfig+0x7ac>)
 8006146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006148:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800614a:	4b35      	ldr	r3, [pc, #212]	@ (8006220 <HAL_RCC_OscConfig+0x7ac>)
 800614c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800614e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006154:	2b01      	cmp	r3, #1
 8006156:	d031      	beq.n	80061bc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f003 0203 	and.w	r2, r3, #3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006162:	429a      	cmp	r2, r3
 8006164:	d12a      	bne.n	80061bc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	091b      	lsrs	r3, r3, #4
 800616a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006172:	429a      	cmp	r2, r3
 8006174:	d122      	bne.n	80061bc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006180:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006182:	429a      	cmp	r2, r3
 8006184:	d11a      	bne.n	80061bc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	0a5b      	lsrs	r3, r3, #9
 800618a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006192:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006194:	429a      	cmp	r2, r3
 8006196:	d111      	bne.n	80061bc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	0c1b      	lsrs	r3, r3, #16
 800619c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d108      	bne.n	80061bc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	0e1b      	lsrs	r3, r3, #24
 80061ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d001      	beq.n	80061c0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e02b      	b.n	8006218 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80061c0:	4b17      	ldr	r3, [pc, #92]	@ (8006220 <HAL_RCC_OscConfig+0x7ac>)
 80061c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061c4:	08db      	lsrs	r3, r3, #3
 80061c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061ca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d01f      	beq.n	8006216 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80061d6:	4b12      	ldr	r3, [pc, #72]	@ (8006220 <HAL_RCC_OscConfig+0x7ac>)
 80061d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061da:	4a11      	ldr	r2, [pc, #68]	@ (8006220 <HAL_RCC_OscConfig+0x7ac>)
 80061dc:	f023 0301 	bic.w	r3, r3, #1
 80061e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80061e2:	f7fb ff77 	bl	80020d4 <HAL_GetTick>
 80061e6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80061e8:	bf00      	nop
 80061ea:	f7fb ff73 	bl	80020d4 <HAL_GetTick>
 80061ee:	4602      	mov	r2, r0
 80061f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d0f9      	beq.n	80061ea <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80061f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006220 <HAL_RCC_OscConfig+0x7ac>)
 80061f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006224 <HAL_RCC_OscConfig+0x7b0>)
 80061fc:	4013      	ands	r3, r2
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006202:	00d2      	lsls	r2, r2, #3
 8006204:	4906      	ldr	r1, [pc, #24]	@ (8006220 <HAL_RCC_OscConfig+0x7ac>)
 8006206:	4313      	orrs	r3, r2
 8006208:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800620a:	4b05      	ldr	r3, [pc, #20]	@ (8006220 <HAL_RCC_OscConfig+0x7ac>)
 800620c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620e:	4a04      	ldr	r2, [pc, #16]	@ (8006220 <HAL_RCC_OscConfig+0x7ac>)
 8006210:	f043 0301 	orr.w	r3, r3, #1
 8006214:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3730      	adds	r7, #48	@ 0x30
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	58024400 	.word	0x58024400
 8006224:	ffff0007 	.word	0xffff0007

08006228 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b086      	sub	sp, #24
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e19c      	b.n	8006576 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800623c:	4b8a      	ldr	r3, [pc, #552]	@ (8006468 <HAL_RCC_ClockConfig+0x240>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 030f 	and.w	r3, r3, #15
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	429a      	cmp	r2, r3
 8006248:	d910      	bls.n	800626c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800624a:	4b87      	ldr	r3, [pc, #540]	@ (8006468 <HAL_RCC_ClockConfig+0x240>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f023 020f 	bic.w	r2, r3, #15
 8006252:	4985      	ldr	r1, [pc, #532]	@ (8006468 <HAL_RCC_ClockConfig+0x240>)
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	4313      	orrs	r3, r2
 8006258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800625a:	4b83      	ldr	r3, [pc, #524]	@ (8006468 <HAL_RCC_ClockConfig+0x240>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 030f 	and.w	r3, r3, #15
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	429a      	cmp	r2, r3
 8006266:	d001      	beq.n	800626c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e184      	b.n	8006576 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b00      	cmp	r3, #0
 8006276:	d010      	beq.n	800629a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	691a      	ldr	r2, [r3, #16]
 800627c:	4b7b      	ldr	r3, [pc, #492]	@ (800646c <HAL_RCC_ClockConfig+0x244>)
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006284:	429a      	cmp	r2, r3
 8006286:	d908      	bls.n	800629a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006288:	4b78      	ldr	r3, [pc, #480]	@ (800646c <HAL_RCC_ClockConfig+0x244>)
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	4975      	ldr	r1, [pc, #468]	@ (800646c <HAL_RCC_ClockConfig+0x244>)
 8006296:	4313      	orrs	r3, r2
 8006298:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 0308 	and.w	r3, r3, #8
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d010      	beq.n	80062c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	695a      	ldr	r2, [r3, #20]
 80062aa:	4b70      	ldr	r3, [pc, #448]	@ (800646c <HAL_RCC_ClockConfig+0x244>)
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d908      	bls.n	80062c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80062b6:	4b6d      	ldr	r3, [pc, #436]	@ (800646c <HAL_RCC_ClockConfig+0x244>)
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	496a      	ldr	r1, [pc, #424]	@ (800646c <HAL_RCC_ClockConfig+0x244>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0310 	and.w	r3, r3, #16
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d010      	beq.n	80062f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	699a      	ldr	r2, [r3, #24]
 80062d8:	4b64      	ldr	r3, [pc, #400]	@ (800646c <HAL_RCC_ClockConfig+0x244>)
 80062da:	69db      	ldr	r3, [r3, #28]
 80062dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d908      	bls.n	80062f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062e4:	4b61      	ldr	r3, [pc, #388]	@ (800646c <HAL_RCC_ClockConfig+0x244>)
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	495e      	ldr	r1, [pc, #376]	@ (800646c <HAL_RCC_ClockConfig+0x244>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0320 	and.w	r3, r3, #32
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d010      	beq.n	8006324 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	69da      	ldr	r2, [r3, #28]
 8006306:	4b59      	ldr	r3, [pc, #356]	@ (800646c <HAL_RCC_ClockConfig+0x244>)
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800630e:	429a      	cmp	r2, r3
 8006310:	d908      	bls.n	8006324 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006312:	4b56      	ldr	r3, [pc, #344]	@ (800646c <HAL_RCC_ClockConfig+0x244>)
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	4953      	ldr	r1, [pc, #332]	@ (800646c <HAL_RCC_ClockConfig+0x244>)
 8006320:	4313      	orrs	r3, r2
 8006322:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0302 	and.w	r3, r3, #2
 800632c:	2b00      	cmp	r3, #0
 800632e:	d010      	beq.n	8006352 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68da      	ldr	r2, [r3, #12]
 8006334:	4b4d      	ldr	r3, [pc, #308]	@ (800646c <HAL_RCC_ClockConfig+0x244>)
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	f003 030f 	and.w	r3, r3, #15
 800633c:	429a      	cmp	r2, r3
 800633e:	d908      	bls.n	8006352 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006340:	4b4a      	ldr	r3, [pc, #296]	@ (800646c <HAL_RCC_ClockConfig+0x244>)
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	f023 020f 	bic.w	r2, r3, #15
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	4947      	ldr	r1, [pc, #284]	@ (800646c <HAL_RCC_ClockConfig+0x244>)
 800634e:	4313      	orrs	r3, r2
 8006350:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b00      	cmp	r3, #0
 800635c:	d055      	beq.n	800640a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800635e:	4b43      	ldr	r3, [pc, #268]	@ (800646c <HAL_RCC_ClockConfig+0x244>)
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	4940      	ldr	r1, [pc, #256]	@ (800646c <HAL_RCC_ClockConfig+0x244>)
 800636c:	4313      	orrs	r3, r2
 800636e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	2b02      	cmp	r3, #2
 8006376:	d107      	bne.n	8006388 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006378:	4b3c      	ldr	r3, [pc, #240]	@ (800646c <HAL_RCC_ClockConfig+0x244>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d121      	bne.n	80063c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e0f6      	b.n	8006576 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	2b03      	cmp	r3, #3
 800638e:	d107      	bne.n	80063a0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006390:	4b36      	ldr	r3, [pc, #216]	@ (800646c <HAL_RCC_ClockConfig+0x244>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d115      	bne.n	80063c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e0ea      	b.n	8006576 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d107      	bne.n	80063b8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80063a8:	4b30      	ldr	r3, [pc, #192]	@ (800646c <HAL_RCC_ClockConfig+0x244>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d109      	bne.n	80063c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e0de      	b.n	8006576 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063b8:	4b2c      	ldr	r3, [pc, #176]	@ (800646c <HAL_RCC_ClockConfig+0x244>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0304 	and.w	r3, r3, #4
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e0d6      	b.n	8006576 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063c8:	4b28      	ldr	r3, [pc, #160]	@ (800646c <HAL_RCC_ClockConfig+0x244>)
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	f023 0207 	bic.w	r2, r3, #7
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	4925      	ldr	r1, [pc, #148]	@ (800646c <HAL_RCC_ClockConfig+0x244>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063da:	f7fb fe7b 	bl	80020d4 <HAL_GetTick>
 80063de:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063e0:	e00a      	b.n	80063f8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063e2:	f7fb fe77 	bl	80020d4 <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d901      	bls.n	80063f8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e0be      	b.n	8006576 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063f8:	4b1c      	ldr	r3, [pc, #112]	@ (800646c <HAL_RCC_ClockConfig+0x244>)
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	00db      	lsls	r3, r3, #3
 8006406:	429a      	cmp	r2, r3
 8006408:	d1eb      	bne.n	80063e2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0302 	and.w	r3, r3, #2
 8006412:	2b00      	cmp	r3, #0
 8006414:	d010      	beq.n	8006438 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68da      	ldr	r2, [r3, #12]
 800641a:	4b14      	ldr	r3, [pc, #80]	@ (800646c <HAL_RCC_ClockConfig+0x244>)
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	f003 030f 	and.w	r3, r3, #15
 8006422:	429a      	cmp	r2, r3
 8006424:	d208      	bcs.n	8006438 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006426:	4b11      	ldr	r3, [pc, #68]	@ (800646c <HAL_RCC_ClockConfig+0x244>)
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	f023 020f 	bic.w	r2, r3, #15
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	490e      	ldr	r1, [pc, #56]	@ (800646c <HAL_RCC_ClockConfig+0x244>)
 8006434:	4313      	orrs	r3, r2
 8006436:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006438:	4b0b      	ldr	r3, [pc, #44]	@ (8006468 <HAL_RCC_ClockConfig+0x240>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 030f 	and.w	r3, r3, #15
 8006440:	683a      	ldr	r2, [r7, #0]
 8006442:	429a      	cmp	r2, r3
 8006444:	d214      	bcs.n	8006470 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006446:	4b08      	ldr	r3, [pc, #32]	@ (8006468 <HAL_RCC_ClockConfig+0x240>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f023 020f 	bic.w	r2, r3, #15
 800644e:	4906      	ldr	r1, [pc, #24]	@ (8006468 <HAL_RCC_ClockConfig+0x240>)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	4313      	orrs	r3, r2
 8006454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006456:	4b04      	ldr	r3, [pc, #16]	@ (8006468 <HAL_RCC_ClockConfig+0x240>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 030f 	and.w	r3, r3, #15
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	429a      	cmp	r2, r3
 8006462:	d005      	beq.n	8006470 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e086      	b.n	8006576 <HAL_RCC_ClockConfig+0x34e>
 8006468:	52002000 	.word	0x52002000
 800646c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0304 	and.w	r3, r3, #4
 8006478:	2b00      	cmp	r3, #0
 800647a:	d010      	beq.n	800649e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	691a      	ldr	r2, [r3, #16]
 8006480:	4b3f      	ldr	r3, [pc, #252]	@ (8006580 <HAL_RCC_ClockConfig+0x358>)
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006488:	429a      	cmp	r2, r3
 800648a:	d208      	bcs.n	800649e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800648c:	4b3c      	ldr	r3, [pc, #240]	@ (8006580 <HAL_RCC_ClockConfig+0x358>)
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	4939      	ldr	r1, [pc, #228]	@ (8006580 <HAL_RCC_ClockConfig+0x358>)
 800649a:	4313      	orrs	r3, r2
 800649c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0308 	and.w	r3, r3, #8
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d010      	beq.n	80064cc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	695a      	ldr	r2, [r3, #20]
 80064ae:	4b34      	ldr	r3, [pc, #208]	@ (8006580 <HAL_RCC_ClockConfig+0x358>)
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d208      	bcs.n	80064cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80064ba:	4b31      	ldr	r3, [pc, #196]	@ (8006580 <HAL_RCC_ClockConfig+0x358>)
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	492e      	ldr	r1, [pc, #184]	@ (8006580 <HAL_RCC_ClockConfig+0x358>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0310 	and.w	r3, r3, #16
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d010      	beq.n	80064fa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	699a      	ldr	r2, [r3, #24]
 80064dc:	4b28      	ldr	r3, [pc, #160]	@ (8006580 <HAL_RCC_ClockConfig+0x358>)
 80064de:	69db      	ldr	r3, [r3, #28]
 80064e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d208      	bcs.n	80064fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80064e8:	4b25      	ldr	r3, [pc, #148]	@ (8006580 <HAL_RCC_ClockConfig+0x358>)
 80064ea:	69db      	ldr	r3, [r3, #28]
 80064ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	4922      	ldr	r1, [pc, #136]	@ (8006580 <HAL_RCC_ClockConfig+0x358>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0320 	and.w	r3, r3, #32
 8006502:	2b00      	cmp	r3, #0
 8006504:	d010      	beq.n	8006528 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	69da      	ldr	r2, [r3, #28]
 800650a:	4b1d      	ldr	r3, [pc, #116]	@ (8006580 <HAL_RCC_ClockConfig+0x358>)
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006512:	429a      	cmp	r2, r3
 8006514:	d208      	bcs.n	8006528 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006516:	4b1a      	ldr	r3, [pc, #104]	@ (8006580 <HAL_RCC_ClockConfig+0x358>)
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	4917      	ldr	r1, [pc, #92]	@ (8006580 <HAL_RCC_ClockConfig+0x358>)
 8006524:	4313      	orrs	r3, r2
 8006526:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006528:	f000 f834 	bl	8006594 <HAL_RCC_GetSysClockFreq>
 800652c:	4602      	mov	r2, r0
 800652e:	4b14      	ldr	r3, [pc, #80]	@ (8006580 <HAL_RCC_ClockConfig+0x358>)
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	0a1b      	lsrs	r3, r3, #8
 8006534:	f003 030f 	and.w	r3, r3, #15
 8006538:	4912      	ldr	r1, [pc, #72]	@ (8006584 <HAL_RCC_ClockConfig+0x35c>)
 800653a:	5ccb      	ldrb	r3, [r1, r3]
 800653c:	f003 031f 	and.w	r3, r3, #31
 8006540:	fa22 f303 	lsr.w	r3, r2, r3
 8006544:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006546:	4b0e      	ldr	r3, [pc, #56]	@ (8006580 <HAL_RCC_ClockConfig+0x358>)
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	f003 030f 	and.w	r3, r3, #15
 800654e:	4a0d      	ldr	r2, [pc, #52]	@ (8006584 <HAL_RCC_ClockConfig+0x35c>)
 8006550:	5cd3      	ldrb	r3, [r2, r3]
 8006552:	f003 031f 	and.w	r3, r3, #31
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	fa22 f303 	lsr.w	r3, r2, r3
 800655c:	4a0a      	ldr	r2, [pc, #40]	@ (8006588 <HAL_RCC_ClockConfig+0x360>)
 800655e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006560:	4a0a      	ldr	r2, [pc, #40]	@ (800658c <HAL_RCC_ClockConfig+0x364>)
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006566:	4b0a      	ldr	r3, [pc, #40]	@ (8006590 <HAL_RCC_ClockConfig+0x368>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4618      	mov	r0, r3
 800656c:	f7fb fd68 	bl	8002040 <HAL_InitTick>
 8006570:	4603      	mov	r3, r0
 8006572:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006574:	7bfb      	ldrb	r3, [r7, #15]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3718      	adds	r7, #24
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	58024400 	.word	0x58024400
 8006584:	0800c5e0 	.word	0x0800c5e0
 8006588:	24000014 	.word	0x24000014
 800658c:	24000010 	.word	0x24000010
 8006590:	24000018 	.word	0x24000018

08006594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006594:	b480      	push	{r7}
 8006596:	b089      	sub	sp, #36	@ 0x24
 8006598:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800659a:	4bb3      	ldr	r3, [pc, #716]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065a2:	2b18      	cmp	r3, #24
 80065a4:	f200 8155 	bhi.w	8006852 <HAL_RCC_GetSysClockFreq+0x2be>
 80065a8:	a201      	add	r2, pc, #4	@ (adr r2, 80065b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80065aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ae:	bf00      	nop
 80065b0:	08006615 	.word	0x08006615
 80065b4:	08006853 	.word	0x08006853
 80065b8:	08006853 	.word	0x08006853
 80065bc:	08006853 	.word	0x08006853
 80065c0:	08006853 	.word	0x08006853
 80065c4:	08006853 	.word	0x08006853
 80065c8:	08006853 	.word	0x08006853
 80065cc:	08006853 	.word	0x08006853
 80065d0:	0800663b 	.word	0x0800663b
 80065d4:	08006853 	.word	0x08006853
 80065d8:	08006853 	.word	0x08006853
 80065dc:	08006853 	.word	0x08006853
 80065e0:	08006853 	.word	0x08006853
 80065e4:	08006853 	.word	0x08006853
 80065e8:	08006853 	.word	0x08006853
 80065ec:	08006853 	.word	0x08006853
 80065f0:	08006641 	.word	0x08006641
 80065f4:	08006853 	.word	0x08006853
 80065f8:	08006853 	.word	0x08006853
 80065fc:	08006853 	.word	0x08006853
 8006600:	08006853 	.word	0x08006853
 8006604:	08006853 	.word	0x08006853
 8006608:	08006853 	.word	0x08006853
 800660c:	08006853 	.word	0x08006853
 8006610:	08006647 	.word	0x08006647
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006614:	4b94      	ldr	r3, [pc, #592]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0320 	and.w	r3, r3, #32
 800661c:	2b00      	cmp	r3, #0
 800661e:	d009      	beq.n	8006634 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006620:	4b91      	ldr	r3, [pc, #580]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	08db      	lsrs	r3, r3, #3
 8006626:	f003 0303 	and.w	r3, r3, #3
 800662a:	4a90      	ldr	r2, [pc, #576]	@ (800686c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800662c:	fa22 f303 	lsr.w	r3, r2, r3
 8006630:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006632:	e111      	b.n	8006858 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006634:	4b8d      	ldr	r3, [pc, #564]	@ (800686c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006636:	61bb      	str	r3, [r7, #24]
      break;
 8006638:	e10e      	b.n	8006858 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800663a:	4b8d      	ldr	r3, [pc, #564]	@ (8006870 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800663c:	61bb      	str	r3, [r7, #24]
      break;
 800663e:	e10b      	b.n	8006858 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006640:	4b8c      	ldr	r3, [pc, #560]	@ (8006874 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006642:	61bb      	str	r3, [r7, #24]
      break;
 8006644:	e108      	b.n	8006858 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006646:	4b88      	ldr	r3, [pc, #544]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800664a:	f003 0303 	and.w	r3, r3, #3
 800664e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006650:	4b85      	ldr	r3, [pc, #532]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006654:	091b      	lsrs	r3, r3, #4
 8006656:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800665a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800665c:	4b82      	ldr	r3, [pc, #520]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800665e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006666:	4b80      	ldr	r3, [pc, #512]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800666a:	08db      	lsrs	r3, r3, #3
 800666c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	fb02 f303 	mul.w	r3, r2, r3
 8006676:	ee07 3a90 	vmov	s15, r3
 800667a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800667e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 80e1 	beq.w	800684c <HAL_RCC_GetSysClockFreq+0x2b8>
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2b02      	cmp	r3, #2
 800668e:	f000 8083 	beq.w	8006798 <HAL_RCC_GetSysClockFreq+0x204>
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	2b02      	cmp	r3, #2
 8006696:	f200 80a1 	bhi.w	80067dc <HAL_RCC_GetSysClockFreq+0x248>
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d003      	beq.n	80066a8 <HAL_RCC_GetSysClockFreq+0x114>
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d056      	beq.n	8006754 <HAL_RCC_GetSysClockFreq+0x1c0>
 80066a6:	e099      	b.n	80067dc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066a8:	4b6f      	ldr	r3, [pc, #444]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0320 	and.w	r3, r3, #32
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d02d      	beq.n	8006710 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066b4:	4b6c      	ldr	r3, [pc, #432]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	08db      	lsrs	r3, r3, #3
 80066ba:	f003 0303 	and.w	r3, r3, #3
 80066be:	4a6b      	ldr	r2, [pc, #428]	@ (800686c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80066c0:	fa22 f303 	lsr.w	r3, r2, r3
 80066c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	ee07 3a90 	vmov	s15, r3
 80066cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	ee07 3a90 	vmov	s15, r3
 80066d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066de:	4b62      	ldr	r3, [pc, #392]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066e6:	ee07 3a90 	vmov	s15, r3
 80066ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80066f2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006878 <HAL_RCC_GetSysClockFreq+0x2e4>
 80066f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800670a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800670e:	e087      	b.n	8006820 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	ee07 3a90 	vmov	s15, r3
 8006716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800671a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800687c <HAL_RCC_GetSysClockFreq+0x2e8>
 800671e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006722:	4b51      	ldr	r3, [pc, #324]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800672a:	ee07 3a90 	vmov	s15, r3
 800672e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006732:	ed97 6a02 	vldr	s12, [r7, #8]
 8006736:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006878 <HAL_RCC_GetSysClockFreq+0x2e4>
 800673a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800673e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800674a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800674e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006752:	e065      	b.n	8006820 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	ee07 3a90 	vmov	s15, r3
 800675a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800675e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006880 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006766:	4b40      	ldr	r3, [pc, #256]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800676a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800676e:	ee07 3a90 	vmov	s15, r3
 8006772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006776:	ed97 6a02 	vldr	s12, [r7, #8]
 800677a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006878 <HAL_RCC_GetSysClockFreq+0x2e4>
 800677e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006786:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800678a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800678e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006792:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006796:	e043      	b.n	8006820 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	ee07 3a90 	vmov	s15, r3
 800679e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067a2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006884 <HAL_RCC_GetSysClockFreq+0x2f0>
 80067a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067aa:	4b2f      	ldr	r3, [pc, #188]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067b2:	ee07 3a90 	vmov	s15, r3
 80067b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80067be:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006878 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80067da:	e021      	b.n	8006820 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	ee07 3a90 	vmov	s15, r3
 80067e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006880 <HAL_RCC_GetSysClockFreq+0x2ec>
 80067ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ee:	4b1e      	ldr	r3, [pc, #120]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f6:	ee07 3a90 	vmov	s15, r3
 80067fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006802:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006878 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800680a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800680e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800681a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800681e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006820:	4b11      	ldr	r3, [pc, #68]	@ (8006868 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006824:	0a5b      	lsrs	r3, r3, #9
 8006826:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800682a:	3301      	adds	r3, #1
 800682c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	ee07 3a90 	vmov	s15, r3
 8006834:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006838:	edd7 6a07 	vldr	s13, [r7, #28]
 800683c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006840:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006844:	ee17 3a90 	vmov	r3, s15
 8006848:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800684a:	e005      	b.n	8006858 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	61bb      	str	r3, [r7, #24]
      break;
 8006850:	e002      	b.n	8006858 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006852:	4b07      	ldr	r3, [pc, #28]	@ (8006870 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006854:	61bb      	str	r3, [r7, #24]
      break;
 8006856:	bf00      	nop
  }

  return sysclockfreq;
 8006858:	69bb      	ldr	r3, [r7, #24]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3724      	adds	r7, #36	@ 0x24
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	58024400 	.word	0x58024400
 800686c:	03d09000 	.word	0x03d09000
 8006870:	003d0900 	.word	0x003d0900
 8006874:	016e3600 	.word	0x016e3600
 8006878:	46000000 	.word	0x46000000
 800687c:	4c742400 	.word	0x4c742400
 8006880:	4a742400 	.word	0x4a742400
 8006884:	4bb71b00 	.word	0x4bb71b00

08006888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800688e:	f7ff fe81 	bl	8006594 <HAL_RCC_GetSysClockFreq>
 8006892:	4602      	mov	r2, r0
 8006894:	4b10      	ldr	r3, [pc, #64]	@ (80068d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	0a1b      	lsrs	r3, r3, #8
 800689a:	f003 030f 	and.w	r3, r3, #15
 800689e:	490f      	ldr	r1, [pc, #60]	@ (80068dc <HAL_RCC_GetHCLKFreq+0x54>)
 80068a0:	5ccb      	ldrb	r3, [r1, r3]
 80068a2:	f003 031f 	and.w	r3, r3, #31
 80068a6:	fa22 f303 	lsr.w	r3, r2, r3
 80068aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80068ac:	4b0a      	ldr	r3, [pc, #40]	@ (80068d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	f003 030f 	and.w	r3, r3, #15
 80068b4:	4a09      	ldr	r2, [pc, #36]	@ (80068dc <HAL_RCC_GetHCLKFreq+0x54>)
 80068b6:	5cd3      	ldrb	r3, [r2, r3]
 80068b8:	f003 031f 	and.w	r3, r3, #31
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	fa22 f303 	lsr.w	r3, r2, r3
 80068c2:	4a07      	ldr	r2, [pc, #28]	@ (80068e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80068c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80068c6:	4a07      	ldr	r2, [pc, #28]	@ (80068e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80068cc:	4b04      	ldr	r3, [pc, #16]	@ (80068e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80068ce:	681b      	ldr	r3, [r3, #0]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	58024400 	.word	0x58024400
 80068dc:	0800c5e0 	.word	0x0800c5e0
 80068e0:	24000014 	.word	0x24000014
 80068e4:	24000010 	.word	0x24000010

080068e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80068ec:	f7ff ffcc 	bl	8006888 <HAL_RCC_GetHCLKFreq>
 80068f0:	4602      	mov	r2, r0
 80068f2:	4b06      	ldr	r3, [pc, #24]	@ (800690c <HAL_RCC_GetPCLK1Freq+0x24>)
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	091b      	lsrs	r3, r3, #4
 80068f8:	f003 0307 	and.w	r3, r3, #7
 80068fc:	4904      	ldr	r1, [pc, #16]	@ (8006910 <HAL_RCC_GetPCLK1Freq+0x28>)
 80068fe:	5ccb      	ldrb	r3, [r1, r3]
 8006900:	f003 031f 	and.w	r3, r3, #31
 8006904:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006908:	4618      	mov	r0, r3
 800690a:	bd80      	pop	{r7, pc}
 800690c:	58024400 	.word	0x58024400
 8006910:	0800c5e0 	.word	0x0800c5e0

08006914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006918:	f7ff ffb6 	bl	8006888 <HAL_RCC_GetHCLKFreq>
 800691c:	4602      	mov	r2, r0
 800691e:	4b06      	ldr	r3, [pc, #24]	@ (8006938 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006920:	69db      	ldr	r3, [r3, #28]
 8006922:	0a1b      	lsrs	r3, r3, #8
 8006924:	f003 0307 	and.w	r3, r3, #7
 8006928:	4904      	ldr	r1, [pc, #16]	@ (800693c <HAL_RCC_GetPCLK2Freq+0x28>)
 800692a:	5ccb      	ldrb	r3, [r1, r3]
 800692c:	f003 031f 	and.w	r3, r3, #31
 8006930:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006934:	4618      	mov	r0, r3
 8006936:	bd80      	pop	{r7, pc}
 8006938:	58024400 	.word	0x58024400
 800693c:	0800c5e0 	.word	0x0800c5e0

08006940 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006944:	b0c6      	sub	sp, #280	@ 0x118
 8006946:	af00      	add	r7, sp, #0
 8006948:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800694c:	2300      	movs	r3, #0
 800694e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006952:	2300      	movs	r3, #0
 8006954:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800695c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006960:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006964:	2500      	movs	r5, #0
 8006966:	ea54 0305 	orrs.w	r3, r4, r5
 800696a:	d049      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800696c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006970:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006972:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006976:	d02f      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006978:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800697c:	d828      	bhi.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800697e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006982:	d01a      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006984:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006988:	d822      	bhi.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800698e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006992:	d007      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006994:	e01c      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006996:	4bab      	ldr	r3, [pc, #684]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800699a:	4aaa      	ldr	r2, [pc, #680]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800699c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80069a2:	e01a      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a8:	3308      	adds	r3, #8
 80069aa:	2102      	movs	r1, #2
 80069ac:	4618      	mov	r0, r3
 80069ae:	f002 fa49 	bl	8008e44 <RCCEx_PLL2_Config>
 80069b2:	4603      	mov	r3, r0
 80069b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80069b8:	e00f      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069be:	3328      	adds	r3, #40	@ 0x28
 80069c0:	2102      	movs	r1, #2
 80069c2:	4618      	mov	r0, r3
 80069c4:	f002 faf0 	bl	8008fa8 <RCCEx_PLL3_Config>
 80069c8:	4603      	mov	r3, r0
 80069ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80069ce:	e004      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80069d6:	e000      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80069d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10a      	bne.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80069e2:	4b98      	ldr	r3, [pc, #608]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80069e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80069ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069f0:	4a94      	ldr	r2, [pc, #592]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80069f2:	430b      	orrs	r3, r1
 80069f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80069f6:	e003      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a08:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006a0c:	f04f 0900 	mov.w	r9, #0
 8006a10:	ea58 0309 	orrs.w	r3, r8, r9
 8006a14:	d047      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a1c:	2b04      	cmp	r3, #4
 8006a1e:	d82a      	bhi.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006a20:	a201      	add	r2, pc, #4	@ (adr r2, 8006a28 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a26:	bf00      	nop
 8006a28:	08006a3d 	.word	0x08006a3d
 8006a2c:	08006a4b 	.word	0x08006a4b
 8006a30:	08006a61 	.word	0x08006a61
 8006a34:	08006a7f 	.word	0x08006a7f
 8006a38:	08006a7f 	.word	0x08006a7f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a3c:	4b81      	ldr	r3, [pc, #516]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a40:	4a80      	ldr	r2, [pc, #512]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a48:	e01a      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a4e:	3308      	adds	r3, #8
 8006a50:	2100      	movs	r1, #0
 8006a52:	4618      	mov	r0, r3
 8006a54:	f002 f9f6 	bl	8008e44 <RCCEx_PLL2_Config>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a5e:	e00f      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a64:	3328      	adds	r3, #40	@ 0x28
 8006a66:	2100      	movs	r1, #0
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f002 fa9d 	bl	8008fa8 <RCCEx_PLL3_Config>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a74:	e004      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a7c:	e000      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10a      	bne.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a88:	4b6e      	ldr	r3, [pc, #440]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a8c:	f023 0107 	bic.w	r1, r3, #7
 8006a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a96:	4a6b      	ldr	r2, [pc, #428]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a98:	430b      	orrs	r3, r1
 8006a9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006a9c:	e003      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006aa2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aae:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8006ab2:	f04f 0b00 	mov.w	fp, #0
 8006ab6:	ea5a 030b 	orrs.w	r3, sl, fp
 8006aba:	d05b      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006ac4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006ac8:	d03b      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006aca:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006ace:	d834      	bhi.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006ad0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ad4:	d037      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006ad6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ada:	d82e      	bhi.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006adc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006ae0:	d033      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006ae2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006ae6:	d828      	bhi.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006ae8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006aec:	d01a      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006aee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006af2:	d822      	bhi.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d003      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006af8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006afc:	d007      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006afe:	e01c      	b.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b00:	4b50      	ldr	r3, [pc, #320]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b04:	4a4f      	ldr	r2, [pc, #316]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b0c:	e01e      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b12:	3308      	adds	r3, #8
 8006b14:	2100      	movs	r1, #0
 8006b16:	4618      	mov	r0, r3
 8006b18:	f002 f994 	bl	8008e44 <RCCEx_PLL2_Config>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006b22:	e013      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b28:	3328      	adds	r3, #40	@ 0x28
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f002 fa3b 	bl	8008fa8 <RCCEx_PLL3_Config>
 8006b32:	4603      	mov	r3, r0
 8006b34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b38:	e008      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b40:	e004      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006b42:	bf00      	nop
 8006b44:	e002      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006b46:	bf00      	nop
 8006b48:	e000      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006b4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10b      	bne.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006b54:	4b3b      	ldr	r3, [pc, #236]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b58:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006b64:	4a37      	ldr	r2, [pc, #220]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b66:	430b      	orrs	r3, r1
 8006b68:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b6a:	e003      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006b80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006b84:	2300      	movs	r3, #0
 8006b86:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006b8a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006b8e:	460b      	mov	r3, r1
 8006b90:	4313      	orrs	r3, r2
 8006b92:	d05d      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006b9c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006ba0:	d03b      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006ba2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006ba6:	d834      	bhi.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006ba8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006bac:	d037      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006bae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006bb2:	d82e      	bhi.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006bb4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006bb8:	d033      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006bba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006bbe:	d828      	bhi.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006bc0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bc4:	d01a      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006bc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bca:	d822      	bhi.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d003      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006bd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006bd4:	d007      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006bd6:	e01c      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bdc:	4a19      	ldr	r2, [pc, #100]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006be2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006be4:	e01e      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bea:	3308      	adds	r3, #8
 8006bec:	2100      	movs	r1, #0
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f002 f928 	bl	8008e44 <RCCEx_PLL2_Config>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006bfa:	e013      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c00:	3328      	adds	r3, #40	@ 0x28
 8006c02:	2100      	movs	r1, #0
 8006c04:	4618      	mov	r0, r3
 8006c06:	f002 f9cf 	bl	8008fa8 <RCCEx_PLL3_Config>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c10:	e008      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c18:	e004      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006c1a:	bf00      	nop
 8006c1c:	e002      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006c1e:	bf00      	nop
 8006c20:	e000      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006c22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10d      	bne.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006c2c:	4b05      	ldr	r3, [pc, #20]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c30:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c38:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006c3c:	4a01      	ldr	r2, [pc, #4]	@ (8006c44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c3e:	430b      	orrs	r3, r1
 8006c40:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c42:	e005      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006c44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c58:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006c5c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006c60:	2300      	movs	r3, #0
 8006c62:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006c66:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	d03a      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c76:	2b30      	cmp	r3, #48	@ 0x30
 8006c78:	d01f      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006c7a:	2b30      	cmp	r3, #48	@ 0x30
 8006c7c:	d819      	bhi.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006c7e:	2b20      	cmp	r3, #32
 8006c80:	d00c      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006c82:	2b20      	cmp	r3, #32
 8006c84:	d815      	bhi.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d019      	beq.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006c8a:	2b10      	cmp	r3, #16
 8006c8c:	d111      	bne.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c8e:	4baa      	ldr	r3, [pc, #680]	@ (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c92:	4aa9      	ldr	r2, [pc, #676]	@ (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006c9a:	e011      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca0:	3308      	adds	r3, #8
 8006ca2:	2102      	movs	r1, #2
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f002 f8cd 	bl	8008e44 <RCCEx_PLL2_Config>
 8006caa:	4603      	mov	r3, r0
 8006cac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006cb0:	e006      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006cb8:	e002      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006cba:	bf00      	nop
 8006cbc:	e000      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006cbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d10a      	bne.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006cc8:	4b9b      	ldr	r3, [pc, #620]	@ (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ccc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cd6:	4a98      	ldr	r2, [pc, #608]	@ (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006cd8:	430b      	orrs	r3, r1
 8006cda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006cdc:	e003      	b.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ce2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006cf2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006cfc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006d00:	460b      	mov	r3, r1
 8006d02:	4313      	orrs	r3, r2
 8006d04:	d051      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d10:	d035      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006d12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d16:	d82e      	bhi.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006d18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006d1c:	d031      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006d1e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006d22:	d828      	bhi.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006d24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d28:	d01a      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006d2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d2e:	d822      	bhi.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006d34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d38:	d007      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006d3a:	e01c      	b.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d3c:	4b7e      	ldr	r3, [pc, #504]	@ (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d40:	4a7d      	ldr	r2, [pc, #500]	@ (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d48:	e01c      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d4e:	3308      	adds	r3, #8
 8006d50:	2100      	movs	r1, #0
 8006d52:	4618      	mov	r0, r3
 8006d54:	f002 f876 	bl	8008e44 <RCCEx_PLL2_Config>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d5e:	e011      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d64:	3328      	adds	r3, #40	@ 0x28
 8006d66:	2100      	movs	r1, #0
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f002 f91d 	bl	8008fa8 <RCCEx_PLL3_Config>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d74:	e006      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d7c:	e002      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006d7e:	bf00      	nop
 8006d80:	e000      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006d82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10a      	bne.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006d8c:	4b6a      	ldr	r3, [pc, #424]	@ (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d90:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d9a:	4a67      	ldr	r2, [pc, #412]	@ (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d9c:	430b      	orrs	r3, r1
 8006d9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006da0:	e003      	b.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006da6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006db6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006dba:	2300      	movs	r3, #0
 8006dbc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006dc0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	d053      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006dd4:	d033      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006dd6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006dda:	d82c      	bhi.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006ddc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006de0:	d02f      	beq.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006de2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006de6:	d826      	bhi.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006de8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006dec:	d02b      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006dee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006df2:	d820      	bhi.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006df4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006df8:	d012      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006dfa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dfe:	d81a      	bhi.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d022      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e08:	d115      	bne.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e0e:	3308      	adds	r3, #8
 8006e10:	2101      	movs	r1, #1
 8006e12:	4618      	mov	r0, r3
 8006e14:	f002 f816 	bl	8008e44 <RCCEx_PLL2_Config>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006e1e:	e015      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e24:	3328      	adds	r3, #40	@ 0x28
 8006e26:	2101      	movs	r1, #1
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f002 f8bd 	bl	8008fa8 <RCCEx_PLL3_Config>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006e34:	e00a      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e3c:	e006      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006e3e:	bf00      	nop
 8006e40:	e004      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006e42:	bf00      	nop
 8006e44:	e002      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006e46:	bf00      	nop
 8006e48:	e000      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006e4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10a      	bne.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006e54:	4b38      	ldr	r3, [pc, #224]	@ (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e58:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e62:	4a35      	ldr	r2, [pc, #212]	@ (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e64:	430b      	orrs	r3, r1
 8006e66:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e68:	e003      	b.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e6e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006e7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e82:	2300      	movs	r3, #0
 8006e84:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006e88:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	d058      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e9e:	d033      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006ea0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ea4:	d82c      	bhi.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006eaa:	d02f      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006eb0:	d826      	bhi.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006eb2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006eb6:	d02b      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006eb8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006ebc:	d820      	bhi.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006ebe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ec2:	d012      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006ec4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ec8:	d81a      	bhi.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d022      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006ece:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ed2:	d115      	bne.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed8:	3308      	adds	r3, #8
 8006eda:	2101      	movs	r1, #1
 8006edc:	4618      	mov	r0, r3
 8006ede:	f001 ffb1 	bl	8008e44 <RCCEx_PLL2_Config>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ee8:	e015      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eee:	3328      	adds	r3, #40	@ 0x28
 8006ef0:	2101      	movs	r1, #1
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f002 f858 	bl	8008fa8 <RCCEx_PLL3_Config>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006efe:	e00a      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f06:	e006      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006f08:	bf00      	nop
 8006f0a:	e004      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006f0c:	bf00      	nop
 8006f0e:	e002      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006f10:	bf00      	nop
 8006f12:	e000      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10e      	bne.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006f1e:	4b06      	ldr	r3, [pc, #24]	@ (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f22:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006f2e:	4a02      	ldr	r2, [pc, #8]	@ (8006f38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f30:	430b      	orrs	r3, r1
 8006f32:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f34:	e006      	b.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006f36:	bf00      	nop
 8006f38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006f50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f54:	2300      	movs	r3, #0
 8006f56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006f5a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006f5e:	460b      	mov	r3, r1
 8006f60:	4313      	orrs	r3, r2
 8006f62:	d037      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f6e:	d00e      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006f70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f74:	d816      	bhi.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d018      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006f7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f7e:	d111      	bne.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f80:	4bc4      	ldr	r3, [pc, #784]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f84:	4ac3      	ldr	r2, [pc, #780]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006f8c:	e00f      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f92:	3308      	adds	r3, #8
 8006f94:	2101      	movs	r1, #1
 8006f96:	4618      	mov	r0, r3
 8006f98:	f001 ff54 	bl	8008e44 <RCCEx_PLL2_Config>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006fa2:	e004      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006faa:	e000      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10a      	bne.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006fb6:	4bb7      	ldr	r3, [pc, #732]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fc4:	4ab3      	ldr	r2, [pc, #716]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fc6:	430b      	orrs	r3, r1
 8006fc8:	6513      	str	r3, [r2, #80]	@ 0x50
 8006fca:	e003      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fdc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006fe0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006fea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006fee:	460b      	mov	r3, r1
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	d039      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ffa:	2b03      	cmp	r3, #3
 8006ffc:	d81c      	bhi.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8007004 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007004:	08007041 	.word	0x08007041
 8007008:	08007015 	.word	0x08007015
 800700c:	08007023 	.word	0x08007023
 8007010:	08007041 	.word	0x08007041
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007014:	4b9f      	ldr	r3, [pc, #636]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007018:	4a9e      	ldr	r2, [pc, #632]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800701a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800701e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007020:	e00f      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007026:	3308      	adds	r3, #8
 8007028:	2102      	movs	r1, #2
 800702a:	4618      	mov	r0, r3
 800702c:	f001 ff0a 	bl	8008e44 <RCCEx_PLL2_Config>
 8007030:	4603      	mov	r3, r0
 8007032:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007036:	e004      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800703e:	e000      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007040:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007042:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10a      	bne.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800704a:	4b92      	ldr	r3, [pc, #584]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800704c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800704e:	f023 0103 	bic.w	r1, r3, #3
 8007052:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007056:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007058:	4a8e      	ldr	r2, [pc, #568]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800705a:	430b      	orrs	r3, r1
 800705c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800705e:	e003      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007060:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007064:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800706c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007070:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007074:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007078:	2300      	movs	r3, #0
 800707a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800707e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007082:	460b      	mov	r3, r1
 8007084:	4313      	orrs	r3, r2
 8007086:	f000 8099 	beq.w	80071bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800708a:	4b83      	ldr	r3, [pc, #524]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a82      	ldr	r2, [pc, #520]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007094:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007096:	f7fb f81d 	bl	80020d4 <HAL_GetTick>
 800709a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800709e:	e00b      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070a0:	f7fb f818 	bl	80020d4 <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	2b64      	cmp	r3, #100	@ 0x64
 80070ae:	d903      	bls.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80070b6:	e005      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80070b8:	4b77      	ldr	r3, [pc, #476]	@ (8007298 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d0ed      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80070c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d173      	bne.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80070cc:	4b71      	ldr	r3, [pc, #452]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80070d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80070d8:	4053      	eors	r3, r2
 80070da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d015      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070e2:	4b6c      	ldr	r3, [pc, #432]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070ea:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80070ee:	4b69      	ldr	r3, [pc, #420]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070f2:	4a68      	ldr	r2, [pc, #416]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070f8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80070fa:	4b66      	ldr	r3, [pc, #408]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070fe:	4a65      	ldr	r2, [pc, #404]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007100:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007104:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007106:	4a63      	ldr	r2, [pc, #396]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007108:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800710c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800710e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007112:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007116:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800711a:	d118      	bne.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800711c:	f7fa ffda 	bl	80020d4 <HAL_GetTick>
 8007120:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007124:	e00d      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007126:	f7fa ffd5 	bl	80020d4 <HAL_GetTick>
 800712a:	4602      	mov	r2, r0
 800712c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007130:	1ad2      	subs	r2, r2, r3
 8007132:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007136:	429a      	cmp	r2, r3
 8007138:	d903      	bls.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007140:	e005      	b.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007142:	4b54      	ldr	r3, [pc, #336]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007146:	f003 0302 	and.w	r3, r3, #2
 800714a:	2b00      	cmp	r3, #0
 800714c:	d0eb      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800714e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007152:	2b00      	cmp	r3, #0
 8007154:	d129      	bne.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800715a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800715e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007162:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007166:	d10e      	bne.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007168:	4b4a      	ldr	r3, [pc, #296]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007174:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007178:	091a      	lsrs	r2, r3, #4
 800717a:	4b48      	ldr	r3, [pc, #288]	@ (800729c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800717c:	4013      	ands	r3, r2
 800717e:	4a45      	ldr	r2, [pc, #276]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007180:	430b      	orrs	r3, r1
 8007182:	6113      	str	r3, [r2, #16]
 8007184:	e005      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007186:	4b43      	ldr	r3, [pc, #268]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	4a42      	ldr	r2, [pc, #264]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800718c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007190:	6113      	str	r3, [r2, #16]
 8007192:	4b40      	ldr	r3, [pc, #256]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007194:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800719a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800719e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071a2:	4a3c      	ldr	r2, [pc, #240]	@ (8007294 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071a4:	430b      	orrs	r3, r1
 80071a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80071a8:	e008      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80071b2:	e003      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80071bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c4:	f002 0301 	and.w	r3, r2, #1
 80071c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80071cc:	2300      	movs	r3, #0
 80071ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80071d2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80071d6:	460b      	mov	r3, r1
 80071d8:	4313      	orrs	r3, r2
 80071da:	f000 808f 	beq.w	80072fc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80071de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071e4:	2b28      	cmp	r3, #40	@ 0x28
 80071e6:	d871      	bhi.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80071e8:	a201      	add	r2, pc, #4	@ (adr r2, 80071f0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80071ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ee:	bf00      	nop
 80071f0:	080072d5 	.word	0x080072d5
 80071f4:	080072cd 	.word	0x080072cd
 80071f8:	080072cd 	.word	0x080072cd
 80071fc:	080072cd 	.word	0x080072cd
 8007200:	080072cd 	.word	0x080072cd
 8007204:	080072cd 	.word	0x080072cd
 8007208:	080072cd 	.word	0x080072cd
 800720c:	080072cd 	.word	0x080072cd
 8007210:	080072a1 	.word	0x080072a1
 8007214:	080072cd 	.word	0x080072cd
 8007218:	080072cd 	.word	0x080072cd
 800721c:	080072cd 	.word	0x080072cd
 8007220:	080072cd 	.word	0x080072cd
 8007224:	080072cd 	.word	0x080072cd
 8007228:	080072cd 	.word	0x080072cd
 800722c:	080072cd 	.word	0x080072cd
 8007230:	080072b7 	.word	0x080072b7
 8007234:	080072cd 	.word	0x080072cd
 8007238:	080072cd 	.word	0x080072cd
 800723c:	080072cd 	.word	0x080072cd
 8007240:	080072cd 	.word	0x080072cd
 8007244:	080072cd 	.word	0x080072cd
 8007248:	080072cd 	.word	0x080072cd
 800724c:	080072cd 	.word	0x080072cd
 8007250:	080072d5 	.word	0x080072d5
 8007254:	080072cd 	.word	0x080072cd
 8007258:	080072cd 	.word	0x080072cd
 800725c:	080072cd 	.word	0x080072cd
 8007260:	080072cd 	.word	0x080072cd
 8007264:	080072cd 	.word	0x080072cd
 8007268:	080072cd 	.word	0x080072cd
 800726c:	080072cd 	.word	0x080072cd
 8007270:	080072d5 	.word	0x080072d5
 8007274:	080072cd 	.word	0x080072cd
 8007278:	080072cd 	.word	0x080072cd
 800727c:	080072cd 	.word	0x080072cd
 8007280:	080072cd 	.word	0x080072cd
 8007284:	080072cd 	.word	0x080072cd
 8007288:	080072cd 	.word	0x080072cd
 800728c:	080072cd 	.word	0x080072cd
 8007290:	080072d5 	.word	0x080072d5
 8007294:	58024400 	.word	0x58024400
 8007298:	58024800 	.word	0x58024800
 800729c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072a4:	3308      	adds	r3, #8
 80072a6:	2101      	movs	r1, #1
 80072a8:	4618      	mov	r0, r3
 80072aa:	f001 fdcb 	bl	8008e44 <RCCEx_PLL2_Config>
 80072ae:	4603      	mov	r3, r0
 80072b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80072b4:	e00f      	b.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ba:	3328      	adds	r3, #40	@ 0x28
 80072bc:	2101      	movs	r1, #1
 80072be:	4618      	mov	r0, r3
 80072c0:	f001 fe72 	bl	8008fa8 <RCCEx_PLL3_Config>
 80072c4:	4603      	mov	r3, r0
 80072c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80072ca:	e004      	b.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80072d2:	e000      	b.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80072d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10a      	bne.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80072de:	4bbf      	ldr	r3, [pc, #764]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80072e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072e2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80072e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80072ec:	4abb      	ldr	r2, [pc, #748]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80072ee:	430b      	orrs	r3, r1
 80072f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80072f2:	e003      	b.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80072f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80072fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007304:	f002 0302 	and.w	r3, r2, #2
 8007308:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800730c:	2300      	movs	r3, #0
 800730e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007312:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007316:	460b      	mov	r3, r1
 8007318:	4313      	orrs	r3, r2
 800731a:	d041      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800731c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007322:	2b05      	cmp	r3, #5
 8007324:	d824      	bhi.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007326:	a201      	add	r2, pc, #4	@ (adr r2, 800732c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732c:	08007379 	.word	0x08007379
 8007330:	08007345 	.word	0x08007345
 8007334:	0800735b 	.word	0x0800735b
 8007338:	08007379 	.word	0x08007379
 800733c:	08007379 	.word	0x08007379
 8007340:	08007379 	.word	0x08007379
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007348:	3308      	adds	r3, #8
 800734a:	2101      	movs	r1, #1
 800734c:	4618      	mov	r0, r3
 800734e:	f001 fd79 	bl	8008e44 <RCCEx_PLL2_Config>
 8007352:	4603      	mov	r3, r0
 8007354:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007358:	e00f      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800735a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800735e:	3328      	adds	r3, #40	@ 0x28
 8007360:	2101      	movs	r1, #1
 8007362:	4618      	mov	r0, r3
 8007364:	f001 fe20 	bl	8008fa8 <RCCEx_PLL3_Config>
 8007368:	4603      	mov	r3, r0
 800736a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800736e:	e004      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007376:	e000      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007378:	bf00      	nop
    }

    if (ret == HAL_OK)
 800737a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10a      	bne.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007382:	4b96      	ldr	r3, [pc, #600]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007386:	f023 0107 	bic.w	r1, r3, #7
 800738a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800738e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007390:	4a92      	ldr	r2, [pc, #584]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007392:	430b      	orrs	r3, r1
 8007394:	6553      	str	r3, [r2, #84]	@ 0x54
 8007396:	e003      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007398:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800739c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80073a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a8:	f002 0304 	and.w	r3, r2, #4
 80073ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80073b0:	2300      	movs	r3, #0
 80073b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80073b6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80073ba:	460b      	mov	r3, r1
 80073bc:	4313      	orrs	r3, r2
 80073be:	d044      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80073c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073c8:	2b05      	cmp	r3, #5
 80073ca:	d825      	bhi.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80073cc:	a201      	add	r2, pc, #4	@ (adr r2, 80073d4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80073ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d2:	bf00      	nop
 80073d4:	08007421 	.word	0x08007421
 80073d8:	080073ed 	.word	0x080073ed
 80073dc:	08007403 	.word	0x08007403
 80073e0:	08007421 	.word	0x08007421
 80073e4:	08007421 	.word	0x08007421
 80073e8:	08007421 	.word	0x08007421
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073f0:	3308      	adds	r3, #8
 80073f2:	2101      	movs	r1, #1
 80073f4:	4618      	mov	r0, r3
 80073f6:	f001 fd25 	bl	8008e44 <RCCEx_PLL2_Config>
 80073fa:	4603      	mov	r3, r0
 80073fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007400:	e00f      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007406:	3328      	adds	r3, #40	@ 0x28
 8007408:	2101      	movs	r1, #1
 800740a:	4618      	mov	r0, r3
 800740c:	f001 fdcc 	bl	8008fa8 <RCCEx_PLL3_Config>
 8007410:	4603      	mov	r3, r0
 8007412:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007416:	e004      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800741e:	e000      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007422:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10b      	bne.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800742a:	4b6c      	ldr	r3, [pc, #432]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800742c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800742e:	f023 0107 	bic.w	r1, r3, #7
 8007432:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800743a:	4a68      	ldr	r2, [pc, #416]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800743c:	430b      	orrs	r3, r1
 800743e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007440:	e003      	b.n	800744a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007442:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007446:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800744a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800744e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007452:	f002 0320 	and.w	r3, r2, #32
 8007456:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800745a:	2300      	movs	r3, #0
 800745c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007460:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007464:	460b      	mov	r3, r1
 8007466:	4313      	orrs	r3, r2
 8007468:	d055      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800746a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800746e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007472:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007476:	d033      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007478:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800747c:	d82c      	bhi.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800747e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007482:	d02f      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007488:	d826      	bhi.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800748a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800748e:	d02b      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007490:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007494:	d820      	bhi.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007496:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800749a:	d012      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800749c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074a0:	d81a      	bhi.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d022      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80074a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074aa:	d115      	bne.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074b0:	3308      	adds	r3, #8
 80074b2:	2100      	movs	r1, #0
 80074b4:	4618      	mov	r0, r3
 80074b6:	f001 fcc5 	bl	8008e44 <RCCEx_PLL2_Config>
 80074ba:	4603      	mov	r3, r0
 80074bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80074c0:	e015      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074c6:	3328      	adds	r3, #40	@ 0x28
 80074c8:	2102      	movs	r1, #2
 80074ca:	4618      	mov	r0, r3
 80074cc:	f001 fd6c 	bl	8008fa8 <RCCEx_PLL3_Config>
 80074d0:	4603      	mov	r3, r0
 80074d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80074d6:	e00a      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80074de:	e006      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80074e0:	bf00      	nop
 80074e2:	e004      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80074e4:	bf00      	nop
 80074e6:	e002      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80074e8:	bf00      	nop
 80074ea:	e000      	b.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80074ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10b      	bne.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80074f6:	4b39      	ldr	r3, [pc, #228]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80074f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80074fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007502:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007506:	4a35      	ldr	r2, [pc, #212]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007508:	430b      	orrs	r3, r1
 800750a:	6553      	str	r3, [r2, #84]	@ 0x54
 800750c:	e003      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800750e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007512:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800751a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007522:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007526:	2300      	movs	r3, #0
 8007528:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800752c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007530:	460b      	mov	r3, r1
 8007532:	4313      	orrs	r3, r2
 8007534:	d058      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800753a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800753e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007542:	d033      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007544:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007548:	d82c      	bhi.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800754a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800754e:	d02f      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007554:	d826      	bhi.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007556:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800755a:	d02b      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800755c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007560:	d820      	bhi.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007562:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007566:	d012      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007568:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800756c:	d81a      	bhi.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800756e:	2b00      	cmp	r3, #0
 8007570:	d022      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007576:	d115      	bne.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800757c:	3308      	adds	r3, #8
 800757e:	2100      	movs	r1, #0
 8007580:	4618      	mov	r0, r3
 8007582:	f001 fc5f 	bl	8008e44 <RCCEx_PLL2_Config>
 8007586:	4603      	mov	r3, r0
 8007588:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800758c:	e015      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800758e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007592:	3328      	adds	r3, #40	@ 0x28
 8007594:	2102      	movs	r1, #2
 8007596:	4618      	mov	r0, r3
 8007598:	f001 fd06 	bl	8008fa8 <RCCEx_PLL3_Config>
 800759c:	4603      	mov	r3, r0
 800759e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80075a2:	e00a      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80075aa:	e006      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80075ac:	bf00      	nop
 80075ae:	e004      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80075b0:	bf00      	nop
 80075b2:	e002      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80075b4:	bf00      	nop
 80075b6:	e000      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80075b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d10e      	bne.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80075c2:	4b06      	ldr	r3, [pc, #24]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80075c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075c6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80075ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80075d2:	4a02      	ldr	r2, [pc, #8]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80075d4:	430b      	orrs	r3, r1
 80075d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80075d8:	e006      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80075da:	bf00      	nop
 80075dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80075e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80075f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075f8:	2300      	movs	r3, #0
 80075fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80075fe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007602:	460b      	mov	r3, r1
 8007604:	4313      	orrs	r3, r2
 8007606:	d055      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800760c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007610:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007614:	d033      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007616:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800761a:	d82c      	bhi.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800761c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007620:	d02f      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007622:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007626:	d826      	bhi.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007628:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800762c:	d02b      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800762e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007632:	d820      	bhi.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007634:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007638:	d012      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800763a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800763e:	d81a      	bhi.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007640:	2b00      	cmp	r3, #0
 8007642:	d022      	beq.n	800768a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007644:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007648:	d115      	bne.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800764a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800764e:	3308      	adds	r3, #8
 8007650:	2100      	movs	r1, #0
 8007652:	4618      	mov	r0, r3
 8007654:	f001 fbf6 	bl	8008e44 <RCCEx_PLL2_Config>
 8007658:	4603      	mov	r3, r0
 800765a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800765e:	e015      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007664:	3328      	adds	r3, #40	@ 0x28
 8007666:	2102      	movs	r1, #2
 8007668:	4618      	mov	r0, r3
 800766a:	f001 fc9d 	bl	8008fa8 <RCCEx_PLL3_Config>
 800766e:	4603      	mov	r3, r0
 8007670:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007674:	e00a      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800767c:	e006      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800767e:	bf00      	nop
 8007680:	e004      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007682:	bf00      	nop
 8007684:	e002      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007686:	bf00      	nop
 8007688:	e000      	b.n	800768c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800768a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800768c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10b      	bne.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007694:	4ba0      	ldr	r3, [pc, #640]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007698:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800769c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80076a4:	4a9c      	ldr	r2, [pc, #624]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80076a6:	430b      	orrs	r3, r1
 80076a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80076aa:	e003      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80076b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076bc:	f002 0308 	and.w	r3, r2, #8
 80076c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80076c4:	2300      	movs	r3, #0
 80076c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80076ca:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80076ce:	460b      	mov	r3, r1
 80076d0:	4313      	orrs	r3, r2
 80076d2:	d01e      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80076d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076e0:	d10c      	bne.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80076e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076e6:	3328      	adds	r3, #40	@ 0x28
 80076e8:	2102      	movs	r1, #2
 80076ea:	4618      	mov	r0, r3
 80076ec:	f001 fc5c 	bl	8008fa8 <RCCEx_PLL3_Config>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d002      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80076fc:	4b86      	ldr	r3, [pc, #536]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80076fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007700:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007708:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800770c:	4a82      	ldr	r2, [pc, #520]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800770e:	430b      	orrs	r3, r1
 8007710:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771a:	f002 0310 	and.w	r3, r2, #16
 800771e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007722:	2300      	movs	r3, #0
 8007724:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007728:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800772c:	460b      	mov	r3, r1
 800772e:	4313      	orrs	r3, r2
 8007730:	d01e      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007736:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800773a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800773e:	d10c      	bne.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007744:	3328      	adds	r3, #40	@ 0x28
 8007746:	2102      	movs	r1, #2
 8007748:	4618      	mov	r0, r3
 800774a:	f001 fc2d 	bl	8008fa8 <RCCEx_PLL3_Config>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d002      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800775a:	4b6f      	ldr	r3, [pc, #444]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800775c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800775e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007766:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800776a:	4a6b      	ldr	r2, [pc, #428]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800776c:	430b      	orrs	r3, r1
 800776e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007778:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800777c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800777e:	2300      	movs	r3, #0
 8007780:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007782:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007786:	460b      	mov	r3, r1
 8007788:	4313      	orrs	r3, r2
 800778a:	d03e      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800778c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007790:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007794:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007798:	d022      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800779a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800779e:	d81b      	bhi.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d003      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80077a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077a8:	d00b      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80077aa:	e015      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077b0:	3308      	adds	r3, #8
 80077b2:	2100      	movs	r1, #0
 80077b4:	4618      	mov	r0, r3
 80077b6:	f001 fb45 	bl	8008e44 <RCCEx_PLL2_Config>
 80077ba:	4603      	mov	r3, r0
 80077bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80077c0:	e00f      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80077c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077c6:	3328      	adds	r3, #40	@ 0x28
 80077c8:	2102      	movs	r1, #2
 80077ca:	4618      	mov	r0, r3
 80077cc:	f001 fbec 	bl	8008fa8 <RCCEx_PLL3_Config>
 80077d0:	4603      	mov	r3, r0
 80077d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80077d6:	e004      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80077de:	e000      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80077e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10b      	bne.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80077ea:	4b4b      	ldr	r3, [pc, #300]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077ee:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80077f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80077fa:	4a47      	ldr	r2, [pc, #284]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077fc:	430b      	orrs	r3, r1
 80077fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8007800:	e003      	b.n	800780a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007802:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007806:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800780a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800780e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007812:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007816:	673b      	str	r3, [r7, #112]	@ 0x70
 8007818:	2300      	movs	r3, #0
 800781a:	677b      	str	r3, [r7, #116]	@ 0x74
 800781c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007820:	460b      	mov	r3, r1
 8007822:	4313      	orrs	r3, r2
 8007824:	d03b      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800782a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800782e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007832:	d01f      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007834:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007838:	d818      	bhi.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800783a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800783e:	d003      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007840:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007844:	d007      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007846:	e011      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007848:	4b33      	ldr	r3, [pc, #204]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800784a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800784c:	4a32      	ldr	r2, [pc, #200]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800784e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007852:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007854:	e00f      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800785a:	3328      	adds	r3, #40	@ 0x28
 800785c:	2101      	movs	r1, #1
 800785e:	4618      	mov	r0, r3
 8007860:	f001 fba2 	bl	8008fa8 <RCCEx_PLL3_Config>
 8007864:	4603      	mov	r3, r0
 8007866:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800786a:	e004      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007872:	e000      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007876:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10b      	bne.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800787e:	4b26      	ldr	r3, [pc, #152]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007882:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800788a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800788e:	4a22      	ldr	r2, [pc, #136]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007890:	430b      	orrs	r3, r1
 8007892:	6553      	str	r3, [r2, #84]	@ 0x54
 8007894:	e003      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007896:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800789a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800789e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80078aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80078ac:	2300      	movs	r3, #0
 80078ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80078b0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80078b4:	460b      	mov	r3, r1
 80078b6:	4313      	orrs	r3, r2
 80078b8:	d034      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80078ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d003      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80078c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078c8:	d007      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80078ca:	e011      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078cc:	4b12      	ldr	r3, [pc, #72]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d0:	4a11      	ldr	r2, [pc, #68]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80078d8:	e00e      	b.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078de:	3308      	adds	r3, #8
 80078e0:	2102      	movs	r1, #2
 80078e2:	4618      	mov	r0, r3
 80078e4:	f001 faae 	bl	8008e44 <RCCEx_PLL2_Config>
 80078e8:	4603      	mov	r3, r0
 80078ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80078ee:	e003      	b.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80078f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10d      	bne.n	800791c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007900:	4b05      	ldr	r3, [pc, #20]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007904:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800790c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800790e:	4a02      	ldr	r2, [pc, #8]	@ (8007918 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007910:	430b      	orrs	r3, r1
 8007912:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007914:	e006      	b.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007916:	bf00      	nop
 8007918:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800791c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007920:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007930:	663b      	str	r3, [r7, #96]	@ 0x60
 8007932:	2300      	movs	r3, #0
 8007934:	667b      	str	r3, [r7, #100]	@ 0x64
 8007936:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800793a:	460b      	mov	r3, r1
 800793c:	4313      	orrs	r3, r2
 800793e:	d00c      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007944:	3328      	adds	r3, #40	@ 0x28
 8007946:	2102      	movs	r1, #2
 8007948:	4618      	mov	r0, r3
 800794a:	f001 fb2d 	bl	8008fa8 <RCCEx_PLL3_Config>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d002      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800795a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800795e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007962:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007966:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007968:	2300      	movs	r3, #0
 800796a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800796c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007970:	460b      	mov	r3, r1
 8007972:	4313      	orrs	r3, r2
 8007974:	d036      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800797a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800797c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007980:	d018      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007982:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007986:	d811      	bhi.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007988:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800798c:	d014      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800798e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007992:	d80b      	bhi.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007994:	2b00      	cmp	r3, #0
 8007996:	d011      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007998:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800799c:	d106      	bne.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800799e:	4bb7      	ldr	r3, [pc, #732]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a2:	4ab6      	ldr	r2, [pc, #728]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80079aa:	e008      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80079b2:	e004      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80079b4:	bf00      	nop
 80079b6:	e002      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80079b8:	bf00      	nop
 80079ba:	e000      	b.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80079bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10a      	bne.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80079c6:	4bad      	ldr	r3, [pc, #692]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80079ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079d4:	4aa9      	ldr	r2, [pc, #676]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079d6:	430b      	orrs	r3, r1
 80079d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80079da:	e003      	b.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80079e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80079e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ec:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80079f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80079f2:	2300      	movs	r3, #0
 80079f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80079f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80079fa:	460b      	mov	r3, r1
 80079fc:	4313      	orrs	r3, r2
 80079fe:	d009      	beq.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007a00:	4b9e      	ldr	r3, [pc, #632]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a04:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a0e:	4a9b      	ldr	r2, [pc, #620]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a10:	430b      	orrs	r3, r1
 8007a12:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007a20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a22:	2300      	movs	r3, #0
 8007a24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a26:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	d009      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007a30:	4b92      	ldr	r3, [pc, #584]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a34:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007a3e:	4a8f      	ldr	r2, [pc, #572]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a40:	430b      	orrs	r3, r1
 8007a42:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007a50:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a52:	2300      	movs	r3, #0
 8007a54:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a56:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	d00e      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a60:	4b86      	ldr	r3, [pc, #536]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	4a85      	ldr	r2, [pc, #532]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a66:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007a6a:	6113      	str	r3, [r2, #16]
 8007a6c:	4b83      	ldr	r3, [pc, #524]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a6e:	6919      	ldr	r1, [r3, #16]
 8007a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a74:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007a78:	4a80      	ldr	r2, [pc, #512]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a7a:	430b      	orrs	r3, r1
 8007a7c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a86:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a90:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007a94:	460b      	mov	r3, r1
 8007a96:	4313      	orrs	r3, r2
 8007a98:	d009      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007a9a:	4b78      	ldr	r3, [pc, #480]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a9e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aa8:	4a74      	ldr	r2, [pc, #464]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007aaa:	430b      	orrs	r3, r1
 8007aac:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007aba:	633b      	str	r3, [r7, #48]	@ 0x30
 8007abc:	2300      	movs	r3, #0
 8007abe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ac0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	d00a      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007aca:	4b6c      	ldr	r3, [pc, #432]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ace:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ada:	4a68      	ldr	r2, [pc, #416]	@ (8007c7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007adc:	430b      	orrs	r3, r1
 8007ade:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae8:	2100      	movs	r1, #0
 8007aea:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007aec:	f003 0301 	and.w	r3, r3, #1
 8007af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007af2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007af6:	460b      	mov	r3, r1
 8007af8:	4313      	orrs	r3, r2
 8007afa:	d011      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b00:	3308      	adds	r3, #8
 8007b02:	2100      	movs	r1, #0
 8007b04:	4618      	mov	r0, r3
 8007b06:	f001 f99d 	bl	8008e44 <RCCEx_PLL2_Config>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007b10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d003      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b28:	2100      	movs	r1, #0
 8007b2a:	6239      	str	r1, [r7, #32]
 8007b2c:	f003 0302 	and.w	r3, r3, #2
 8007b30:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b32:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007b36:	460b      	mov	r3, r1
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	d011      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b40:	3308      	adds	r3, #8
 8007b42:	2101      	movs	r1, #1
 8007b44:	4618      	mov	r0, r3
 8007b46:	f001 f97d 	bl	8008e44 <RCCEx_PLL2_Config>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007b50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d003      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b68:	2100      	movs	r1, #0
 8007b6a:	61b9      	str	r1, [r7, #24]
 8007b6c:	f003 0304 	and.w	r3, r3, #4
 8007b70:	61fb      	str	r3, [r7, #28]
 8007b72:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007b76:	460b      	mov	r3, r1
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	d011      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b80:	3308      	adds	r3, #8
 8007b82:	2102      	movs	r1, #2
 8007b84:	4618      	mov	r0, r3
 8007b86:	f001 f95d 	bl	8008e44 <RCCEx_PLL2_Config>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007b90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d003      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba8:	2100      	movs	r1, #0
 8007baa:	6139      	str	r1, [r7, #16]
 8007bac:	f003 0308 	and.w	r3, r3, #8
 8007bb0:	617b      	str	r3, [r7, #20]
 8007bb2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	d011      	beq.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc0:	3328      	adds	r3, #40	@ 0x28
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f001 f9ef 	bl	8008fa8 <RCCEx_PLL3_Config>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007bd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d003      	beq.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007bdc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be8:	2100      	movs	r1, #0
 8007bea:	60b9      	str	r1, [r7, #8]
 8007bec:	f003 0310 	and.w	r3, r3, #16
 8007bf0:	60fb      	str	r3, [r7, #12]
 8007bf2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	d011      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c00:	3328      	adds	r3, #40	@ 0x28
 8007c02:	2101      	movs	r1, #1
 8007c04:	4618      	mov	r0, r3
 8007c06:	f001 f9cf 	bl	8008fa8 <RCCEx_PLL3_Config>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007c10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d003      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c28:	2100      	movs	r1, #0
 8007c2a:	6039      	str	r1, [r7, #0]
 8007c2c:	f003 0320 	and.w	r3, r3, #32
 8007c30:	607b      	str	r3, [r7, #4]
 8007c32:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007c36:	460b      	mov	r3, r1
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	d011      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c40:	3328      	adds	r3, #40	@ 0x28
 8007c42:	2102      	movs	r1, #2
 8007c44:	4618      	mov	r0, r3
 8007c46:	f001 f9af 	bl	8008fa8 <RCCEx_PLL3_Config>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007c50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d003      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007c5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007c60:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	e000      	b.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007c74:	46bd      	mov	sp, r7
 8007c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c7a:	bf00      	nop
 8007c7c:	58024400 	.word	0x58024400

08007c80 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b090      	sub	sp, #64	@ 0x40
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007c8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c8e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007c92:	430b      	orrs	r3, r1
 8007c94:	f040 8094 	bne.w	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007c98:	4b9b      	ldr	r3, [pc, #620]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007c9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c9c:	f003 0307 	and.w	r3, r3, #7
 8007ca0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca4:	2b04      	cmp	r3, #4
 8007ca6:	f200 8087 	bhi.w	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007caa:	a201      	add	r2, pc, #4	@ (adr r2, 8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb0:	08007cc5 	.word	0x08007cc5
 8007cb4:	08007ced 	.word	0x08007ced
 8007cb8:	08007d15 	.word	0x08007d15
 8007cbc:	08007db1 	.word	0x08007db1
 8007cc0:	08007d3d 	.word	0x08007d3d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007cc4:	4b90      	ldr	r3, [pc, #576]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ccc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007cd0:	d108      	bne.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 ff62 	bl	8008ba0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ce0:	f000 bc93 	b.w	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ce8:	f000 bc8f 	b.w	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cec:	4b86      	ldr	r3, [pc, #536]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cf8:	d108      	bne.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cfa:	f107 0318 	add.w	r3, r7, #24
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 fca6 	bl	8008650 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d08:	f000 bc7f 	b.w	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d10:	f000 bc7b 	b.w	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d14:	4b7c      	ldr	r3, [pc, #496]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d20:	d108      	bne.n	8007d34 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d22:	f107 030c 	add.w	r3, r7, #12
 8007d26:	4618      	mov	r0, r3
 8007d28:	f000 fde6 	bl	80088f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d30:	f000 bc6b 	b.w	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d34:	2300      	movs	r3, #0
 8007d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d38:	f000 bc67 	b.w	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d3c:	4b72      	ldr	r3, [pc, #456]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007d44:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d46:	4b70      	ldr	r3, [pc, #448]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 0304 	and.w	r3, r3, #4
 8007d4e:	2b04      	cmp	r3, #4
 8007d50:	d10c      	bne.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d109      	bne.n	8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d58:	4b6b      	ldr	r3, [pc, #428]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	08db      	lsrs	r3, r3, #3
 8007d5e:	f003 0303 	and.w	r3, r3, #3
 8007d62:	4a6a      	ldr	r2, [pc, #424]	@ (8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007d64:	fa22 f303 	lsr.w	r3, r2, r3
 8007d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d6a:	e01f      	b.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d6c:	4b66      	ldr	r3, [pc, #408]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d78:	d106      	bne.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d80:	d102      	bne.n	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007d82:	4b63      	ldr	r3, [pc, #396]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d86:	e011      	b.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d88:	4b5f      	ldr	r3, [pc, #380]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d94:	d106      	bne.n	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d9c:	d102      	bne.n	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007d9e:	4b5d      	ldr	r3, [pc, #372]	@ (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007da2:	e003      	b.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007da4:	2300      	movs	r3, #0
 8007da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007da8:	f000 bc2f 	b.w	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007dac:	f000 bc2d 	b.w	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007db0:	4b59      	ldr	r3, [pc, #356]	@ (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007db4:	f000 bc29 	b.w	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007db8:	2300      	movs	r3, #0
 8007dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dbc:	f000 bc25 	b.w	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007dc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dc4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007dc8:	430b      	orrs	r3, r1
 8007dca:	f040 80a7 	bne.w	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007dce:	4b4e      	ldr	r3, [pc, #312]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dd2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007dd6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dda:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007dde:	d054      	beq.n	8007e8a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8007de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007de6:	f200 808b 	bhi.w	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007df0:	f000 8083 	beq.w	8007efa <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007dfa:	f200 8081 	bhi.w	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e04:	d02f      	beq.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e0c:	d878      	bhi.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d004      	beq.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8007e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e1a:	d012      	beq.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8007e1c:	e070      	b.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e1e:	4b3a      	ldr	r3, [pc, #232]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e2a:	d107      	bne.n	8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e30:	4618      	mov	r0, r3
 8007e32:	f000 feb5 	bl	8008ba0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e3a:	e3e6      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e40:	e3e3      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e42:	4b31      	ldr	r3, [pc, #196]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e4e:	d107      	bne.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e50:	f107 0318 	add.w	r3, r7, #24
 8007e54:	4618      	mov	r0, r3
 8007e56:	f000 fbfb 	bl	8008650 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e5e:	e3d4      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e60:	2300      	movs	r3, #0
 8007e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e64:	e3d1      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e66:	4b28      	ldr	r3, [pc, #160]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e72:	d107      	bne.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e74:	f107 030c 	add.w	r3, r7, #12
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 fd3d 	bl	80088f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e82:	e3c2      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e84:	2300      	movs	r3, #0
 8007e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e88:	e3bf      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007e92:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e94:	4b1c      	ldr	r3, [pc, #112]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f003 0304 	and.w	r3, r3, #4
 8007e9c:	2b04      	cmp	r3, #4
 8007e9e:	d10c      	bne.n	8007eba <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8007ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d109      	bne.n	8007eba <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ea6:	4b18      	ldr	r3, [pc, #96]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	08db      	lsrs	r3, r3, #3
 8007eac:	f003 0303 	and.w	r3, r3, #3
 8007eb0:	4a16      	ldr	r2, [pc, #88]	@ (8007f0c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8007eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007eb8:	e01e      	b.n	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007eba:	4b13      	ldr	r3, [pc, #76]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ec2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ec6:	d106      	bne.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8007ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ece:	d102      	bne.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ed4:	e010      	b.n	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ede:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ee2:	d106      	bne.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ee6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007eea:	d102      	bne.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007eec:	4b09      	ldr	r3, [pc, #36]	@ (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ef0:	e002      	b.n	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007ef6:	e388      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007ef8:	e387      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007efa:	4b07      	ldr	r3, [pc, #28]	@ (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007efe:	e384      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007f00:	2300      	movs	r3, #0
 8007f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f04:	e381      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007f06:	bf00      	nop
 8007f08:	58024400 	.word	0x58024400
 8007f0c:	03d09000 	.word	0x03d09000
 8007f10:	003d0900 	.word	0x003d0900
 8007f14:	016e3600 	.word	0x016e3600
 8007f18:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007f1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f20:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007f24:	430b      	orrs	r3, r1
 8007f26:	f040 809c 	bne.w	8008062 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007f2a:	4b9e      	ldr	r3, [pc, #632]	@ (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f2e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007f32:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f3a:	d054      	beq.n	8007fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f42:	f200 808b 	bhi.w	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f48:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007f4c:	f000 8083 	beq.w	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8007f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f52:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007f56:	f200 8081 	bhi.w	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f60:	d02f      	beq.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8007f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f68:	d878      	bhi.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d004      	beq.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f76:	d012      	beq.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8007f78:	e070      	b.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f7a:	4b8a      	ldr	r3, [pc, #552]	@ (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f86:	d107      	bne.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f000 fe07 	bl	8008ba0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f96:	e338      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007f9c:	e335      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f9e:	4b81      	ldr	r3, [pc, #516]	@ (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fa6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007faa:	d107      	bne.n	8007fbc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fac:	f107 0318 	add.w	r3, r7, #24
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f000 fb4d 	bl	8008650 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fba:	e326      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fc0:	e323      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fc2:	4b78      	ldr	r3, [pc, #480]	@ (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fce:	d107      	bne.n	8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fd0:	f107 030c 	add.w	r3, r7, #12
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f000 fc8f 	bl	80088f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fde:	e314      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fe4:	e311      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fe6:	4b6f      	ldr	r3, [pc, #444]	@ (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007fee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ff0:	4b6c      	ldr	r3, [pc, #432]	@ (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 0304 	and.w	r3, r3, #4
 8007ff8:	2b04      	cmp	r3, #4
 8007ffa:	d10c      	bne.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d109      	bne.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008002:	4b68      	ldr	r3, [pc, #416]	@ (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	08db      	lsrs	r3, r3, #3
 8008008:	f003 0303 	and.w	r3, r3, #3
 800800c:	4a66      	ldr	r2, [pc, #408]	@ (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800800e:	fa22 f303 	lsr.w	r3, r2, r3
 8008012:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008014:	e01e      	b.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008016:	4b63      	ldr	r3, [pc, #396]	@ (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800801e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008022:	d106      	bne.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008026:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800802a:	d102      	bne.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800802c:	4b5f      	ldr	r3, [pc, #380]	@ (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800802e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008030:	e010      	b.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008032:	4b5c      	ldr	r3, [pc, #368]	@ (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800803a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800803e:	d106      	bne.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8008040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008042:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008046:	d102      	bne.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008048:	4b59      	ldr	r3, [pc, #356]	@ (80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800804a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800804c:	e002      	b.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800804e:	2300      	movs	r3, #0
 8008050:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008052:	e2da      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008054:	e2d9      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008056:	4b57      	ldr	r3, [pc, #348]	@ (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800805a:	e2d6      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800805c:	2300      	movs	r3, #0
 800805e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008060:	e2d3      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008062:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008066:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800806a:	430b      	orrs	r3, r1
 800806c:	f040 80a7 	bne.w	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008070:	4b4c      	ldr	r3, [pc, #304]	@ (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008074:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008078:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800807a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800807c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008080:	d055      	beq.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8008082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008084:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008088:	f200 8096 	bhi.w	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800808c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800808e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008092:	f000 8084 	beq.w	800819e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008098:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800809c:	f200 808c 	bhi.w	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80080a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080a6:	d030      	beq.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80080a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080ae:	f200 8083 	bhi.w	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80080b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d004      	beq.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80080b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080be:	d012      	beq.n	80080e6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80080c0:	e07a      	b.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080c2:	4b38      	ldr	r3, [pc, #224]	@ (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080ce:	d107      	bne.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080d4:	4618      	mov	r0, r3
 80080d6:	f000 fd63 	bl	8008ba0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080de:	e294      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080e0:	2300      	movs	r3, #0
 80080e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080e4:	e291      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080e6:	4b2f      	ldr	r3, [pc, #188]	@ (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080f2:	d107      	bne.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080f4:	f107 0318 	add.w	r3, r7, #24
 80080f8:	4618      	mov	r0, r3
 80080fa:	f000 faa9 	bl	8008650 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008102:	e282      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008104:	2300      	movs	r3, #0
 8008106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008108:	e27f      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800810a:	4b26      	ldr	r3, [pc, #152]	@ (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008112:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008116:	d107      	bne.n	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008118:	f107 030c 	add.w	r3, r7, #12
 800811c:	4618      	mov	r0, r3
 800811e:	f000 fbeb 	bl	80088f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008126:	e270      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008128:	2300      	movs	r3, #0
 800812a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800812c:	e26d      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800812e:	4b1d      	ldr	r3, [pc, #116]	@ (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008132:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008136:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008138:	4b1a      	ldr	r3, [pc, #104]	@ (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 0304 	and.w	r3, r3, #4
 8008140:	2b04      	cmp	r3, #4
 8008142:	d10c      	bne.n	800815e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8008144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008146:	2b00      	cmp	r3, #0
 8008148:	d109      	bne.n	800815e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800814a:	4b16      	ldr	r3, [pc, #88]	@ (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	08db      	lsrs	r3, r3, #3
 8008150:	f003 0303 	and.w	r3, r3, #3
 8008154:	4a14      	ldr	r2, [pc, #80]	@ (80081a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008156:	fa22 f303 	lsr.w	r3, r2, r3
 800815a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800815c:	e01e      	b.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800815e:	4b11      	ldr	r3, [pc, #68]	@ (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008166:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800816a:	d106      	bne.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800816c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800816e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008172:	d102      	bne.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008174:	4b0d      	ldr	r3, [pc, #52]	@ (80081ac <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008176:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008178:	e010      	b.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800817a:	4b0a      	ldr	r3, [pc, #40]	@ (80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008182:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008186:	d106      	bne.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800818a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800818e:	d102      	bne.n	8008196 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008190:	4b07      	ldr	r3, [pc, #28]	@ (80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008192:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008194:	e002      	b.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008196:	2300      	movs	r3, #0
 8008198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800819a:	e236      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800819c:	e235      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800819e:	4b05      	ldr	r3, [pc, #20]	@ (80081b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80081a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081a2:	e232      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80081a4:	58024400 	.word	0x58024400
 80081a8:	03d09000 	.word	0x03d09000
 80081ac:	003d0900 	.word	0x003d0900
 80081b0:	016e3600 	.word	0x016e3600
 80081b4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80081b8:	2300      	movs	r3, #0
 80081ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081bc:	e225      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80081be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081c2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80081c6:	430b      	orrs	r3, r1
 80081c8:	f040 8085 	bne.w	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80081cc:	4b9c      	ldr	r3, [pc, #624]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80081ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081d0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80081d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80081d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80081dc:	d06b      	beq.n	80082b6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80081de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80081e4:	d874      	bhi.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80081e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80081ec:	d056      	beq.n	800829c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80081ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80081f4:	d86c      	bhi.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80081f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80081fc:	d03b      	beq.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80081fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008200:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008204:	d864      	bhi.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008208:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800820c:	d021      	beq.n	8008252 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800820e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008210:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008214:	d85c      	bhi.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008218:	2b00      	cmp	r3, #0
 800821a:	d004      	beq.n	8008226 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800821c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800821e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008222:	d004      	beq.n	800822e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8008224:	e054      	b.n	80082d0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008226:	f7fe fb5f 	bl	80068e8 <HAL_RCC_GetPCLK1Freq>
 800822a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800822c:	e1ed      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800822e:	4b84      	ldr	r3, [pc, #528]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008236:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800823a:	d107      	bne.n	800824c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800823c:	f107 0318 	add.w	r3, r7, #24
 8008240:	4618      	mov	r0, r3
 8008242:	f000 fa05 	bl	8008650 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800824a:	e1de      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800824c:	2300      	movs	r3, #0
 800824e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008250:	e1db      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008252:	4b7b      	ldr	r3, [pc, #492]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800825a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800825e:	d107      	bne.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008260:	f107 030c 	add.w	r3, r7, #12
 8008264:	4618      	mov	r0, r3
 8008266:	f000 fb47 	bl	80088f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800826e:	e1cc      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008270:	2300      	movs	r3, #0
 8008272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008274:	e1c9      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008276:	4b72      	ldr	r3, [pc, #456]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 0304 	and.w	r3, r3, #4
 800827e:	2b04      	cmp	r3, #4
 8008280:	d109      	bne.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008282:	4b6f      	ldr	r3, [pc, #444]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	08db      	lsrs	r3, r3, #3
 8008288:	f003 0303 	and.w	r3, r3, #3
 800828c:	4a6d      	ldr	r2, [pc, #436]	@ (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800828e:	fa22 f303 	lsr.w	r3, r2, r3
 8008292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008294:	e1b9      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008296:	2300      	movs	r3, #0
 8008298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800829a:	e1b6      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800829c:	4b68      	ldr	r3, [pc, #416]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082a8:	d102      	bne.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80082aa:	4b67      	ldr	r3, [pc, #412]	@ (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80082ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082ae:	e1ac      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80082b0:	2300      	movs	r3, #0
 80082b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082b4:	e1a9      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80082b6:	4b62      	ldr	r3, [pc, #392]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082c2:	d102      	bne.n	80082ca <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80082c4:	4b61      	ldr	r3, [pc, #388]	@ (800844c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80082c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082c8:	e19f      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80082ca:	2300      	movs	r3, #0
 80082cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082ce:	e19c      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80082d0:	2300      	movs	r3, #0
 80082d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082d4:	e199      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80082d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082da:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80082de:	430b      	orrs	r3, r1
 80082e0:	d173      	bne.n	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80082e2:	4b57      	ldr	r3, [pc, #348]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80082e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80082ea:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80082ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082f2:	d02f      	beq.n	8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80082f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082fa:	d863      	bhi.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80082fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d004      	beq.n	800830c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8008302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008308:	d012      	beq.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800830a:	e05b      	b.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800830c:	4b4c      	ldr	r3, [pc, #304]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008314:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008318:	d107      	bne.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800831a:	f107 0318 	add.w	r3, r7, #24
 800831e:	4618      	mov	r0, r3
 8008320:	f000 f996 	bl	8008650 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008328:	e16f      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800832a:	2300      	movs	r3, #0
 800832c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800832e:	e16c      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008330:	4b43      	ldr	r3, [pc, #268]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008338:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800833c:	d107      	bne.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800833e:	f107 030c 	add.w	r3, r7, #12
 8008342:	4618      	mov	r0, r3
 8008344:	f000 fad8 	bl	80088f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800834c:	e15d      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800834e:	2300      	movs	r3, #0
 8008350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008352:	e15a      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008354:	4b3a      	ldr	r3, [pc, #232]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008358:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800835c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800835e:	4b38      	ldr	r3, [pc, #224]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 0304 	and.w	r3, r3, #4
 8008366:	2b04      	cmp	r3, #4
 8008368:	d10c      	bne.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800836a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800836c:	2b00      	cmp	r3, #0
 800836e:	d109      	bne.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008370:	4b33      	ldr	r3, [pc, #204]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	08db      	lsrs	r3, r3, #3
 8008376:	f003 0303 	and.w	r3, r3, #3
 800837a:	4a32      	ldr	r2, [pc, #200]	@ (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800837c:	fa22 f303 	lsr.w	r3, r2, r3
 8008380:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008382:	e01e      	b.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008384:	4b2e      	ldr	r3, [pc, #184]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800838c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008390:	d106      	bne.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008394:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008398:	d102      	bne.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800839a:	4b2b      	ldr	r3, [pc, #172]	@ (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800839c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800839e:	e010      	b.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80083a0:	4b27      	ldr	r3, [pc, #156]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083ac:	d106      	bne.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80083ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083b4:	d102      	bne.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80083b6:	4b25      	ldr	r3, [pc, #148]	@ (800844c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80083b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80083ba:	e002      	b.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80083bc:	2300      	movs	r3, #0
 80083be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80083c0:	e123      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80083c2:	e122      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80083c4:	2300      	movs	r3, #0
 80083c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083c8:	e11f      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80083ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083ce:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80083d2:	430b      	orrs	r3, r1
 80083d4:	d13c      	bne.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80083d6:	4b1a      	ldr	r3, [pc, #104]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80083d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80083de:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80083e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d004      	beq.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80083e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083ec:	d012      	beq.n	8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80083ee:	e023      	b.n	8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80083f0:	4b13      	ldr	r3, [pc, #76]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083fc:	d107      	bne.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008402:	4618      	mov	r0, r3
 8008404:	f000 fbcc 	bl	8008ba0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800840a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800840c:	e0fd      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800840e:	2300      	movs	r3, #0
 8008410:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008412:	e0fa      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008414:	4b0a      	ldr	r3, [pc, #40]	@ (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800841c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008420:	d107      	bne.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008422:	f107 0318 	add.w	r3, r7, #24
 8008426:	4618      	mov	r0, r3
 8008428:	f000 f912 	bl	8008650 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800842c:	6a3b      	ldr	r3, [r7, #32]
 800842e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008430:	e0eb      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008432:	2300      	movs	r3, #0
 8008434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008436:	e0e8      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008438:	2300      	movs	r3, #0
 800843a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800843c:	e0e5      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800843e:	bf00      	nop
 8008440:	58024400 	.word	0x58024400
 8008444:	03d09000 	.word	0x03d09000
 8008448:	003d0900 	.word	0x003d0900
 800844c:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008450:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008454:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008458:	430b      	orrs	r3, r1
 800845a:	f040 8085 	bne.w	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800845e:	4b6d      	ldr	r3, [pc, #436]	@ (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008462:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008466:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800846a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800846e:	d06b      	beq.n	8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008472:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008476:	d874      	bhi.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800847a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800847e:	d056      	beq.n	800852e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008486:	d86c      	bhi.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800848a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800848e:	d03b      	beq.n	8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008492:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008496:	d864      	bhi.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800849a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800849e:	d021      	beq.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80084a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084a6:	d85c      	bhi.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80084a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d004      	beq.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80084ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084b4:	d004      	beq.n	80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80084b6:	e054      	b.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80084b8:	f000 f8b4 	bl	8008624 <HAL_RCCEx_GetD3PCLK1Freq>
 80084bc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80084be:	e0a4      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084c0:	4b54      	ldr	r3, [pc, #336]	@ (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084cc:	d107      	bne.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084ce:	f107 0318 	add.w	r3, r7, #24
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 f8bc 	bl	8008650 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084dc:	e095      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084de:	2300      	movs	r3, #0
 80084e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084e2:	e092      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084e4:	4b4b      	ldr	r3, [pc, #300]	@ (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084f0:	d107      	bne.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084f2:	f107 030c 	add.w	r3, r7, #12
 80084f6:	4618      	mov	r0, r3
 80084f8:	f000 f9fe 	bl	80088f8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008500:	e083      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008502:	2300      	movs	r3, #0
 8008504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008506:	e080      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008508:	4b42      	ldr	r3, [pc, #264]	@ (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0304 	and.w	r3, r3, #4
 8008510:	2b04      	cmp	r3, #4
 8008512:	d109      	bne.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008514:	4b3f      	ldr	r3, [pc, #252]	@ (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	08db      	lsrs	r3, r3, #3
 800851a:	f003 0303 	and.w	r3, r3, #3
 800851e:	4a3e      	ldr	r2, [pc, #248]	@ (8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008520:	fa22 f303 	lsr.w	r3, r2, r3
 8008524:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008526:	e070      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008528:	2300      	movs	r3, #0
 800852a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800852c:	e06d      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800852e:	4b39      	ldr	r3, [pc, #228]	@ (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008536:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800853a:	d102      	bne.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800853c:	4b37      	ldr	r3, [pc, #220]	@ (800861c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800853e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008540:	e063      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008542:	2300      	movs	r3, #0
 8008544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008546:	e060      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008548:	4b32      	ldr	r3, [pc, #200]	@ (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008550:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008554:	d102      	bne.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8008556:	4b32      	ldr	r3, [pc, #200]	@ (8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800855a:	e056      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800855c:	2300      	movs	r3, #0
 800855e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008560:	e053      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008562:	2300      	movs	r3, #0
 8008564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008566:	e050      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008568:	e9d7 2300 	ldrd	r2, r3, [r7]
 800856c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008570:	430b      	orrs	r3, r1
 8008572:	d148      	bne.n	8008606 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008574:	4b27      	ldr	r3, [pc, #156]	@ (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008578:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800857c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800857e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008580:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008584:	d02a      	beq.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008588:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800858c:	d838      	bhi.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800858e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008590:	2b00      	cmp	r3, #0
 8008592:	d004      	beq.n	800859e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008596:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800859a:	d00d      	beq.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800859c:	e030      	b.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800859e:	4b1d      	ldr	r3, [pc, #116]	@ (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085aa:	d102      	bne.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80085ac:	4b1c      	ldr	r3, [pc, #112]	@ (8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80085ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085b0:	e02b      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085b2:	2300      	movs	r3, #0
 80085b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085b6:	e028      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80085b8:	4b16      	ldr	r3, [pc, #88]	@ (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80085c4:	d107      	bne.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085ca:	4618      	mov	r0, r3
 80085cc:	f000 fae8 	bl	8008ba0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085d4:	e019      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085d6:	2300      	movs	r3, #0
 80085d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085da:	e016      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085dc:	4b0d      	ldr	r3, [pc, #52]	@ (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085e8:	d107      	bne.n	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085ea:	f107 0318 	add.w	r3, r7, #24
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 f82e 	bl	8008650 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085f8:	e007      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085fa:	2300      	movs	r3, #0
 80085fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085fe:	e004      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008600:	2300      	movs	r3, #0
 8008602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008604:	e001      	b.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8008606:	2300      	movs	r3, #0
 8008608:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800860a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800860c:	4618      	mov	r0, r3
 800860e:	3740      	adds	r7, #64	@ 0x40
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	58024400 	.word	0x58024400
 8008618:	03d09000 	.word	0x03d09000
 800861c:	003d0900 	.word	0x003d0900
 8008620:	016e3600 	.word	0x016e3600

08008624 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008628:	f7fe f92e 	bl	8006888 <HAL_RCC_GetHCLKFreq>
 800862c:	4602      	mov	r2, r0
 800862e:	4b06      	ldr	r3, [pc, #24]	@ (8008648 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	091b      	lsrs	r3, r3, #4
 8008634:	f003 0307 	and.w	r3, r3, #7
 8008638:	4904      	ldr	r1, [pc, #16]	@ (800864c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800863a:	5ccb      	ldrb	r3, [r1, r3]
 800863c:	f003 031f 	and.w	r3, r3, #31
 8008640:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008644:	4618      	mov	r0, r3
 8008646:	bd80      	pop	{r7, pc}
 8008648:	58024400 	.word	0x58024400
 800864c:	0800c5e0 	.word	0x0800c5e0

08008650 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008650:	b480      	push	{r7}
 8008652:	b089      	sub	sp, #36	@ 0x24
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008658:	4ba1      	ldr	r3, [pc, #644]	@ (80088e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800865a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800865c:	f003 0303 	and.w	r3, r3, #3
 8008660:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008662:	4b9f      	ldr	r3, [pc, #636]	@ (80088e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008666:	0b1b      	lsrs	r3, r3, #12
 8008668:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800866c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800866e:	4b9c      	ldr	r3, [pc, #624]	@ (80088e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008672:	091b      	lsrs	r3, r3, #4
 8008674:	f003 0301 	and.w	r3, r3, #1
 8008678:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800867a:	4b99      	ldr	r3, [pc, #612]	@ (80088e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800867c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800867e:	08db      	lsrs	r3, r3, #3
 8008680:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008684:	693a      	ldr	r2, [r7, #16]
 8008686:	fb02 f303 	mul.w	r3, r2, r3
 800868a:	ee07 3a90 	vmov	s15, r3
 800868e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008692:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	2b00      	cmp	r3, #0
 800869a:	f000 8111 	beq.w	80088c0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	f000 8083 	beq.w	80087ac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	f200 80a1 	bhi.w	80087f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d003      	beq.n	80086bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d056      	beq.n	8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80086ba:	e099      	b.n	80087f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086bc:	4b88      	ldr	r3, [pc, #544]	@ (80088e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 0320 	and.w	r3, r3, #32
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d02d      	beq.n	8008724 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086c8:	4b85      	ldr	r3, [pc, #532]	@ (80088e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	08db      	lsrs	r3, r3, #3
 80086ce:	f003 0303 	and.w	r3, r3, #3
 80086d2:	4a84      	ldr	r2, [pc, #528]	@ (80088e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80086d4:	fa22 f303 	lsr.w	r3, r2, r3
 80086d8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	ee07 3a90 	vmov	s15, r3
 80086e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	ee07 3a90 	vmov	s15, r3
 80086ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086f2:	4b7b      	ldr	r3, [pc, #492]	@ (80088e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086fa:	ee07 3a90 	vmov	s15, r3
 80086fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008702:	ed97 6a03 	vldr	s12, [r7, #12]
 8008706:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80088e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800870a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800870e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008712:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800871a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800871e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008722:	e087      	b.n	8008834 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	ee07 3a90 	vmov	s15, r3
 800872a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800872e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80088ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008736:	4b6a      	ldr	r3, [pc, #424]	@ (80088e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800873a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800873e:	ee07 3a90 	vmov	s15, r3
 8008742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008746:	ed97 6a03 	vldr	s12, [r7, #12]
 800874a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80088e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800874e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008756:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800875a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800875e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008762:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008766:	e065      	b.n	8008834 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	ee07 3a90 	vmov	s15, r3
 800876e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008772:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80088f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800877a:	4b59      	ldr	r3, [pc, #356]	@ (80088e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800877c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800877e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008782:	ee07 3a90 	vmov	s15, r3
 8008786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800878a:	ed97 6a03 	vldr	s12, [r7, #12]
 800878e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80088e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800879a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800879e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087aa:	e043      	b.n	8008834 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	ee07 3a90 	vmov	s15, r3
 80087b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087b6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80088f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80087ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087be:	4b48      	ldr	r3, [pc, #288]	@ (80088e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087c6:	ee07 3a90 	vmov	s15, r3
 80087ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80087d2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80088e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80087ee:	e021      	b.n	8008834 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	ee07 3a90 	vmov	s15, r3
 80087f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087fa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80088f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80087fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008802:	4b37      	ldr	r3, [pc, #220]	@ (80088e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800880a:	ee07 3a90 	vmov	s15, r3
 800880e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008812:	ed97 6a03 	vldr	s12, [r7, #12]
 8008816:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80088e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800881a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800881e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008822:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800882a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800882e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008832:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008834:	4b2a      	ldr	r3, [pc, #168]	@ (80088e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008838:	0a5b      	lsrs	r3, r3, #9
 800883a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800883e:	ee07 3a90 	vmov	s15, r3
 8008842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008846:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800884a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800884e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008856:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800885a:	ee17 2a90 	vmov	r2, s15
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008862:	4b1f      	ldr	r3, [pc, #124]	@ (80088e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008866:	0c1b      	lsrs	r3, r3, #16
 8008868:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800886c:	ee07 3a90 	vmov	s15, r3
 8008870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008874:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008878:	ee37 7a87 	vadd.f32	s14, s15, s14
 800887c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008880:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008888:	ee17 2a90 	vmov	r2, s15
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008890:	4b13      	ldr	r3, [pc, #76]	@ (80088e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008894:	0e1b      	lsrs	r3, r3, #24
 8008896:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800889a:	ee07 3a90 	vmov	s15, r3
 800889e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80088ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088b6:	ee17 2a90 	vmov	r2, s15
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80088be:	e008      	b.n	80088d2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	609a      	str	r2, [r3, #8]
}
 80088d2:	bf00      	nop
 80088d4:	3724      	adds	r7, #36	@ 0x24
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	58024400 	.word	0x58024400
 80088e4:	03d09000 	.word	0x03d09000
 80088e8:	46000000 	.word	0x46000000
 80088ec:	4c742400 	.word	0x4c742400
 80088f0:	4a742400 	.word	0x4a742400
 80088f4:	4bb71b00 	.word	0x4bb71b00

080088f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b089      	sub	sp, #36	@ 0x24
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008900:	4ba1      	ldr	r3, [pc, #644]	@ (8008b88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008904:	f003 0303 	and.w	r3, r3, #3
 8008908:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800890a:	4b9f      	ldr	r3, [pc, #636]	@ (8008b88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800890c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800890e:	0d1b      	lsrs	r3, r3, #20
 8008910:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008914:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008916:	4b9c      	ldr	r3, [pc, #624]	@ (8008b88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800891a:	0a1b      	lsrs	r3, r3, #8
 800891c:	f003 0301 	and.w	r3, r3, #1
 8008920:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008922:	4b99      	ldr	r3, [pc, #612]	@ (8008b88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008926:	08db      	lsrs	r3, r3, #3
 8008928:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	fb02 f303 	mul.w	r3, r2, r3
 8008932:	ee07 3a90 	vmov	s15, r3
 8008936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800893a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	2b00      	cmp	r3, #0
 8008942:	f000 8111 	beq.w	8008b68 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	2b02      	cmp	r3, #2
 800894a:	f000 8083 	beq.w	8008a54 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	2b02      	cmp	r3, #2
 8008952:	f200 80a1 	bhi.w	8008a98 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d003      	beq.n	8008964 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	2b01      	cmp	r3, #1
 8008960:	d056      	beq.n	8008a10 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008962:	e099      	b.n	8008a98 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008964:	4b88      	ldr	r3, [pc, #544]	@ (8008b88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 0320 	and.w	r3, r3, #32
 800896c:	2b00      	cmp	r3, #0
 800896e:	d02d      	beq.n	80089cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008970:	4b85      	ldr	r3, [pc, #532]	@ (8008b88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	08db      	lsrs	r3, r3, #3
 8008976:	f003 0303 	and.w	r3, r3, #3
 800897a:	4a84      	ldr	r2, [pc, #528]	@ (8008b8c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800897c:	fa22 f303 	lsr.w	r3, r2, r3
 8008980:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	ee07 3a90 	vmov	s15, r3
 8008988:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	ee07 3a90 	vmov	s15, r3
 8008992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800899a:	4b7b      	ldr	r3, [pc, #492]	@ (8008b88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800899c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800899e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089a2:	ee07 3a90 	vmov	s15, r3
 80089a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008b90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80089ca:	e087      	b.n	8008adc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	ee07 3a90 	vmov	s15, r3
 80089d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089d6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008b94 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80089da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089de:	4b6a      	ldr	r3, [pc, #424]	@ (8008b88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089e6:	ee07 3a90 	vmov	s15, r3
 80089ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80089f2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008b90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a0e:	e065      	b.n	8008adc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	ee07 3a90 	vmov	s15, r3
 8008a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a1a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008b98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a22:	4b59      	ldr	r3, [pc, #356]	@ (8008b88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a2a:	ee07 3a90 	vmov	s15, r3
 8008a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a32:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a36:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008b90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a52:	e043      	b.n	8008adc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	ee07 3a90 	vmov	s15, r3
 8008a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a5e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008b9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a66:	4b48      	ldr	r3, [pc, #288]	@ (8008b88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a6e:	ee07 3a90 	vmov	s15, r3
 8008a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a7a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008b90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a96:	e021      	b.n	8008adc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	ee07 3a90 	vmov	s15, r3
 8008a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aa2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008b98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aaa:	4b37      	ldr	r3, [pc, #220]	@ (8008b88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ab2:	ee07 3a90 	vmov	s15, r3
 8008ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8008abe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008b90 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ada:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008adc:	4b2a      	ldr	r3, [pc, #168]	@ (8008b88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ae0:	0a5b      	lsrs	r3, r3, #9
 8008ae2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ae6:	ee07 3a90 	vmov	s15, r3
 8008aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008af2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008af6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008afe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b02:	ee17 2a90 	vmov	r2, s15
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008b0a:	4b1f      	ldr	r3, [pc, #124]	@ (8008b88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b0e:	0c1b      	lsrs	r3, r3, #16
 8008b10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b14:	ee07 3a90 	vmov	s15, r3
 8008b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b24:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b30:	ee17 2a90 	vmov	r2, s15
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008b38:	4b13      	ldr	r3, [pc, #76]	@ (8008b88 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b3c:	0e1b      	lsrs	r3, r3, #24
 8008b3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b42:	ee07 3a90 	vmov	s15, r3
 8008b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b52:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b5e:	ee17 2a90 	vmov	r2, s15
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008b66:	e008      	b.n	8008b7a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	609a      	str	r2, [r3, #8]
}
 8008b7a:	bf00      	nop
 8008b7c:	3724      	adds	r7, #36	@ 0x24
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	58024400 	.word	0x58024400
 8008b8c:	03d09000 	.word	0x03d09000
 8008b90:	46000000 	.word	0x46000000
 8008b94:	4c742400 	.word	0x4c742400
 8008b98:	4a742400 	.word	0x4a742400
 8008b9c:	4bb71b00 	.word	0x4bb71b00

08008ba0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b089      	sub	sp, #36	@ 0x24
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ba8:	4ba0      	ldr	r3, [pc, #640]	@ (8008e2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bac:	f003 0303 	and.w	r3, r3, #3
 8008bb0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008bb2:	4b9e      	ldr	r3, [pc, #632]	@ (8008e2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb6:	091b      	lsrs	r3, r3, #4
 8008bb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008bbc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008bbe:	4b9b      	ldr	r3, [pc, #620]	@ (8008e2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008bc8:	4b98      	ldr	r3, [pc, #608]	@ (8008e2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008bca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bcc:	08db      	lsrs	r3, r3, #3
 8008bce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	fb02 f303 	mul.w	r3, r2, r3
 8008bd8:	ee07 3a90 	vmov	s15, r3
 8008bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	f000 8111 	beq.w	8008e0e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	f000 8083 	beq.w	8008cfa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	f200 80a1 	bhi.w	8008d3e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d056      	beq.n	8008cb6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008c08:	e099      	b.n	8008d3e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c0a:	4b88      	ldr	r3, [pc, #544]	@ (8008e2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 0320 	and.w	r3, r3, #32
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d02d      	beq.n	8008c72 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c16:	4b85      	ldr	r3, [pc, #532]	@ (8008e2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	08db      	lsrs	r3, r3, #3
 8008c1c:	f003 0303 	and.w	r3, r3, #3
 8008c20:	4a83      	ldr	r2, [pc, #524]	@ (8008e30 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008c22:	fa22 f303 	lsr.w	r3, r2, r3
 8008c26:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	ee07 3a90 	vmov	s15, r3
 8008c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	ee07 3a90 	vmov	s15, r3
 8008c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c40:	4b7a      	ldr	r3, [pc, #488]	@ (8008e2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c48:	ee07 3a90 	vmov	s15, r3
 8008c4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c50:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c54:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008e34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c6c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008c70:	e087      	b.n	8008d82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	ee07 3a90 	vmov	s15, r3
 8008c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c7c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8008e38 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008c80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c84:	4b69      	ldr	r3, [pc, #420]	@ (8008e2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c8c:	ee07 3a90 	vmov	s15, r3
 8008c90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c94:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c98:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008e34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008c9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ca0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ca4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ca8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cb0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cb4:	e065      	b.n	8008d82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	ee07 3a90 	vmov	s15, r3
 8008cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cc0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008e3c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008cc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cc8:	4b58      	ldr	r3, [pc, #352]	@ (8008e2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cd0:	ee07 3a90 	vmov	s15, r3
 8008cd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cd8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cdc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008e34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ce0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ce4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ce8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cf4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008cf8:	e043      	b.n	8008d82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	ee07 3a90 	vmov	s15, r3
 8008d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d04:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008e40 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008d08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d0c:	4b47      	ldr	r3, [pc, #284]	@ (8008e2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d14:	ee07 3a90 	vmov	s15, r3
 8008d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d20:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008e34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d3c:	e021      	b.n	8008d82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	ee07 3a90 	vmov	s15, r3
 8008d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d48:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8008e38 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008d4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d50:	4b36      	ldr	r3, [pc, #216]	@ (8008e2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d58:	ee07 3a90 	vmov	s15, r3
 8008d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d60:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d64:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008e34 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008d68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008d80:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008d82:	4b2a      	ldr	r3, [pc, #168]	@ (8008e2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d86:	0a5b      	lsrs	r3, r3, #9
 8008d88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d8c:	ee07 3a90 	vmov	s15, r3
 8008d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008d98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008da4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008da8:	ee17 2a90 	vmov	r2, s15
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008db0:	4b1e      	ldr	r3, [pc, #120]	@ (8008e2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008db4:	0c1b      	lsrs	r3, r3, #16
 8008db6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dba:	ee07 3a90 	vmov	s15, r3
 8008dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008dc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dca:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dd6:	ee17 2a90 	vmov	r2, s15
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008dde:	4b13      	ldr	r3, [pc, #76]	@ (8008e2c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008de2:	0e1b      	lsrs	r3, r3, #24
 8008de4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008de8:	ee07 3a90 	vmov	s15, r3
 8008dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008df4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008df8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e04:	ee17 2a90 	vmov	r2, s15
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008e0c:	e008      	b.n	8008e20 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	609a      	str	r2, [r3, #8]
}
 8008e20:	bf00      	nop
 8008e22:	3724      	adds	r7, #36	@ 0x24
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr
 8008e2c:	58024400 	.word	0x58024400
 8008e30:	03d09000 	.word	0x03d09000
 8008e34:	46000000 	.word	0x46000000
 8008e38:	4c742400 	.word	0x4c742400
 8008e3c:	4a742400 	.word	0x4a742400
 8008e40:	4bb71b00 	.word	0x4bb71b00

08008e44 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e52:	4b53      	ldr	r3, [pc, #332]	@ (8008fa0 <RCCEx_PLL2_Config+0x15c>)
 8008e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e56:	f003 0303 	and.w	r3, r3, #3
 8008e5a:	2b03      	cmp	r3, #3
 8008e5c:	d101      	bne.n	8008e62 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e099      	b.n	8008f96 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008e62:	4b4f      	ldr	r3, [pc, #316]	@ (8008fa0 <RCCEx_PLL2_Config+0x15c>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a4e      	ldr	r2, [pc, #312]	@ (8008fa0 <RCCEx_PLL2_Config+0x15c>)
 8008e68:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008e6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e6e:	f7f9 f931 	bl	80020d4 <HAL_GetTick>
 8008e72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e74:	e008      	b.n	8008e88 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008e76:	f7f9 f92d 	bl	80020d4 <HAL_GetTick>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	2b02      	cmp	r3, #2
 8008e82:	d901      	bls.n	8008e88 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e84:	2303      	movs	r3, #3
 8008e86:	e086      	b.n	8008f96 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e88:	4b45      	ldr	r3, [pc, #276]	@ (8008fa0 <RCCEx_PLL2_Config+0x15c>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1f0      	bne.n	8008e76 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008e94:	4b42      	ldr	r3, [pc, #264]	@ (8008fa0 <RCCEx_PLL2_Config+0x15c>)
 8008e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e98:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	031b      	lsls	r3, r3, #12
 8008ea2:	493f      	ldr	r1, [pc, #252]	@ (8008fa0 <RCCEx_PLL2_Config+0x15c>)
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	628b      	str	r3, [r1, #40]	@ 0x28
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	3b01      	subs	r3, #1
 8008eae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	025b      	lsls	r3, r3, #9
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	431a      	orrs	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	041b      	lsls	r3, r3, #16
 8008ec6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008eca:	431a      	orrs	r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	061b      	lsls	r3, r3, #24
 8008ed4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008ed8:	4931      	ldr	r1, [pc, #196]	@ (8008fa0 <RCCEx_PLL2_Config+0x15c>)
 8008eda:	4313      	orrs	r3, r2
 8008edc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008ede:	4b30      	ldr	r3, [pc, #192]	@ (8008fa0 <RCCEx_PLL2_Config+0x15c>)
 8008ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	695b      	ldr	r3, [r3, #20]
 8008eea:	492d      	ldr	r1, [pc, #180]	@ (8008fa0 <RCCEx_PLL2_Config+0x15c>)
 8008eec:	4313      	orrs	r3, r2
 8008eee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8008fa0 <RCCEx_PLL2_Config+0x15c>)
 8008ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ef4:	f023 0220 	bic.w	r2, r3, #32
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	699b      	ldr	r3, [r3, #24]
 8008efc:	4928      	ldr	r1, [pc, #160]	@ (8008fa0 <RCCEx_PLL2_Config+0x15c>)
 8008efe:	4313      	orrs	r3, r2
 8008f00:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008f02:	4b27      	ldr	r3, [pc, #156]	@ (8008fa0 <RCCEx_PLL2_Config+0x15c>)
 8008f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f06:	4a26      	ldr	r2, [pc, #152]	@ (8008fa0 <RCCEx_PLL2_Config+0x15c>)
 8008f08:	f023 0310 	bic.w	r3, r3, #16
 8008f0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008f0e:	4b24      	ldr	r3, [pc, #144]	@ (8008fa0 <RCCEx_PLL2_Config+0x15c>)
 8008f10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f12:	4b24      	ldr	r3, [pc, #144]	@ (8008fa4 <RCCEx_PLL2_Config+0x160>)
 8008f14:	4013      	ands	r3, r2
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	69d2      	ldr	r2, [r2, #28]
 8008f1a:	00d2      	lsls	r2, r2, #3
 8008f1c:	4920      	ldr	r1, [pc, #128]	@ (8008fa0 <RCCEx_PLL2_Config+0x15c>)
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008f22:	4b1f      	ldr	r3, [pc, #124]	@ (8008fa0 <RCCEx_PLL2_Config+0x15c>)
 8008f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f26:	4a1e      	ldr	r2, [pc, #120]	@ (8008fa0 <RCCEx_PLL2_Config+0x15c>)
 8008f28:	f043 0310 	orr.w	r3, r3, #16
 8008f2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d106      	bne.n	8008f42 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008f34:	4b1a      	ldr	r3, [pc, #104]	@ (8008fa0 <RCCEx_PLL2_Config+0x15c>)
 8008f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f38:	4a19      	ldr	r2, [pc, #100]	@ (8008fa0 <RCCEx_PLL2_Config+0x15c>)
 8008f3a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008f3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008f40:	e00f      	b.n	8008f62 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d106      	bne.n	8008f56 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008f48:	4b15      	ldr	r3, [pc, #84]	@ (8008fa0 <RCCEx_PLL2_Config+0x15c>)
 8008f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f4c:	4a14      	ldr	r2, [pc, #80]	@ (8008fa0 <RCCEx_PLL2_Config+0x15c>)
 8008f4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008f54:	e005      	b.n	8008f62 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008f56:	4b12      	ldr	r3, [pc, #72]	@ (8008fa0 <RCCEx_PLL2_Config+0x15c>)
 8008f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f5a:	4a11      	ldr	r2, [pc, #68]	@ (8008fa0 <RCCEx_PLL2_Config+0x15c>)
 8008f5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008f60:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008f62:	4b0f      	ldr	r3, [pc, #60]	@ (8008fa0 <RCCEx_PLL2_Config+0x15c>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a0e      	ldr	r2, [pc, #56]	@ (8008fa0 <RCCEx_PLL2_Config+0x15c>)
 8008f68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008f6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f6e:	f7f9 f8b1 	bl	80020d4 <HAL_GetTick>
 8008f72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f74:	e008      	b.n	8008f88 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008f76:	f7f9 f8ad 	bl	80020d4 <HAL_GetTick>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	1ad3      	subs	r3, r2, r3
 8008f80:	2b02      	cmp	r3, #2
 8008f82:	d901      	bls.n	8008f88 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f84:	2303      	movs	r3, #3
 8008f86:	e006      	b.n	8008f96 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f88:	4b05      	ldr	r3, [pc, #20]	@ (8008fa0 <RCCEx_PLL2_Config+0x15c>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d0f0      	beq.n	8008f76 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	58024400 	.word	0x58024400
 8008fa4:	ffff0007 	.word	0xffff0007

08008fa8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008fb6:	4b53      	ldr	r3, [pc, #332]	@ (8009104 <RCCEx_PLL3_Config+0x15c>)
 8008fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fba:	f003 0303 	and.w	r3, r3, #3
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d101      	bne.n	8008fc6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e099      	b.n	80090fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008fc6:	4b4f      	ldr	r3, [pc, #316]	@ (8009104 <RCCEx_PLL3_Config+0x15c>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a4e      	ldr	r2, [pc, #312]	@ (8009104 <RCCEx_PLL3_Config+0x15c>)
 8008fcc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008fd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fd2:	f7f9 f87f 	bl	80020d4 <HAL_GetTick>
 8008fd6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008fd8:	e008      	b.n	8008fec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008fda:	f7f9 f87b 	bl	80020d4 <HAL_GetTick>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	1ad3      	subs	r3, r2, r3
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d901      	bls.n	8008fec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008fe8:	2303      	movs	r3, #3
 8008fea:	e086      	b.n	80090fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008fec:	4b45      	ldr	r3, [pc, #276]	@ (8009104 <RCCEx_PLL3_Config+0x15c>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1f0      	bne.n	8008fda <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008ff8:	4b42      	ldr	r3, [pc, #264]	@ (8009104 <RCCEx_PLL3_Config+0x15c>)
 8008ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ffc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	051b      	lsls	r3, r3, #20
 8009006:	493f      	ldr	r1, [pc, #252]	@ (8009104 <RCCEx_PLL3_Config+0x15c>)
 8009008:	4313      	orrs	r3, r2
 800900a:	628b      	str	r3, [r1, #40]	@ 0x28
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	3b01      	subs	r3, #1
 8009012:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	3b01      	subs	r3, #1
 800901c:	025b      	lsls	r3, r3, #9
 800901e:	b29b      	uxth	r3, r3
 8009020:	431a      	orrs	r2, r3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	3b01      	subs	r3, #1
 8009028:	041b      	lsls	r3, r3, #16
 800902a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800902e:	431a      	orrs	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	3b01      	subs	r3, #1
 8009036:	061b      	lsls	r3, r3, #24
 8009038:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800903c:	4931      	ldr	r1, [pc, #196]	@ (8009104 <RCCEx_PLL3_Config+0x15c>)
 800903e:	4313      	orrs	r3, r2
 8009040:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009042:	4b30      	ldr	r3, [pc, #192]	@ (8009104 <RCCEx_PLL3_Config+0x15c>)
 8009044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009046:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	695b      	ldr	r3, [r3, #20]
 800904e:	492d      	ldr	r1, [pc, #180]	@ (8009104 <RCCEx_PLL3_Config+0x15c>)
 8009050:	4313      	orrs	r3, r2
 8009052:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009054:	4b2b      	ldr	r3, [pc, #172]	@ (8009104 <RCCEx_PLL3_Config+0x15c>)
 8009056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009058:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	699b      	ldr	r3, [r3, #24]
 8009060:	4928      	ldr	r1, [pc, #160]	@ (8009104 <RCCEx_PLL3_Config+0x15c>)
 8009062:	4313      	orrs	r3, r2
 8009064:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009066:	4b27      	ldr	r3, [pc, #156]	@ (8009104 <RCCEx_PLL3_Config+0x15c>)
 8009068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800906a:	4a26      	ldr	r2, [pc, #152]	@ (8009104 <RCCEx_PLL3_Config+0x15c>)
 800906c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009070:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009072:	4b24      	ldr	r3, [pc, #144]	@ (8009104 <RCCEx_PLL3_Config+0x15c>)
 8009074:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009076:	4b24      	ldr	r3, [pc, #144]	@ (8009108 <RCCEx_PLL3_Config+0x160>)
 8009078:	4013      	ands	r3, r2
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	69d2      	ldr	r2, [r2, #28]
 800907e:	00d2      	lsls	r2, r2, #3
 8009080:	4920      	ldr	r1, [pc, #128]	@ (8009104 <RCCEx_PLL3_Config+0x15c>)
 8009082:	4313      	orrs	r3, r2
 8009084:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009086:	4b1f      	ldr	r3, [pc, #124]	@ (8009104 <RCCEx_PLL3_Config+0x15c>)
 8009088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800908a:	4a1e      	ldr	r2, [pc, #120]	@ (8009104 <RCCEx_PLL3_Config+0x15c>)
 800908c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009090:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d106      	bne.n	80090a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009098:	4b1a      	ldr	r3, [pc, #104]	@ (8009104 <RCCEx_PLL3_Config+0x15c>)
 800909a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800909c:	4a19      	ldr	r2, [pc, #100]	@ (8009104 <RCCEx_PLL3_Config+0x15c>)
 800909e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80090a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80090a4:	e00f      	b.n	80090c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d106      	bne.n	80090ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80090ac:	4b15      	ldr	r3, [pc, #84]	@ (8009104 <RCCEx_PLL3_Config+0x15c>)
 80090ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b0:	4a14      	ldr	r2, [pc, #80]	@ (8009104 <RCCEx_PLL3_Config+0x15c>)
 80090b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80090b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80090b8:	e005      	b.n	80090c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80090ba:	4b12      	ldr	r3, [pc, #72]	@ (8009104 <RCCEx_PLL3_Config+0x15c>)
 80090bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090be:	4a11      	ldr	r2, [pc, #68]	@ (8009104 <RCCEx_PLL3_Config+0x15c>)
 80090c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80090c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80090c6:	4b0f      	ldr	r3, [pc, #60]	@ (8009104 <RCCEx_PLL3_Config+0x15c>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a0e      	ldr	r2, [pc, #56]	@ (8009104 <RCCEx_PLL3_Config+0x15c>)
 80090cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090d2:	f7f8 ffff 	bl	80020d4 <HAL_GetTick>
 80090d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80090d8:	e008      	b.n	80090ec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80090da:	f7f8 fffb 	bl	80020d4 <HAL_GetTick>
 80090de:	4602      	mov	r2, r0
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	1ad3      	subs	r3, r2, r3
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d901      	bls.n	80090ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80090e8:	2303      	movs	r3, #3
 80090ea:	e006      	b.n	80090fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80090ec:	4b05      	ldr	r3, [pc, #20]	@ (8009104 <RCCEx_PLL3_Config+0x15c>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d0f0      	beq.n	80090da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80090f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	58024400 	.word	0x58024400
 8009108:	ffff0007 	.word	0xffff0007

0800910c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d101      	bne.n	800911e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e049      	b.n	80091b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009124:	b2db      	uxtb	r3, r3
 8009126:	2b00      	cmp	r3, #0
 8009128:	d106      	bne.n	8009138 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f7f8 fce4 	bl	8001b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2202      	movs	r2, #2
 800913c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	3304      	adds	r3, #4
 8009148:	4619      	mov	r1, r3
 800914a:	4610      	mov	r0, r2
 800914c:	f000 fc58 	bl	8009a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
	...

080091bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80091bc:	b480      	push	{r7}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d001      	beq.n	80091d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	e05e      	b.n	8009292 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2202      	movs	r2, #2
 80091d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68da      	ldr	r2, [r3, #12]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f042 0201 	orr.w	r2, r2, #1
 80091ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a2b      	ldr	r2, [pc, #172]	@ (80092a0 <HAL_TIM_Base_Start_IT+0xe4>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d02c      	beq.n	8009250 <HAL_TIM_Base_Start_IT+0x94>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091fe:	d027      	beq.n	8009250 <HAL_TIM_Base_Start_IT+0x94>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a27      	ldr	r2, [pc, #156]	@ (80092a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d022      	beq.n	8009250 <HAL_TIM_Base_Start_IT+0x94>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a26      	ldr	r2, [pc, #152]	@ (80092a8 <HAL_TIM_Base_Start_IT+0xec>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d01d      	beq.n	8009250 <HAL_TIM_Base_Start_IT+0x94>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a24      	ldr	r2, [pc, #144]	@ (80092ac <HAL_TIM_Base_Start_IT+0xf0>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d018      	beq.n	8009250 <HAL_TIM_Base_Start_IT+0x94>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a23      	ldr	r2, [pc, #140]	@ (80092b0 <HAL_TIM_Base_Start_IT+0xf4>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d013      	beq.n	8009250 <HAL_TIM_Base_Start_IT+0x94>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a21      	ldr	r2, [pc, #132]	@ (80092b4 <HAL_TIM_Base_Start_IT+0xf8>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d00e      	beq.n	8009250 <HAL_TIM_Base_Start_IT+0x94>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a20      	ldr	r2, [pc, #128]	@ (80092b8 <HAL_TIM_Base_Start_IT+0xfc>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d009      	beq.n	8009250 <HAL_TIM_Base_Start_IT+0x94>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a1e      	ldr	r2, [pc, #120]	@ (80092bc <HAL_TIM_Base_Start_IT+0x100>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d004      	beq.n	8009250 <HAL_TIM_Base_Start_IT+0x94>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a1d      	ldr	r2, [pc, #116]	@ (80092c0 <HAL_TIM_Base_Start_IT+0x104>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d115      	bne.n	800927c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	689a      	ldr	r2, [r3, #8]
 8009256:	4b1b      	ldr	r3, [pc, #108]	@ (80092c4 <HAL_TIM_Base_Start_IT+0x108>)
 8009258:	4013      	ands	r3, r2
 800925a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2b06      	cmp	r3, #6
 8009260:	d015      	beq.n	800928e <HAL_TIM_Base_Start_IT+0xd2>
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009268:	d011      	beq.n	800928e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f042 0201 	orr.w	r2, r2, #1
 8009278:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800927a:	e008      	b.n	800928e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f042 0201 	orr.w	r2, r2, #1
 800928a:	601a      	str	r2, [r3, #0]
 800928c:	e000      	b.n	8009290 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800928e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009290:	2300      	movs	r3, #0
}
 8009292:	4618      	mov	r0, r3
 8009294:	3714      	adds	r7, #20
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop
 80092a0:	40010000 	.word	0x40010000
 80092a4:	40000400 	.word	0x40000400
 80092a8:	40000800 	.word	0x40000800
 80092ac:	40000c00 	.word	0x40000c00
 80092b0:	40010400 	.word	0x40010400
 80092b4:	40001800 	.word	0x40001800
 80092b8:	40014000 	.word	0x40014000
 80092bc:	4000e000 	.word	0x4000e000
 80092c0:	4000e400 	.word	0x4000e400
 80092c4:	00010007 	.word	0x00010007

080092c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d101      	bne.n	80092da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	e049      	b.n	800936e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d106      	bne.n	80092f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 f841 	bl	8009376 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2202      	movs	r2, #2
 80092f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	3304      	adds	r3, #4
 8009304:	4619      	mov	r1, r3
 8009306:	4610      	mov	r0, r2
 8009308:	f000 fb7a 	bl	8009a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2201      	movs	r2, #1
 8009320:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2201      	movs	r2, #1
 8009330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2201      	movs	r2, #1
 8009340:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2201      	movs	r2, #1
 8009358:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2201      	movs	r2, #1
 8009368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009376:	b480      	push	{r7}
 8009378:	b083      	sub	sp, #12
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800937e:	bf00      	nop
 8009380:	370c      	adds	r7, #12
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr

0800938a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b084      	sub	sp, #16
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	f003 0302 	and.w	r3, r3, #2
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d020      	beq.n	80093ee <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f003 0302 	and.w	r3, r3, #2
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d01b      	beq.n	80093ee <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f06f 0202 	mvn.w	r2, #2
 80093be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	f003 0303 	and.w	r3, r3, #3
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d003      	beq.n	80093dc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 faf5 	bl	80099c4 <HAL_TIM_IC_CaptureCallback>
 80093da:	e005      	b.n	80093e8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 fae7 	bl	80099b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 faf8 	bl	80099d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	f003 0304 	and.w	r3, r3, #4
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d020      	beq.n	800943a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f003 0304 	and.w	r3, r3, #4
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d01b      	beq.n	800943a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f06f 0204 	mvn.w	r2, #4
 800940a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2202      	movs	r2, #2
 8009410:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	699b      	ldr	r3, [r3, #24]
 8009418:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800941c:	2b00      	cmp	r3, #0
 800941e:	d003      	beq.n	8009428 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 facf 	bl	80099c4 <HAL_TIM_IC_CaptureCallback>
 8009426:	e005      	b.n	8009434 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 fac1 	bl	80099b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 fad2 	bl	80099d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	f003 0308 	and.w	r3, r3, #8
 8009440:	2b00      	cmp	r3, #0
 8009442:	d020      	beq.n	8009486 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f003 0308 	and.w	r3, r3, #8
 800944a:	2b00      	cmp	r3, #0
 800944c:	d01b      	beq.n	8009486 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f06f 0208 	mvn.w	r2, #8
 8009456:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2204      	movs	r2, #4
 800945c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	69db      	ldr	r3, [r3, #28]
 8009464:	f003 0303 	and.w	r3, r3, #3
 8009468:	2b00      	cmp	r3, #0
 800946a:	d003      	beq.n	8009474 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 faa9 	bl	80099c4 <HAL_TIM_IC_CaptureCallback>
 8009472:	e005      	b.n	8009480 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 fa9b 	bl	80099b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 faac 	bl	80099d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	f003 0310 	and.w	r3, r3, #16
 800948c:	2b00      	cmp	r3, #0
 800948e:	d020      	beq.n	80094d2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f003 0310 	and.w	r3, r3, #16
 8009496:	2b00      	cmp	r3, #0
 8009498:	d01b      	beq.n	80094d2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f06f 0210 	mvn.w	r2, #16
 80094a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2208      	movs	r2, #8
 80094a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	69db      	ldr	r3, [r3, #28]
 80094b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d003      	beq.n	80094c0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 fa83 	bl	80099c4 <HAL_TIM_IC_CaptureCallback>
 80094be:	e005      	b.n	80094cc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 fa75 	bl	80099b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 fa86 	bl	80099d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	f003 0301 	and.w	r3, r3, #1
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00c      	beq.n	80094f6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f003 0301 	and.w	r3, r3, #1
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d007      	beq.n	80094f6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f06f 0201 	mvn.w	r2, #1
 80094ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f7f8 f877 	bl	80015e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d104      	bne.n	800950a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00c      	beq.n	8009524 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009510:	2b00      	cmp	r3, #0
 8009512:	d007      	beq.n	8009524 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800951c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 ffc6 	bl	800a4b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00c      	beq.n	8009548 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009534:	2b00      	cmp	r3, #0
 8009536:	d007      	beq.n	8009548 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 ffbe 	bl	800a4c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800954e:	2b00      	cmp	r3, #0
 8009550:	d00c      	beq.n	800956c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009558:	2b00      	cmp	r3, #0
 800955a:	d007      	beq.n	800956c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 fa40 	bl	80099ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	f003 0320 	and.w	r3, r3, #32
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00c      	beq.n	8009590 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f003 0320 	and.w	r3, r3, #32
 800957c:	2b00      	cmp	r3, #0
 800957e:	d007      	beq.n	8009590 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f06f 0220 	mvn.w	r2, #32
 8009588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 ff86 	bl	800a49c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009590:	bf00      	nop
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b086      	sub	sp, #24
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095a4:	2300      	movs	r3, #0
 80095a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d101      	bne.n	80095b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80095b2:	2302      	movs	r3, #2
 80095b4:	e0ff      	b.n	80097b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2b14      	cmp	r3, #20
 80095c2:	f200 80f0 	bhi.w	80097a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80095c6:	a201      	add	r2, pc, #4	@ (adr r2, 80095cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80095c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095cc:	08009621 	.word	0x08009621
 80095d0:	080097a7 	.word	0x080097a7
 80095d4:	080097a7 	.word	0x080097a7
 80095d8:	080097a7 	.word	0x080097a7
 80095dc:	08009661 	.word	0x08009661
 80095e0:	080097a7 	.word	0x080097a7
 80095e4:	080097a7 	.word	0x080097a7
 80095e8:	080097a7 	.word	0x080097a7
 80095ec:	080096a3 	.word	0x080096a3
 80095f0:	080097a7 	.word	0x080097a7
 80095f4:	080097a7 	.word	0x080097a7
 80095f8:	080097a7 	.word	0x080097a7
 80095fc:	080096e3 	.word	0x080096e3
 8009600:	080097a7 	.word	0x080097a7
 8009604:	080097a7 	.word	0x080097a7
 8009608:	080097a7 	.word	0x080097a7
 800960c:	08009725 	.word	0x08009725
 8009610:	080097a7 	.word	0x080097a7
 8009614:	080097a7 	.word	0x080097a7
 8009618:	080097a7 	.word	0x080097a7
 800961c:	08009765 	.word	0x08009765
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	68b9      	ldr	r1, [r7, #8]
 8009626:	4618      	mov	r0, r3
 8009628:	f000 fa9c 	bl	8009b64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	699a      	ldr	r2, [r3, #24]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f042 0208 	orr.w	r2, r2, #8
 800963a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	699a      	ldr	r2, [r3, #24]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f022 0204 	bic.w	r2, r2, #4
 800964a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	6999      	ldr	r1, [r3, #24]
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	691a      	ldr	r2, [r3, #16]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	430a      	orrs	r2, r1
 800965c:	619a      	str	r2, [r3, #24]
      break;
 800965e:	e0a5      	b.n	80097ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68b9      	ldr	r1, [r7, #8]
 8009666:	4618      	mov	r0, r3
 8009668:	f000 fb0c 	bl	8009c84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	699a      	ldr	r2, [r3, #24]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800967a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	699a      	ldr	r2, [r3, #24]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800968a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	6999      	ldr	r1, [r3, #24]
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	691b      	ldr	r3, [r3, #16]
 8009696:	021a      	lsls	r2, r3, #8
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	430a      	orrs	r2, r1
 800969e:	619a      	str	r2, [r3, #24]
      break;
 80096a0:	e084      	b.n	80097ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	68b9      	ldr	r1, [r7, #8]
 80096a8:	4618      	mov	r0, r3
 80096aa:	f000 fb75 	bl	8009d98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	69da      	ldr	r2, [r3, #28]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f042 0208 	orr.w	r2, r2, #8
 80096bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	69da      	ldr	r2, [r3, #28]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f022 0204 	bic.w	r2, r2, #4
 80096cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	69d9      	ldr	r1, [r3, #28]
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	691a      	ldr	r2, [r3, #16]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	430a      	orrs	r2, r1
 80096de:	61da      	str	r2, [r3, #28]
      break;
 80096e0:	e064      	b.n	80097ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68b9      	ldr	r1, [r7, #8]
 80096e8:	4618      	mov	r0, r3
 80096ea:	f000 fbdd 	bl	8009ea8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	69da      	ldr	r2, [r3, #28]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80096fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	69da      	ldr	r2, [r3, #28]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800970c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	69d9      	ldr	r1, [r3, #28]
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	691b      	ldr	r3, [r3, #16]
 8009718:	021a      	lsls	r2, r3, #8
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	430a      	orrs	r2, r1
 8009720:	61da      	str	r2, [r3, #28]
      break;
 8009722:	e043      	b.n	80097ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	68b9      	ldr	r1, [r7, #8]
 800972a:	4618      	mov	r0, r3
 800972c:	f000 fc26 	bl	8009f7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f042 0208 	orr.w	r2, r2, #8
 800973e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f022 0204 	bic.w	r2, r2, #4
 800974e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	691a      	ldr	r2, [r3, #16]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	430a      	orrs	r2, r1
 8009760:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009762:	e023      	b.n	80097ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68b9      	ldr	r1, [r7, #8]
 800976a:	4618      	mov	r0, r3
 800976c:	f000 fc6a 	bl	800a044 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800977e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800978e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	021a      	lsls	r2, r3, #8
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	430a      	orrs	r2, r1
 80097a2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80097a4:	e002      	b.n	80097ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	75fb      	strb	r3, [r7, #23]
      break;
 80097aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80097b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3718      	adds	r7, #24
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop

080097c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80097ca:	2300      	movs	r3, #0
 80097cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d101      	bne.n	80097dc <HAL_TIM_ConfigClockSource+0x1c>
 80097d8:	2302      	movs	r3, #2
 80097da:	e0dc      	b.n	8009996 <HAL_TIM_ConfigClockSource+0x1d6>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2202      	movs	r2, #2
 80097e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80097f4:	68ba      	ldr	r2, [r7, #8]
 80097f6:	4b6a      	ldr	r3, [pc, #424]	@ (80099a0 <HAL_TIM_ConfigClockSource+0x1e0>)
 80097f8:	4013      	ands	r3, r2
 80097fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009802:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	68ba      	ldr	r2, [r7, #8]
 800980a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a64      	ldr	r2, [pc, #400]	@ (80099a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009812:	4293      	cmp	r3, r2
 8009814:	f000 80a9 	beq.w	800996a <HAL_TIM_ConfigClockSource+0x1aa>
 8009818:	4a62      	ldr	r2, [pc, #392]	@ (80099a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800981a:	4293      	cmp	r3, r2
 800981c:	f200 80ae 	bhi.w	800997c <HAL_TIM_ConfigClockSource+0x1bc>
 8009820:	4a61      	ldr	r2, [pc, #388]	@ (80099a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009822:	4293      	cmp	r3, r2
 8009824:	f000 80a1 	beq.w	800996a <HAL_TIM_ConfigClockSource+0x1aa>
 8009828:	4a5f      	ldr	r2, [pc, #380]	@ (80099a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800982a:	4293      	cmp	r3, r2
 800982c:	f200 80a6 	bhi.w	800997c <HAL_TIM_ConfigClockSource+0x1bc>
 8009830:	4a5e      	ldr	r2, [pc, #376]	@ (80099ac <HAL_TIM_ConfigClockSource+0x1ec>)
 8009832:	4293      	cmp	r3, r2
 8009834:	f000 8099 	beq.w	800996a <HAL_TIM_ConfigClockSource+0x1aa>
 8009838:	4a5c      	ldr	r2, [pc, #368]	@ (80099ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800983a:	4293      	cmp	r3, r2
 800983c:	f200 809e 	bhi.w	800997c <HAL_TIM_ConfigClockSource+0x1bc>
 8009840:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009844:	f000 8091 	beq.w	800996a <HAL_TIM_ConfigClockSource+0x1aa>
 8009848:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800984c:	f200 8096 	bhi.w	800997c <HAL_TIM_ConfigClockSource+0x1bc>
 8009850:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009854:	f000 8089 	beq.w	800996a <HAL_TIM_ConfigClockSource+0x1aa>
 8009858:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800985c:	f200 808e 	bhi.w	800997c <HAL_TIM_ConfigClockSource+0x1bc>
 8009860:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009864:	d03e      	beq.n	80098e4 <HAL_TIM_ConfigClockSource+0x124>
 8009866:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800986a:	f200 8087 	bhi.w	800997c <HAL_TIM_ConfigClockSource+0x1bc>
 800986e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009872:	f000 8086 	beq.w	8009982 <HAL_TIM_ConfigClockSource+0x1c2>
 8009876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800987a:	d87f      	bhi.n	800997c <HAL_TIM_ConfigClockSource+0x1bc>
 800987c:	2b70      	cmp	r3, #112	@ 0x70
 800987e:	d01a      	beq.n	80098b6 <HAL_TIM_ConfigClockSource+0xf6>
 8009880:	2b70      	cmp	r3, #112	@ 0x70
 8009882:	d87b      	bhi.n	800997c <HAL_TIM_ConfigClockSource+0x1bc>
 8009884:	2b60      	cmp	r3, #96	@ 0x60
 8009886:	d050      	beq.n	800992a <HAL_TIM_ConfigClockSource+0x16a>
 8009888:	2b60      	cmp	r3, #96	@ 0x60
 800988a:	d877      	bhi.n	800997c <HAL_TIM_ConfigClockSource+0x1bc>
 800988c:	2b50      	cmp	r3, #80	@ 0x50
 800988e:	d03c      	beq.n	800990a <HAL_TIM_ConfigClockSource+0x14a>
 8009890:	2b50      	cmp	r3, #80	@ 0x50
 8009892:	d873      	bhi.n	800997c <HAL_TIM_ConfigClockSource+0x1bc>
 8009894:	2b40      	cmp	r3, #64	@ 0x40
 8009896:	d058      	beq.n	800994a <HAL_TIM_ConfigClockSource+0x18a>
 8009898:	2b40      	cmp	r3, #64	@ 0x40
 800989a:	d86f      	bhi.n	800997c <HAL_TIM_ConfigClockSource+0x1bc>
 800989c:	2b30      	cmp	r3, #48	@ 0x30
 800989e:	d064      	beq.n	800996a <HAL_TIM_ConfigClockSource+0x1aa>
 80098a0:	2b30      	cmp	r3, #48	@ 0x30
 80098a2:	d86b      	bhi.n	800997c <HAL_TIM_ConfigClockSource+0x1bc>
 80098a4:	2b20      	cmp	r3, #32
 80098a6:	d060      	beq.n	800996a <HAL_TIM_ConfigClockSource+0x1aa>
 80098a8:	2b20      	cmp	r3, #32
 80098aa:	d867      	bhi.n	800997c <HAL_TIM_ConfigClockSource+0x1bc>
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d05c      	beq.n	800996a <HAL_TIM_ConfigClockSource+0x1aa>
 80098b0:	2b10      	cmp	r3, #16
 80098b2:	d05a      	beq.n	800996a <HAL_TIM_ConfigClockSource+0x1aa>
 80098b4:	e062      	b.n	800997c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80098c6:	f000 fca1 	bl	800a20c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80098d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	68ba      	ldr	r2, [r7, #8]
 80098e0:	609a      	str	r2, [r3, #8]
      break;
 80098e2:	e04f      	b.n	8009984 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80098f4:	f000 fc8a 	bl	800a20c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	689a      	ldr	r2, [r3, #8]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009906:	609a      	str	r2, [r3, #8]
      break;
 8009908:	e03c      	b.n	8009984 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009916:	461a      	mov	r2, r3
 8009918:	f000 fbfa 	bl	800a110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2150      	movs	r1, #80	@ 0x50
 8009922:	4618      	mov	r0, r3
 8009924:	f000 fc54 	bl	800a1d0 <TIM_ITRx_SetConfig>
      break;
 8009928:	e02c      	b.n	8009984 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009936:	461a      	mov	r2, r3
 8009938:	f000 fc19 	bl	800a16e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2160      	movs	r1, #96	@ 0x60
 8009942:	4618      	mov	r0, r3
 8009944:	f000 fc44 	bl	800a1d0 <TIM_ITRx_SetConfig>
      break;
 8009948:	e01c      	b.n	8009984 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009956:	461a      	mov	r2, r3
 8009958:	f000 fbda 	bl	800a110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2140      	movs	r1, #64	@ 0x40
 8009962:	4618      	mov	r0, r3
 8009964:	f000 fc34 	bl	800a1d0 <TIM_ITRx_SetConfig>
      break;
 8009968:	e00c      	b.n	8009984 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4619      	mov	r1, r3
 8009974:	4610      	mov	r0, r2
 8009976:	f000 fc2b 	bl	800a1d0 <TIM_ITRx_SetConfig>
      break;
 800997a:	e003      	b.n	8009984 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800997c:	2301      	movs	r3, #1
 800997e:	73fb      	strb	r3, [r7, #15]
      break;
 8009980:	e000      	b.n	8009984 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009982:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2201      	movs	r2, #1
 8009988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2200      	movs	r2, #0
 8009990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009994:	7bfb      	ldrb	r3, [r7, #15]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3710      	adds	r7, #16
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	ffceff88 	.word	0xffceff88
 80099a4:	00100040 	.word	0x00100040
 80099a8:	00100030 	.word	0x00100030
 80099ac:	00100020 	.word	0x00100020

080099b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80099b8:	bf00      	nop
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80099cc:	bf00      	nop
 80099ce:	370c      	adds	r7, #12
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80099e0:	bf00      	nop
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80099f4:	bf00      	nop
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4a4a      	ldr	r2, [pc, #296]	@ (8009b3c <TIM_Base_SetConfig+0x13c>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d013      	beq.n	8009a40 <TIM_Base_SetConfig+0x40>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a1e:	d00f      	beq.n	8009a40 <TIM_Base_SetConfig+0x40>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	4a47      	ldr	r2, [pc, #284]	@ (8009b40 <TIM_Base_SetConfig+0x140>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d00b      	beq.n	8009a40 <TIM_Base_SetConfig+0x40>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	4a46      	ldr	r2, [pc, #280]	@ (8009b44 <TIM_Base_SetConfig+0x144>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d007      	beq.n	8009a40 <TIM_Base_SetConfig+0x40>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	4a45      	ldr	r2, [pc, #276]	@ (8009b48 <TIM_Base_SetConfig+0x148>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d003      	beq.n	8009a40 <TIM_Base_SetConfig+0x40>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	4a44      	ldr	r2, [pc, #272]	@ (8009b4c <TIM_Base_SetConfig+0x14c>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d108      	bne.n	8009a52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	4a39      	ldr	r2, [pc, #228]	@ (8009b3c <TIM_Base_SetConfig+0x13c>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d027      	beq.n	8009aaa <TIM_Base_SetConfig+0xaa>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a60:	d023      	beq.n	8009aaa <TIM_Base_SetConfig+0xaa>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	4a36      	ldr	r2, [pc, #216]	@ (8009b40 <TIM_Base_SetConfig+0x140>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d01f      	beq.n	8009aaa <TIM_Base_SetConfig+0xaa>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4a35      	ldr	r2, [pc, #212]	@ (8009b44 <TIM_Base_SetConfig+0x144>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d01b      	beq.n	8009aaa <TIM_Base_SetConfig+0xaa>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a34      	ldr	r2, [pc, #208]	@ (8009b48 <TIM_Base_SetConfig+0x148>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d017      	beq.n	8009aaa <TIM_Base_SetConfig+0xaa>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4a33      	ldr	r2, [pc, #204]	@ (8009b4c <TIM_Base_SetConfig+0x14c>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d013      	beq.n	8009aaa <TIM_Base_SetConfig+0xaa>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4a32      	ldr	r2, [pc, #200]	@ (8009b50 <TIM_Base_SetConfig+0x150>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d00f      	beq.n	8009aaa <TIM_Base_SetConfig+0xaa>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4a31      	ldr	r2, [pc, #196]	@ (8009b54 <TIM_Base_SetConfig+0x154>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d00b      	beq.n	8009aaa <TIM_Base_SetConfig+0xaa>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4a30      	ldr	r2, [pc, #192]	@ (8009b58 <TIM_Base_SetConfig+0x158>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d007      	beq.n	8009aaa <TIM_Base_SetConfig+0xaa>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4a2f      	ldr	r2, [pc, #188]	@ (8009b5c <TIM_Base_SetConfig+0x15c>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d003      	beq.n	8009aaa <TIM_Base_SetConfig+0xaa>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a2e      	ldr	r2, [pc, #184]	@ (8009b60 <TIM_Base_SetConfig+0x160>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d108      	bne.n	8009abc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	695b      	ldr	r3, [r3, #20]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	689a      	ldr	r2, [r3, #8]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a16      	ldr	r2, [pc, #88]	@ (8009b3c <TIM_Base_SetConfig+0x13c>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d00f      	beq.n	8009b08 <TIM_Base_SetConfig+0x108>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4a18      	ldr	r2, [pc, #96]	@ (8009b4c <TIM_Base_SetConfig+0x14c>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d00b      	beq.n	8009b08 <TIM_Base_SetConfig+0x108>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	4a17      	ldr	r2, [pc, #92]	@ (8009b50 <TIM_Base_SetConfig+0x150>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d007      	beq.n	8009b08 <TIM_Base_SetConfig+0x108>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	4a16      	ldr	r2, [pc, #88]	@ (8009b54 <TIM_Base_SetConfig+0x154>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d003      	beq.n	8009b08 <TIM_Base_SetConfig+0x108>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	4a15      	ldr	r2, [pc, #84]	@ (8009b58 <TIM_Base_SetConfig+0x158>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d103      	bne.n	8009b10 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	691a      	ldr	r2, [r3, #16]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	691b      	ldr	r3, [r3, #16]
 8009b1a:	f003 0301 	and.w	r3, r3, #1
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d105      	bne.n	8009b2e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	691b      	ldr	r3, [r3, #16]
 8009b26:	f023 0201 	bic.w	r2, r3, #1
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	611a      	str	r2, [r3, #16]
  }
}
 8009b2e:	bf00      	nop
 8009b30:	3714      	adds	r7, #20
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr
 8009b3a:	bf00      	nop
 8009b3c:	40010000 	.word	0x40010000
 8009b40:	40000400 	.word	0x40000400
 8009b44:	40000800 	.word	0x40000800
 8009b48:	40000c00 	.word	0x40000c00
 8009b4c:	40010400 	.word	0x40010400
 8009b50:	40014000 	.word	0x40014000
 8009b54:	40014400 	.word	0x40014400
 8009b58:	40014800 	.word	0x40014800
 8009b5c:	4000e000 	.word	0x4000e000
 8009b60:	4000e400 	.word	0x4000e400

08009b64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b087      	sub	sp, #28
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a1b      	ldr	r3, [r3, #32]
 8009b72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a1b      	ldr	r3, [r3, #32]
 8009b78:	f023 0201 	bic.w	r2, r3, #1
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	699b      	ldr	r3, [r3, #24]
 8009b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009b8c:	68fa      	ldr	r2, [r7, #12]
 8009b8e:	4b37      	ldr	r3, [pc, #220]	@ (8009c6c <TIM_OC1_SetConfig+0x108>)
 8009b90:	4013      	ands	r3, r2
 8009b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f023 0303 	bic.w	r3, r3, #3
 8009b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	f023 0302 	bic.w	r3, r3, #2
 8009bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	697a      	ldr	r2, [r7, #20]
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	4a2d      	ldr	r2, [pc, #180]	@ (8009c70 <TIM_OC1_SetConfig+0x10c>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d00f      	beq.n	8009be0 <TIM_OC1_SetConfig+0x7c>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4a2c      	ldr	r2, [pc, #176]	@ (8009c74 <TIM_OC1_SetConfig+0x110>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d00b      	beq.n	8009be0 <TIM_OC1_SetConfig+0x7c>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4a2b      	ldr	r2, [pc, #172]	@ (8009c78 <TIM_OC1_SetConfig+0x114>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d007      	beq.n	8009be0 <TIM_OC1_SetConfig+0x7c>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	4a2a      	ldr	r2, [pc, #168]	@ (8009c7c <TIM_OC1_SetConfig+0x118>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d003      	beq.n	8009be0 <TIM_OC1_SetConfig+0x7c>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	4a29      	ldr	r2, [pc, #164]	@ (8009c80 <TIM_OC1_SetConfig+0x11c>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d10c      	bne.n	8009bfa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	f023 0308 	bic.w	r3, r3, #8
 8009be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	697a      	ldr	r2, [r7, #20]
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	f023 0304 	bic.w	r3, r3, #4
 8009bf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4a1c      	ldr	r2, [pc, #112]	@ (8009c70 <TIM_OC1_SetConfig+0x10c>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d00f      	beq.n	8009c22 <TIM_OC1_SetConfig+0xbe>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	4a1b      	ldr	r2, [pc, #108]	@ (8009c74 <TIM_OC1_SetConfig+0x110>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d00b      	beq.n	8009c22 <TIM_OC1_SetConfig+0xbe>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	4a1a      	ldr	r2, [pc, #104]	@ (8009c78 <TIM_OC1_SetConfig+0x114>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d007      	beq.n	8009c22 <TIM_OC1_SetConfig+0xbe>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	4a19      	ldr	r2, [pc, #100]	@ (8009c7c <TIM_OC1_SetConfig+0x118>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d003      	beq.n	8009c22 <TIM_OC1_SetConfig+0xbe>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4a18      	ldr	r2, [pc, #96]	@ (8009c80 <TIM_OC1_SetConfig+0x11c>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d111      	bne.n	8009c46 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	695b      	ldr	r3, [r3, #20]
 8009c36:	693a      	ldr	r2, [r7, #16]
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	699b      	ldr	r3, [r3, #24]
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	4313      	orrs	r3, r2
 8009c44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	693a      	ldr	r2, [r7, #16]
 8009c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	685a      	ldr	r2, [r3, #4]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	697a      	ldr	r2, [r7, #20]
 8009c5e:	621a      	str	r2, [r3, #32]
}
 8009c60:	bf00      	nop
 8009c62:	371c      	adds	r7, #28
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr
 8009c6c:	fffeff8f 	.word	0xfffeff8f
 8009c70:	40010000 	.word	0x40010000
 8009c74:	40010400 	.word	0x40010400
 8009c78:	40014000 	.word	0x40014000
 8009c7c:	40014400 	.word	0x40014400
 8009c80:	40014800 	.word	0x40014800

08009c84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b087      	sub	sp, #28
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a1b      	ldr	r3, [r3, #32]
 8009c92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6a1b      	ldr	r3, [r3, #32]
 8009c98:	f023 0210 	bic.w	r2, r3, #16
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	699b      	ldr	r3, [r3, #24]
 8009caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	4b34      	ldr	r3, [pc, #208]	@ (8009d80 <TIM_OC2_SetConfig+0xfc>)
 8009cb0:	4013      	ands	r3, r2
 8009cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	021b      	lsls	r3, r3, #8
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	f023 0320 	bic.w	r3, r3, #32
 8009cce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	011b      	lsls	r3, r3, #4
 8009cd6:	697a      	ldr	r2, [r7, #20]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4a29      	ldr	r2, [pc, #164]	@ (8009d84 <TIM_OC2_SetConfig+0x100>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d003      	beq.n	8009cec <TIM_OC2_SetConfig+0x68>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4a28      	ldr	r2, [pc, #160]	@ (8009d88 <TIM_OC2_SetConfig+0x104>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d10d      	bne.n	8009d08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	011b      	lsls	r3, r3, #4
 8009cfa:	697a      	ldr	r2, [r7, #20]
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8009d84 <TIM_OC2_SetConfig+0x100>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d00f      	beq.n	8009d30 <TIM_OC2_SetConfig+0xac>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	4a1d      	ldr	r2, [pc, #116]	@ (8009d88 <TIM_OC2_SetConfig+0x104>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d00b      	beq.n	8009d30 <TIM_OC2_SetConfig+0xac>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a1c      	ldr	r2, [pc, #112]	@ (8009d8c <TIM_OC2_SetConfig+0x108>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d007      	beq.n	8009d30 <TIM_OC2_SetConfig+0xac>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a1b      	ldr	r2, [pc, #108]	@ (8009d90 <TIM_OC2_SetConfig+0x10c>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d003      	beq.n	8009d30 <TIM_OC2_SetConfig+0xac>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a1a      	ldr	r2, [pc, #104]	@ (8009d94 <TIM_OC2_SetConfig+0x110>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d113      	bne.n	8009d58 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009d36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	695b      	ldr	r3, [r3, #20]
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	693a      	ldr	r2, [r7, #16]
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	699b      	ldr	r3, [r3, #24]
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	693a      	ldr	r2, [r7, #16]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	693a      	ldr	r2, [r7, #16]
 8009d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	697a      	ldr	r2, [r7, #20]
 8009d70:	621a      	str	r2, [r3, #32]
}
 8009d72:	bf00      	nop
 8009d74:	371c      	adds	r7, #28
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	feff8fff 	.word	0xfeff8fff
 8009d84:	40010000 	.word	0x40010000
 8009d88:	40010400 	.word	0x40010400
 8009d8c:	40014000 	.word	0x40014000
 8009d90:	40014400 	.word	0x40014400
 8009d94:	40014800 	.word	0x40014800

08009d98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b087      	sub	sp, #28
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6a1b      	ldr	r3, [r3, #32]
 8009da6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6a1b      	ldr	r3, [r3, #32]
 8009dac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	69db      	ldr	r3, [r3, #28]
 8009dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	4b33      	ldr	r3, [pc, #204]	@ (8009e90 <TIM_OC3_SetConfig+0xf8>)
 8009dc4:	4013      	ands	r3, r2
 8009dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f023 0303 	bic.w	r3, r3, #3
 8009dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	021b      	lsls	r3, r3, #8
 8009de8:	697a      	ldr	r2, [r7, #20]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	4a28      	ldr	r2, [pc, #160]	@ (8009e94 <TIM_OC3_SetConfig+0xfc>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d003      	beq.n	8009dfe <TIM_OC3_SetConfig+0x66>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4a27      	ldr	r2, [pc, #156]	@ (8009e98 <TIM_OC3_SetConfig+0x100>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d10d      	bne.n	8009e1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	021b      	lsls	r3, r3, #8
 8009e0c:	697a      	ldr	r2, [r7, #20]
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8009e94 <TIM_OC3_SetConfig+0xfc>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d00f      	beq.n	8009e42 <TIM_OC3_SetConfig+0xaa>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4a1c      	ldr	r2, [pc, #112]	@ (8009e98 <TIM_OC3_SetConfig+0x100>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d00b      	beq.n	8009e42 <TIM_OC3_SetConfig+0xaa>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8009e9c <TIM_OC3_SetConfig+0x104>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d007      	beq.n	8009e42 <TIM_OC3_SetConfig+0xaa>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4a1a      	ldr	r2, [pc, #104]	@ (8009ea0 <TIM_OC3_SetConfig+0x108>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d003      	beq.n	8009e42 <TIM_OC3_SetConfig+0xaa>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4a19      	ldr	r2, [pc, #100]	@ (8009ea4 <TIM_OC3_SetConfig+0x10c>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d113      	bne.n	8009e6a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009e50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	695b      	ldr	r3, [r3, #20]
 8009e56:	011b      	lsls	r3, r3, #4
 8009e58:	693a      	ldr	r2, [r7, #16]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	699b      	ldr	r3, [r3, #24]
 8009e62:	011b      	lsls	r3, r3, #4
 8009e64:	693a      	ldr	r2, [r7, #16]
 8009e66:	4313      	orrs	r3, r2
 8009e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	693a      	ldr	r2, [r7, #16]
 8009e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	68fa      	ldr	r2, [r7, #12]
 8009e74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	685a      	ldr	r2, [r3, #4]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	697a      	ldr	r2, [r7, #20]
 8009e82:	621a      	str	r2, [r3, #32]
}
 8009e84:	bf00      	nop
 8009e86:	371c      	adds	r7, #28
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr
 8009e90:	fffeff8f 	.word	0xfffeff8f
 8009e94:	40010000 	.word	0x40010000
 8009e98:	40010400 	.word	0x40010400
 8009e9c:	40014000 	.word	0x40014000
 8009ea0:	40014400 	.word	0x40014400
 8009ea4:	40014800 	.word	0x40014800

08009ea8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b087      	sub	sp, #28
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6a1b      	ldr	r3, [r3, #32]
 8009eb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6a1b      	ldr	r3, [r3, #32]
 8009ebc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	69db      	ldr	r3, [r3, #28]
 8009ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ed0:	68fa      	ldr	r2, [r7, #12]
 8009ed2:	4b24      	ldr	r3, [pc, #144]	@ (8009f64 <TIM_OC4_SetConfig+0xbc>)
 8009ed4:	4013      	ands	r3, r2
 8009ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	021b      	lsls	r3, r3, #8
 8009ee6:	68fa      	ldr	r2, [r7, #12]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009ef2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	031b      	lsls	r3, r3, #12
 8009efa:	693a      	ldr	r2, [r7, #16]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4a19      	ldr	r2, [pc, #100]	@ (8009f68 <TIM_OC4_SetConfig+0xc0>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d00f      	beq.n	8009f28 <TIM_OC4_SetConfig+0x80>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4a18      	ldr	r2, [pc, #96]	@ (8009f6c <TIM_OC4_SetConfig+0xc4>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d00b      	beq.n	8009f28 <TIM_OC4_SetConfig+0x80>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4a17      	ldr	r2, [pc, #92]	@ (8009f70 <TIM_OC4_SetConfig+0xc8>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d007      	beq.n	8009f28 <TIM_OC4_SetConfig+0x80>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	4a16      	ldr	r2, [pc, #88]	@ (8009f74 <TIM_OC4_SetConfig+0xcc>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d003      	beq.n	8009f28 <TIM_OC4_SetConfig+0x80>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	4a15      	ldr	r2, [pc, #84]	@ (8009f78 <TIM_OC4_SetConfig+0xd0>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d109      	bne.n	8009f3c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009f2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	695b      	ldr	r3, [r3, #20]
 8009f34:	019b      	lsls	r3, r3, #6
 8009f36:	697a      	ldr	r2, [r7, #20]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	697a      	ldr	r2, [r7, #20]
 8009f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	685a      	ldr	r2, [r3, #4]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	621a      	str	r2, [r3, #32]
}
 8009f56:	bf00      	nop
 8009f58:	371c      	adds	r7, #28
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	feff8fff 	.word	0xfeff8fff
 8009f68:	40010000 	.word	0x40010000
 8009f6c:	40010400 	.word	0x40010400
 8009f70:	40014000 	.word	0x40014000
 8009f74:	40014400 	.word	0x40014400
 8009f78:	40014800 	.word	0x40014800

08009f7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b087      	sub	sp, #28
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a1b      	ldr	r3, [r3, #32]
 8009f8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6a1b      	ldr	r3, [r3, #32]
 8009f90:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	4b21      	ldr	r3, [pc, #132]	@ (800a02c <TIM_OC5_SetConfig+0xb0>)
 8009fa8:	4013      	ands	r3, r2
 8009faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009fbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	041b      	lsls	r3, r3, #16
 8009fc4:	693a      	ldr	r2, [r7, #16]
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	4a18      	ldr	r2, [pc, #96]	@ (800a030 <TIM_OC5_SetConfig+0xb4>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d00f      	beq.n	8009ff2 <TIM_OC5_SetConfig+0x76>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	4a17      	ldr	r2, [pc, #92]	@ (800a034 <TIM_OC5_SetConfig+0xb8>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d00b      	beq.n	8009ff2 <TIM_OC5_SetConfig+0x76>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4a16      	ldr	r2, [pc, #88]	@ (800a038 <TIM_OC5_SetConfig+0xbc>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d007      	beq.n	8009ff2 <TIM_OC5_SetConfig+0x76>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4a15      	ldr	r2, [pc, #84]	@ (800a03c <TIM_OC5_SetConfig+0xc0>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d003      	beq.n	8009ff2 <TIM_OC5_SetConfig+0x76>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4a14      	ldr	r2, [pc, #80]	@ (800a040 <TIM_OC5_SetConfig+0xc4>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d109      	bne.n	800a006 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	695b      	ldr	r3, [r3, #20]
 8009ffe:	021b      	lsls	r3, r3, #8
 800a000:	697a      	ldr	r2, [r7, #20]
 800a002:	4313      	orrs	r3, r2
 800a004:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	697a      	ldr	r2, [r7, #20]
 800a00a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	68fa      	ldr	r2, [r7, #12]
 800a010:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	685a      	ldr	r2, [r3, #4]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	693a      	ldr	r2, [r7, #16]
 800a01e:	621a      	str	r2, [r3, #32]
}
 800a020:	bf00      	nop
 800a022:	371c      	adds	r7, #28
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr
 800a02c:	fffeff8f 	.word	0xfffeff8f
 800a030:	40010000 	.word	0x40010000
 800a034:	40010400 	.word	0x40010400
 800a038:	40014000 	.word	0x40014000
 800a03c:	40014400 	.word	0x40014400
 800a040:	40014800 	.word	0x40014800

0800a044 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a044:	b480      	push	{r7}
 800a046:	b087      	sub	sp, #28
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6a1b      	ldr	r3, [r3, #32]
 800a052:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6a1b      	ldr	r3, [r3, #32]
 800a058:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a06a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a06c:	68fa      	ldr	r2, [r7, #12]
 800a06e:	4b22      	ldr	r3, [pc, #136]	@ (800a0f8 <TIM_OC6_SetConfig+0xb4>)
 800a070:	4013      	ands	r3, r2
 800a072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	021b      	lsls	r3, r3, #8
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a086:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	051b      	lsls	r3, r3, #20
 800a08e:	693a      	ldr	r2, [r7, #16]
 800a090:	4313      	orrs	r3, r2
 800a092:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	4a19      	ldr	r2, [pc, #100]	@ (800a0fc <TIM_OC6_SetConfig+0xb8>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d00f      	beq.n	800a0bc <TIM_OC6_SetConfig+0x78>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	4a18      	ldr	r2, [pc, #96]	@ (800a100 <TIM_OC6_SetConfig+0xbc>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d00b      	beq.n	800a0bc <TIM_OC6_SetConfig+0x78>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	4a17      	ldr	r2, [pc, #92]	@ (800a104 <TIM_OC6_SetConfig+0xc0>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d007      	beq.n	800a0bc <TIM_OC6_SetConfig+0x78>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4a16      	ldr	r2, [pc, #88]	@ (800a108 <TIM_OC6_SetConfig+0xc4>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d003      	beq.n	800a0bc <TIM_OC6_SetConfig+0x78>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	4a15      	ldr	r2, [pc, #84]	@ (800a10c <TIM_OC6_SetConfig+0xc8>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d109      	bne.n	800a0d0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a0c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	695b      	ldr	r3, [r3, #20]
 800a0c8:	029b      	lsls	r3, r3, #10
 800a0ca:	697a      	ldr	r2, [r7, #20]
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	697a      	ldr	r2, [r7, #20]
 800a0d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	685a      	ldr	r2, [r3, #4]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	693a      	ldr	r2, [r7, #16]
 800a0e8:	621a      	str	r2, [r3, #32]
}
 800a0ea:	bf00      	nop
 800a0ec:	371c      	adds	r7, #28
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	feff8fff 	.word	0xfeff8fff
 800a0fc:	40010000 	.word	0x40010000
 800a100:	40010400 	.word	0x40010400
 800a104:	40014000 	.word	0x40014000
 800a108:	40014400 	.word	0x40014400
 800a10c:	40014800 	.word	0x40014800

0800a110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a110:	b480      	push	{r7}
 800a112:	b087      	sub	sp, #28
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6a1b      	ldr	r3, [r3, #32]
 800a120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6a1b      	ldr	r3, [r3, #32]
 800a126:	f023 0201 	bic.w	r2, r3, #1
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	699b      	ldr	r3, [r3, #24]
 800a132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a13a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	011b      	lsls	r3, r3, #4
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	4313      	orrs	r3, r2
 800a144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	f023 030a 	bic.w	r3, r3, #10
 800a14c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a14e:	697a      	ldr	r2, [r7, #20]
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	4313      	orrs	r3, r2
 800a154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	693a      	ldr	r2, [r7, #16]
 800a15a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	621a      	str	r2, [r3, #32]
}
 800a162:	bf00      	nop
 800a164:	371c      	adds	r7, #28
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr

0800a16e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a16e:	b480      	push	{r7}
 800a170:	b087      	sub	sp, #28
 800a172:	af00      	add	r7, sp, #0
 800a174:	60f8      	str	r0, [r7, #12]
 800a176:	60b9      	str	r1, [r7, #8]
 800a178:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	6a1b      	ldr	r3, [r3, #32]
 800a17e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	6a1b      	ldr	r3, [r3, #32]
 800a184:	f023 0210 	bic.w	r2, r3, #16
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	699b      	ldr	r3, [r3, #24]
 800a190:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a198:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	031b      	lsls	r3, r3, #12
 800a19e:	693a      	ldr	r2, [r7, #16]
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a1aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	011b      	lsls	r3, r3, #4
 800a1b0:	697a      	ldr	r2, [r7, #20]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	693a      	ldr	r2, [r7, #16]
 800a1ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	697a      	ldr	r2, [r7, #20]
 800a1c0:	621a      	str	r2, [r3, #32]
}
 800a1c2:	bf00      	nop
 800a1c4:	371c      	adds	r7, #28
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
	...

0800a1d0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	4b09      	ldr	r3, [pc, #36]	@ (800a208 <TIM_ITRx_SetConfig+0x38>)
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a1e8:	683a      	ldr	r2, [r7, #0]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	f043 0307 	orr.w	r3, r3, #7
 800a1f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	609a      	str	r2, [r3, #8]
}
 800a1fa:	bf00      	nop
 800a1fc:	3714      	adds	r7, #20
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop
 800a208:	ffcfff8f 	.word	0xffcfff8f

0800a20c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b087      	sub	sp, #28
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	607a      	str	r2, [r7, #4]
 800a218:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a226:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	021a      	lsls	r2, r3, #8
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	431a      	orrs	r2, r3
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	4313      	orrs	r3, r2
 800a234:	697a      	ldr	r2, [r7, #20]
 800a236:	4313      	orrs	r3, r2
 800a238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	697a      	ldr	r2, [r7, #20]
 800a23e:	609a      	str	r2, [r3, #8]
}
 800a240:	bf00      	nop
 800a242:	371c      	adds	r7, #28
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d101      	bne.n	800a264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a260:	2302      	movs	r3, #2
 800a262:	e077      	b.n	800a354 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2201      	movs	r2, #1
 800a268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2202      	movs	r2, #2
 800a270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a35      	ldr	r2, [pc, #212]	@ (800a360 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d004      	beq.n	800a298 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a34      	ldr	r2, [pc, #208]	@ (800a364 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d108      	bne.n	800a2aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a29e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	68fa      	ldr	r2, [r7, #12]
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68fa      	ldr	r2, [r7, #12]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a25      	ldr	r2, [pc, #148]	@ (800a360 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d02c      	beq.n	800a328 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2d6:	d027      	beq.n	800a328 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a22      	ldr	r2, [pc, #136]	@ (800a368 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d022      	beq.n	800a328 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a21      	ldr	r2, [pc, #132]	@ (800a36c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d01d      	beq.n	800a328 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a1f      	ldr	r2, [pc, #124]	@ (800a370 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d018      	beq.n	800a328 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a1a      	ldr	r2, [pc, #104]	@ (800a364 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d013      	beq.n	800a328 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a1b      	ldr	r2, [pc, #108]	@ (800a374 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d00e      	beq.n	800a328 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a1a      	ldr	r2, [pc, #104]	@ (800a378 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d009      	beq.n	800a328 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a18      	ldr	r2, [pc, #96]	@ (800a37c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d004      	beq.n	800a328 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4a17      	ldr	r2, [pc, #92]	@ (800a380 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d10c      	bne.n	800a342 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a32e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	68ba      	ldr	r2, [r7, #8]
 800a336:	4313      	orrs	r3, r2
 800a338:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	68ba      	ldr	r2, [r7, #8]
 800a340:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2201      	movs	r2, #1
 800a346:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a352:	2300      	movs	r3, #0
}
 800a354:	4618      	mov	r0, r3
 800a356:	3714      	adds	r7, #20
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr
 800a360:	40010000 	.word	0x40010000
 800a364:	40010400 	.word	0x40010400
 800a368:	40000400 	.word	0x40000400
 800a36c:	40000800 	.word	0x40000800
 800a370:	40000c00 	.word	0x40000c00
 800a374:	40001800 	.word	0x40001800
 800a378:	40014000 	.word	0x40014000
 800a37c:	4000e000 	.word	0x4000e000
 800a380:	4000e400 	.word	0x4000e400

0800a384 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a38e:	2300      	movs	r3, #0
 800a390:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d101      	bne.n	800a3a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a39c:	2302      	movs	r3, #2
 800a39e:	e073      	b.n	800a488 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	695b      	ldr	r3, [r3, #20]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a406:	4313      	orrs	r3, r2
 800a408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	699b      	ldr	r3, [r3, #24]
 800a414:	041b      	lsls	r3, r3, #16
 800a416:	4313      	orrs	r3, r2
 800a418:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	69db      	ldr	r3, [r3, #28]
 800a424:	4313      	orrs	r3, r2
 800a426:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a19      	ldr	r2, [pc, #100]	@ (800a494 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d004      	beq.n	800a43c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a18      	ldr	r2, [pc, #96]	@ (800a498 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d11c      	bne.n	800a476 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a446:	051b      	lsls	r3, r3, #20
 800a448:	4313      	orrs	r3, r2
 800a44a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	6a1b      	ldr	r3, [r3, #32]
 800a456:	4313      	orrs	r3, r2
 800a458:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a464:	4313      	orrs	r3, r2
 800a466:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a472:	4313      	orrs	r3, r2
 800a474:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	68fa      	ldr	r2, [r7, #12]
 800a47c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2200      	movs	r2, #0
 800a482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3714      	adds	r7, #20
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr
 800a494:	40010000 	.word	0x40010000
 800a498:	40010400 	.word	0x40010400

0800a49c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b083      	sub	sp, #12
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a4a4:	bf00      	nop
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a4b8:	bf00      	nop
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a4cc:	bf00      	nop
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d101      	bne.n	800a4ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e042      	b.n	800a570 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d106      	bne.n	800a502 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f7f7 fb7b 	bl	8001bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2224      	movs	r2, #36	@ 0x24
 800a506:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f022 0201 	bic.w	r2, r2, #1
 800a518:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d002      	beq.n	800a528 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 ff22 	bl	800b36c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 f8b3 	bl	800a694 <UART_SetConfig>
 800a52e:	4603      	mov	r3, r0
 800a530:	2b01      	cmp	r3, #1
 800a532:	d101      	bne.n	800a538 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a534:	2301      	movs	r3, #1
 800a536:	e01b      	b.n	800a570 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	685a      	ldr	r2, [r3, #4]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a546:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	689a      	ldr	r2, [r3, #8]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a556:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f042 0201 	orr.w	r2, r2, #1
 800a566:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 ffa1 	bl	800b4b0 <UART_CheckIdleState>
 800a56e:	4603      	mov	r3, r0
}
 800a570:	4618      	mov	r0, r3
 800a572:	3708      	adds	r7, #8
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b08a      	sub	sp, #40	@ 0x28
 800a57c:	af02      	add	r7, sp, #8
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	603b      	str	r3, [r7, #0]
 800a584:	4613      	mov	r3, r2
 800a586:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a58e:	2b20      	cmp	r3, #32
 800a590:	d17b      	bne.n	800a68a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d002      	beq.n	800a59e <HAL_UART_Transmit+0x26>
 800a598:	88fb      	ldrh	r3, [r7, #6]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d101      	bne.n	800a5a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e074      	b.n	800a68c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2221      	movs	r2, #33	@ 0x21
 800a5ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a5b2:	f7f7 fd8f 	bl	80020d4 <HAL_GetTick>
 800a5b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	88fa      	ldrh	r2, [r7, #6]
 800a5bc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	88fa      	ldrh	r2, [r7, #6]
 800a5c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5d0:	d108      	bne.n	800a5e4 <HAL_UART_Transmit+0x6c>
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	691b      	ldr	r3, [r3, #16]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d104      	bne.n	800a5e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	61bb      	str	r3, [r7, #24]
 800a5e2:	e003      	b.n	800a5ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a5ec:	e030      	b.n	800a650 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	9300      	str	r3, [sp, #0]
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	2180      	movs	r1, #128	@ 0x80
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	f001 f803 	bl	800b604 <UART_WaitOnFlagUntilTimeout>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d005      	beq.n	800a610 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2220      	movs	r2, #32
 800a608:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a60c:	2303      	movs	r3, #3
 800a60e:	e03d      	b.n	800a68c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a610:	69fb      	ldr	r3, [r7, #28]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d10b      	bne.n	800a62e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a616:	69bb      	ldr	r3, [r7, #24]
 800a618:	881b      	ldrh	r3, [r3, #0]
 800a61a:	461a      	mov	r2, r3
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a624:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a626:	69bb      	ldr	r3, [r7, #24]
 800a628:	3302      	adds	r3, #2
 800a62a:	61bb      	str	r3, [r7, #24]
 800a62c:	e007      	b.n	800a63e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	781a      	ldrb	r2, [r3, #0]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a638:	69fb      	ldr	r3, [r7, #28]
 800a63a:	3301      	adds	r3, #1
 800a63c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a644:	b29b      	uxth	r3, r3
 800a646:	3b01      	subs	r3, #1
 800a648:	b29a      	uxth	r2, r3
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a656:	b29b      	uxth	r3, r3
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d1c8      	bne.n	800a5ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	9300      	str	r3, [sp, #0]
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	2200      	movs	r2, #0
 800a664:	2140      	movs	r1, #64	@ 0x40
 800a666:	68f8      	ldr	r0, [r7, #12]
 800a668:	f000 ffcc 	bl	800b604 <UART_WaitOnFlagUntilTimeout>
 800a66c:	4603      	mov	r3, r0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d005      	beq.n	800a67e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2220      	movs	r2, #32
 800a676:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a67a:	2303      	movs	r3, #3
 800a67c:	e006      	b.n	800a68c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2220      	movs	r2, #32
 800a682:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a686:	2300      	movs	r3, #0
 800a688:	e000      	b.n	800a68c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a68a:	2302      	movs	r3, #2
  }
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3720      	adds	r7, #32
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a698:	b092      	sub	sp, #72	@ 0x48
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	689a      	ldr	r2, [r3, #8]
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	691b      	ldr	r3, [r3, #16]
 800a6ac:	431a      	orrs	r2, r3
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	695b      	ldr	r3, [r3, #20]
 800a6b2:	431a      	orrs	r2, r3
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	69db      	ldr	r3, [r3, #28]
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	681a      	ldr	r2, [r3, #0]
 800a6c2:	4bbe      	ldr	r3, [pc, #760]	@ (800a9bc <UART_SetConfig+0x328>)
 800a6c4:	4013      	ands	r3, r2
 800a6c6:	697a      	ldr	r2, [r7, #20]
 800a6c8:	6812      	ldr	r2, [r2, #0]
 800a6ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a6cc:	430b      	orrs	r3, r1
 800a6ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	68da      	ldr	r2, [r3, #12]
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	430a      	orrs	r2, r1
 800a6e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	699b      	ldr	r3, [r3, #24]
 800a6ea:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4ab3      	ldr	r2, [pc, #716]	@ (800a9c0 <UART_SetConfig+0x32c>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d004      	beq.n	800a700 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	6a1b      	ldr	r3, [r3, #32]
 800a6fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	689a      	ldr	r2, [r3, #8]
 800a706:	4baf      	ldr	r3, [pc, #700]	@ (800a9c4 <UART_SetConfig+0x330>)
 800a708:	4013      	ands	r3, r2
 800a70a:	697a      	ldr	r2, [r7, #20]
 800a70c:	6812      	ldr	r2, [r2, #0]
 800a70e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a710:	430b      	orrs	r3, r1
 800a712:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a71a:	f023 010f 	bic.w	r1, r3, #15
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	430a      	orrs	r2, r1
 800a728:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4aa6      	ldr	r2, [pc, #664]	@ (800a9c8 <UART_SetConfig+0x334>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d177      	bne.n	800a824 <UART_SetConfig+0x190>
 800a734:	4ba5      	ldr	r3, [pc, #660]	@ (800a9cc <UART_SetConfig+0x338>)
 800a736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a738:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a73c:	2b28      	cmp	r3, #40	@ 0x28
 800a73e:	d86d      	bhi.n	800a81c <UART_SetConfig+0x188>
 800a740:	a201      	add	r2, pc, #4	@ (adr r2, 800a748 <UART_SetConfig+0xb4>)
 800a742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a746:	bf00      	nop
 800a748:	0800a7ed 	.word	0x0800a7ed
 800a74c:	0800a81d 	.word	0x0800a81d
 800a750:	0800a81d 	.word	0x0800a81d
 800a754:	0800a81d 	.word	0x0800a81d
 800a758:	0800a81d 	.word	0x0800a81d
 800a75c:	0800a81d 	.word	0x0800a81d
 800a760:	0800a81d 	.word	0x0800a81d
 800a764:	0800a81d 	.word	0x0800a81d
 800a768:	0800a7f5 	.word	0x0800a7f5
 800a76c:	0800a81d 	.word	0x0800a81d
 800a770:	0800a81d 	.word	0x0800a81d
 800a774:	0800a81d 	.word	0x0800a81d
 800a778:	0800a81d 	.word	0x0800a81d
 800a77c:	0800a81d 	.word	0x0800a81d
 800a780:	0800a81d 	.word	0x0800a81d
 800a784:	0800a81d 	.word	0x0800a81d
 800a788:	0800a7fd 	.word	0x0800a7fd
 800a78c:	0800a81d 	.word	0x0800a81d
 800a790:	0800a81d 	.word	0x0800a81d
 800a794:	0800a81d 	.word	0x0800a81d
 800a798:	0800a81d 	.word	0x0800a81d
 800a79c:	0800a81d 	.word	0x0800a81d
 800a7a0:	0800a81d 	.word	0x0800a81d
 800a7a4:	0800a81d 	.word	0x0800a81d
 800a7a8:	0800a805 	.word	0x0800a805
 800a7ac:	0800a81d 	.word	0x0800a81d
 800a7b0:	0800a81d 	.word	0x0800a81d
 800a7b4:	0800a81d 	.word	0x0800a81d
 800a7b8:	0800a81d 	.word	0x0800a81d
 800a7bc:	0800a81d 	.word	0x0800a81d
 800a7c0:	0800a81d 	.word	0x0800a81d
 800a7c4:	0800a81d 	.word	0x0800a81d
 800a7c8:	0800a80d 	.word	0x0800a80d
 800a7cc:	0800a81d 	.word	0x0800a81d
 800a7d0:	0800a81d 	.word	0x0800a81d
 800a7d4:	0800a81d 	.word	0x0800a81d
 800a7d8:	0800a81d 	.word	0x0800a81d
 800a7dc:	0800a81d 	.word	0x0800a81d
 800a7e0:	0800a81d 	.word	0x0800a81d
 800a7e4:	0800a81d 	.word	0x0800a81d
 800a7e8:	0800a815 	.word	0x0800a815
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7f2:	e326      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a7f4:	2304      	movs	r3, #4
 800a7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a7fa:	e322      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a7fc:	2308      	movs	r3, #8
 800a7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a802:	e31e      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a804:	2310      	movs	r3, #16
 800a806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a80a:	e31a      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a80c:	2320      	movs	r3, #32
 800a80e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a812:	e316      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a814:	2340      	movs	r3, #64	@ 0x40
 800a816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a81a:	e312      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a81c:	2380      	movs	r3, #128	@ 0x80
 800a81e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a822:	e30e      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a69      	ldr	r2, [pc, #420]	@ (800a9d0 <UART_SetConfig+0x33c>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d130      	bne.n	800a890 <UART_SetConfig+0x1fc>
 800a82e:	4b67      	ldr	r3, [pc, #412]	@ (800a9cc <UART_SetConfig+0x338>)
 800a830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a832:	f003 0307 	and.w	r3, r3, #7
 800a836:	2b05      	cmp	r3, #5
 800a838:	d826      	bhi.n	800a888 <UART_SetConfig+0x1f4>
 800a83a:	a201      	add	r2, pc, #4	@ (adr r2, 800a840 <UART_SetConfig+0x1ac>)
 800a83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a840:	0800a859 	.word	0x0800a859
 800a844:	0800a861 	.word	0x0800a861
 800a848:	0800a869 	.word	0x0800a869
 800a84c:	0800a871 	.word	0x0800a871
 800a850:	0800a879 	.word	0x0800a879
 800a854:	0800a881 	.word	0x0800a881
 800a858:	2300      	movs	r3, #0
 800a85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a85e:	e2f0      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a860:	2304      	movs	r3, #4
 800a862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a866:	e2ec      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a868:	2308      	movs	r3, #8
 800a86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a86e:	e2e8      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a870:	2310      	movs	r3, #16
 800a872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a876:	e2e4      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a878:	2320      	movs	r3, #32
 800a87a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a87e:	e2e0      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a880:	2340      	movs	r3, #64	@ 0x40
 800a882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a886:	e2dc      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a888:	2380      	movs	r3, #128	@ 0x80
 800a88a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a88e:	e2d8      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a4f      	ldr	r2, [pc, #316]	@ (800a9d4 <UART_SetConfig+0x340>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d130      	bne.n	800a8fc <UART_SetConfig+0x268>
 800a89a:	4b4c      	ldr	r3, [pc, #304]	@ (800a9cc <UART_SetConfig+0x338>)
 800a89c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a89e:	f003 0307 	and.w	r3, r3, #7
 800a8a2:	2b05      	cmp	r3, #5
 800a8a4:	d826      	bhi.n	800a8f4 <UART_SetConfig+0x260>
 800a8a6:	a201      	add	r2, pc, #4	@ (adr r2, 800a8ac <UART_SetConfig+0x218>)
 800a8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ac:	0800a8c5 	.word	0x0800a8c5
 800a8b0:	0800a8cd 	.word	0x0800a8cd
 800a8b4:	0800a8d5 	.word	0x0800a8d5
 800a8b8:	0800a8dd 	.word	0x0800a8dd
 800a8bc:	0800a8e5 	.word	0x0800a8e5
 800a8c0:	0800a8ed 	.word	0x0800a8ed
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ca:	e2ba      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a8cc:	2304      	movs	r3, #4
 800a8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8d2:	e2b6      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a8d4:	2308      	movs	r3, #8
 800a8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8da:	e2b2      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a8dc:	2310      	movs	r3, #16
 800a8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8e2:	e2ae      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a8e4:	2320      	movs	r3, #32
 800a8e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ea:	e2aa      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a8ec:	2340      	movs	r3, #64	@ 0x40
 800a8ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8f2:	e2a6      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a8f4:	2380      	movs	r3, #128	@ 0x80
 800a8f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8fa:	e2a2      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a35      	ldr	r2, [pc, #212]	@ (800a9d8 <UART_SetConfig+0x344>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d130      	bne.n	800a968 <UART_SetConfig+0x2d4>
 800a906:	4b31      	ldr	r3, [pc, #196]	@ (800a9cc <UART_SetConfig+0x338>)
 800a908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a90a:	f003 0307 	and.w	r3, r3, #7
 800a90e:	2b05      	cmp	r3, #5
 800a910:	d826      	bhi.n	800a960 <UART_SetConfig+0x2cc>
 800a912:	a201      	add	r2, pc, #4	@ (adr r2, 800a918 <UART_SetConfig+0x284>)
 800a914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a918:	0800a931 	.word	0x0800a931
 800a91c:	0800a939 	.word	0x0800a939
 800a920:	0800a941 	.word	0x0800a941
 800a924:	0800a949 	.word	0x0800a949
 800a928:	0800a951 	.word	0x0800a951
 800a92c:	0800a959 	.word	0x0800a959
 800a930:	2300      	movs	r3, #0
 800a932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a936:	e284      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a938:	2304      	movs	r3, #4
 800a93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a93e:	e280      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a940:	2308      	movs	r3, #8
 800a942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a946:	e27c      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a948:	2310      	movs	r3, #16
 800a94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a94e:	e278      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a950:	2320      	movs	r3, #32
 800a952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a956:	e274      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a958:	2340      	movs	r3, #64	@ 0x40
 800a95a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a95e:	e270      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a960:	2380      	movs	r3, #128	@ 0x80
 800a962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a966:	e26c      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a1b      	ldr	r2, [pc, #108]	@ (800a9dc <UART_SetConfig+0x348>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d142      	bne.n	800a9f8 <UART_SetConfig+0x364>
 800a972:	4b16      	ldr	r3, [pc, #88]	@ (800a9cc <UART_SetConfig+0x338>)
 800a974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a976:	f003 0307 	and.w	r3, r3, #7
 800a97a:	2b05      	cmp	r3, #5
 800a97c:	d838      	bhi.n	800a9f0 <UART_SetConfig+0x35c>
 800a97e:	a201      	add	r2, pc, #4	@ (adr r2, 800a984 <UART_SetConfig+0x2f0>)
 800a980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a984:	0800a99d 	.word	0x0800a99d
 800a988:	0800a9a5 	.word	0x0800a9a5
 800a98c:	0800a9ad 	.word	0x0800a9ad
 800a990:	0800a9b5 	.word	0x0800a9b5
 800a994:	0800a9e1 	.word	0x0800a9e1
 800a998:	0800a9e9 	.word	0x0800a9e9
 800a99c:	2300      	movs	r3, #0
 800a99e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9a2:	e24e      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a9a4:	2304      	movs	r3, #4
 800a9a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9aa:	e24a      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a9ac:	2308      	movs	r3, #8
 800a9ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9b2:	e246      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a9b4:	2310      	movs	r3, #16
 800a9b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ba:	e242      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a9bc:	cfff69f3 	.word	0xcfff69f3
 800a9c0:	58000c00 	.word	0x58000c00
 800a9c4:	11fff4ff 	.word	0x11fff4ff
 800a9c8:	40011000 	.word	0x40011000
 800a9cc:	58024400 	.word	0x58024400
 800a9d0:	40004400 	.word	0x40004400
 800a9d4:	40004800 	.word	0x40004800
 800a9d8:	40004c00 	.word	0x40004c00
 800a9dc:	40005000 	.word	0x40005000
 800a9e0:	2320      	movs	r3, #32
 800a9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9e6:	e22c      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a9e8:	2340      	movs	r3, #64	@ 0x40
 800a9ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ee:	e228      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a9f0:	2380      	movs	r3, #128	@ 0x80
 800a9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9f6:	e224      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4ab1      	ldr	r2, [pc, #708]	@ (800acc4 <UART_SetConfig+0x630>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d176      	bne.n	800aaf0 <UART_SetConfig+0x45c>
 800aa02:	4bb1      	ldr	r3, [pc, #708]	@ (800acc8 <UART_SetConfig+0x634>)
 800aa04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa06:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aa0a:	2b28      	cmp	r3, #40	@ 0x28
 800aa0c:	d86c      	bhi.n	800aae8 <UART_SetConfig+0x454>
 800aa0e:	a201      	add	r2, pc, #4	@ (adr r2, 800aa14 <UART_SetConfig+0x380>)
 800aa10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa14:	0800aab9 	.word	0x0800aab9
 800aa18:	0800aae9 	.word	0x0800aae9
 800aa1c:	0800aae9 	.word	0x0800aae9
 800aa20:	0800aae9 	.word	0x0800aae9
 800aa24:	0800aae9 	.word	0x0800aae9
 800aa28:	0800aae9 	.word	0x0800aae9
 800aa2c:	0800aae9 	.word	0x0800aae9
 800aa30:	0800aae9 	.word	0x0800aae9
 800aa34:	0800aac1 	.word	0x0800aac1
 800aa38:	0800aae9 	.word	0x0800aae9
 800aa3c:	0800aae9 	.word	0x0800aae9
 800aa40:	0800aae9 	.word	0x0800aae9
 800aa44:	0800aae9 	.word	0x0800aae9
 800aa48:	0800aae9 	.word	0x0800aae9
 800aa4c:	0800aae9 	.word	0x0800aae9
 800aa50:	0800aae9 	.word	0x0800aae9
 800aa54:	0800aac9 	.word	0x0800aac9
 800aa58:	0800aae9 	.word	0x0800aae9
 800aa5c:	0800aae9 	.word	0x0800aae9
 800aa60:	0800aae9 	.word	0x0800aae9
 800aa64:	0800aae9 	.word	0x0800aae9
 800aa68:	0800aae9 	.word	0x0800aae9
 800aa6c:	0800aae9 	.word	0x0800aae9
 800aa70:	0800aae9 	.word	0x0800aae9
 800aa74:	0800aad1 	.word	0x0800aad1
 800aa78:	0800aae9 	.word	0x0800aae9
 800aa7c:	0800aae9 	.word	0x0800aae9
 800aa80:	0800aae9 	.word	0x0800aae9
 800aa84:	0800aae9 	.word	0x0800aae9
 800aa88:	0800aae9 	.word	0x0800aae9
 800aa8c:	0800aae9 	.word	0x0800aae9
 800aa90:	0800aae9 	.word	0x0800aae9
 800aa94:	0800aad9 	.word	0x0800aad9
 800aa98:	0800aae9 	.word	0x0800aae9
 800aa9c:	0800aae9 	.word	0x0800aae9
 800aaa0:	0800aae9 	.word	0x0800aae9
 800aaa4:	0800aae9 	.word	0x0800aae9
 800aaa8:	0800aae9 	.word	0x0800aae9
 800aaac:	0800aae9 	.word	0x0800aae9
 800aab0:	0800aae9 	.word	0x0800aae9
 800aab4:	0800aae1 	.word	0x0800aae1
 800aab8:	2301      	movs	r3, #1
 800aaba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aabe:	e1c0      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800aac0:	2304      	movs	r3, #4
 800aac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aac6:	e1bc      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800aac8:	2308      	movs	r3, #8
 800aaca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aace:	e1b8      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800aad0:	2310      	movs	r3, #16
 800aad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aad6:	e1b4      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800aad8:	2320      	movs	r3, #32
 800aada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aade:	e1b0      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800aae0:	2340      	movs	r3, #64	@ 0x40
 800aae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aae6:	e1ac      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800aae8:	2380      	movs	r3, #128	@ 0x80
 800aaea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aaee:	e1a8      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4a75      	ldr	r2, [pc, #468]	@ (800accc <UART_SetConfig+0x638>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d130      	bne.n	800ab5c <UART_SetConfig+0x4c8>
 800aafa:	4b73      	ldr	r3, [pc, #460]	@ (800acc8 <UART_SetConfig+0x634>)
 800aafc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aafe:	f003 0307 	and.w	r3, r3, #7
 800ab02:	2b05      	cmp	r3, #5
 800ab04:	d826      	bhi.n	800ab54 <UART_SetConfig+0x4c0>
 800ab06:	a201      	add	r2, pc, #4	@ (adr r2, 800ab0c <UART_SetConfig+0x478>)
 800ab08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab0c:	0800ab25 	.word	0x0800ab25
 800ab10:	0800ab2d 	.word	0x0800ab2d
 800ab14:	0800ab35 	.word	0x0800ab35
 800ab18:	0800ab3d 	.word	0x0800ab3d
 800ab1c:	0800ab45 	.word	0x0800ab45
 800ab20:	0800ab4d 	.word	0x0800ab4d
 800ab24:	2300      	movs	r3, #0
 800ab26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab2a:	e18a      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800ab2c:	2304      	movs	r3, #4
 800ab2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab32:	e186      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800ab34:	2308      	movs	r3, #8
 800ab36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab3a:	e182      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800ab3c:	2310      	movs	r3, #16
 800ab3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab42:	e17e      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800ab44:	2320      	movs	r3, #32
 800ab46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab4a:	e17a      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800ab4c:	2340      	movs	r3, #64	@ 0x40
 800ab4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab52:	e176      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800ab54:	2380      	movs	r3, #128	@ 0x80
 800ab56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab5a:	e172      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a5b      	ldr	r2, [pc, #364]	@ (800acd0 <UART_SetConfig+0x63c>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d130      	bne.n	800abc8 <UART_SetConfig+0x534>
 800ab66:	4b58      	ldr	r3, [pc, #352]	@ (800acc8 <UART_SetConfig+0x634>)
 800ab68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab6a:	f003 0307 	and.w	r3, r3, #7
 800ab6e:	2b05      	cmp	r3, #5
 800ab70:	d826      	bhi.n	800abc0 <UART_SetConfig+0x52c>
 800ab72:	a201      	add	r2, pc, #4	@ (adr r2, 800ab78 <UART_SetConfig+0x4e4>)
 800ab74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab78:	0800ab91 	.word	0x0800ab91
 800ab7c:	0800ab99 	.word	0x0800ab99
 800ab80:	0800aba1 	.word	0x0800aba1
 800ab84:	0800aba9 	.word	0x0800aba9
 800ab88:	0800abb1 	.word	0x0800abb1
 800ab8c:	0800abb9 	.word	0x0800abb9
 800ab90:	2300      	movs	r3, #0
 800ab92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab96:	e154      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800ab98:	2304      	movs	r3, #4
 800ab9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab9e:	e150      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800aba0:	2308      	movs	r3, #8
 800aba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aba6:	e14c      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800aba8:	2310      	movs	r3, #16
 800abaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abae:	e148      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800abb0:	2320      	movs	r3, #32
 800abb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abb6:	e144      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800abb8:	2340      	movs	r3, #64	@ 0x40
 800abba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abbe:	e140      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800abc0:	2380      	movs	r3, #128	@ 0x80
 800abc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abc6:	e13c      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a41      	ldr	r2, [pc, #260]	@ (800acd4 <UART_SetConfig+0x640>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	f040 8082 	bne.w	800acd8 <UART_SetConfig+0x644>
 800abd4:	4b3c      	ldr	r3, [pc, #240]	@ (800acc8 <UART_SetConfig+0x634>)
 800abd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800abdc:	2b28      	cmp	r3, #40	@ 0x28
 800abde:	d86d      	bhi.n	800acbc <UART_SetConfig+0x628>
 800abe0:	a201      	add	r2, pc, #4	@ (adr r2, 800abe8 <UART_SetConfig+0x554>)
 800abe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe6:	bf00      	nop
 800abe8:	0800ac8d 	.word	0x0800ac8d
 800abec:	0800acbd 	.word	0x0800acbd
 800abf0:	0800acbd 	.word	0x0800acbd
 800abf4:	0800acbd 	.word	0x0800acbd
 800abf8:	0800acbd 	.word	0x0800acbd
 800abfc:	0800acbd 	.word	0x0800acbd
 800ac00:	0800acbd 	.word	0x0800acbd
 800ac04:	0800acbd 	.word	0x0800acbd
 800ac08:	0800ac95 	.word	0x0800ac95
 800ac0c:	0800acbd 	.word	0x0800acbd
 800ac10:	0800acbd 	.word	0x0800acbd
 800ac14:	0800acbd 	.word	0x0800acbd
 800ac18:	0800acbd 	.word	0x0800acbd
 800ac1c:	0800acbd 	.word	0x0800acbd
 800ac20:	0800acbd 	.word	0x0800acbd
 800ac24:	0800acbd 	.word	0x0800acbd
 800ac28:	0800ac9d 	.word	0x0800ac9d
 800ac2c:	0800acbd 	.word	0x0800acbd
 800ac30:	0800acbd 	.word	0x0800acbd
 800ac34:	0800acbd 	.word	0x0800acbd
 800ac38:	0800acbd 	.word	0x0800acbd
 800ac3c:	0800acbd 	.word	0x0800acbd
 800ac40:	0800acbd 	.word	0x0800acbd
 800ac44:	0800acbd 	.word	0x0800acbd
 800ac48:	0800aca5 	.word	0x0800aca5
 800ac4c:	0800acbd 	.word	0x0800acbd
 800ac50:	0800acbd 	.word	0x0800acbd
 800ac54:	0800acbd 	.word	0x0800acbd
 800ac58:	0800acbd 	.word	0x0800acbd
 800ac5c:	0800acbd 	.word	0x0800acbd
 800ac60:	0800acbd 	.word	0x0800acbd
 800ac64:	0800acbd 	.word	0x0800acbd
 800ac68:	0800acad 	.word	0x0800acad
 800ac6c:	0800acbd 	.word	0x0800acbd
 800ac70:	0800acbd 	.word	0x0800acbd
 800ac74:	0800acbd 	.word	0x0800acbd
 800ac78:	0800acbd 	.word	0x0800acbd
 800ac7c:	0800acbd 	.word	0x0800acbd
 800ac80:	0800acbd 	.word	0x0800acbd
 800ac84:	0800acbd 	.word	0x0800acbd
 800ac88:	0800acb5 	.word	0x0800acb5
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac92:	e0d6      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800ac94:	2304      	movs	r3, #4
 800ac96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac9a:	e0d2      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800ac9c:	2308      	movs	r3, #8
 800ac9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aca2:	e0ce      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800aca4:	2310      	movs	r3, #16
 800aca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acaa:	e0ca      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800acac:	2320      	movs	r3, #32
 800acae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acb2:	e0c6      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800acb4:	2340      	movs	r3, #64	@ 0x40
 800acb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acba:	e0c2      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800acbc:	2380      	movs	r3, #128	@ 0x80
 800acbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acc2:	e0be      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800acc4:	40011400 	.word	0x40011400
 800acc8:	58024400 	.word	0x58024400
 800accc:	40007800 	.word	0x40007800
 800acd0:	40007c00 	.word	0x40007c00
 800acd4:	40011800 	.word	0x40011800
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4aad      	ldr	r2, [pc, #692]	@ (800af94 <UART_SetConfig+0x900>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d176      	bne.n	800add0 <UART_SetConfig+0x73c>
 800ace2:	4bad      	ldr	r3, [pc, #692]	@ (800af98 <UART_SetConfig+0x904>)
 800ace4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ace6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800acea:	2b28      	cmp	r3, #40	@ 0x28
 800acec:	d86c      	bhi.n	800adc8 <UART_SetConfig+0x734>
 800acee:	a201      	add	r2, pc, #4	@ (adr r2, 800acf4 <UART_SetConfig+0x660>)
 800acf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf4:	0800ad99 	.word	0x0800ad99
 800acf8:	0800adc9 	.word	0x0800adc9
 800acfc:	0800adc9 	.word	0x0800adc9
 800ad00:	0800adc9 	.word	0x0800adc9
 800ad04:	0800adc9 	.word	0x0800adc9
 800ad08:	0800adc9 	.word	0x0800adc9
 800ad0c:	0800adc9 	.word	0x0800adc9
 800ad10:	0800adc9 	.word	0x0800adc9
 800ad14:	0800ada1 	.word	0x0800ada1
 800ad18:	0800adc9 	.word	0x0800adc9
 800ad1c:	0800adc9 	.word	0x0800adc9
 800ad20:	0800adc9 	.word	0x0800adc9
 800ad24:	0800adc9 	.word	0x0800adc9
 800ad28:	0800adc9 	.word	0x0800adc9
 800ad2c:	0800adc9 	.word	0x0800adc9
 800ad30:	0800adc9 	.word	0x0800adc9
 800ad34:	0800ada9 	.word	0x0800ada9
 800ad38:	0800adc9 	.word	0x0800adc9
 800ad3c:	0800adc9 	.word	0x0800adc9
 800ad40:	0800adc9 	.word	0x0800adc9
 800ad44:	0800adc9 	.word	0x0800adc9
 800ad48:	0800adc9 	.word	0x0800adc9
 800ad4c:	0800adc9 	.word	0x0800adc9
 800ad50:	0800adc9 	.word	0x0800adc9
 800ad54:	0800adb1 	.word	0x0800adb1
 800ad58:	0800adc9 	.word	0x0800adc9
 800ad5c:	0800adc9 	.word	0x0800adc9
 800ad60:	0800adc9 	.word	0x0800adc9
 800ad64:	0800adc9 	.word	0x0800adc9
 800ad68:	0800adc9 	.word	0x0800adc9
 800ad6c:	0800adc9 	.word	0x0800adc9
 800ad70:	0800adc9 	.word	0x0800adc9
 800ad74:	0800adb9 	.word	0x0800adb9
 800ad78:	0800adc9 	.word	0x0800adc9
 800ad7c:	0800adc9 	.word	0x0800adc9
 800ad80:	0800adc9 	.word	0x0800adc9
 800ad84:	0800adc9 	.word	0x0800adc9
 800ad88:	0800adc9 	.word	0x0800adc9
 800ad8c:	0800adc9 	.word	0x0800adc9
 800ad90:	0800adc9 	.word	0x0800adc9
 800ad94:	0800adc1 	.word	0x0800adc1
 800ad98:	2301      	movs	r3, #1
 800ad9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad9e:	e050      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800ada0:	2304      	movs	r3, #4
 800ada2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ada6:	e04c      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800ada8:	2308      	movs	r3, #8
 800adaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adae:	e048      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800adb0:	2310      	movs	r3, #16
 800adb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adb6:	e044      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800adb8:	2320      	movs	r3, #32
 800adba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adbe:	e040      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800adc0:	2340      	movs	r3, #64	@ 0x40
 800adc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adc6:	e03c      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800adc8:	2380      	movs	r3, #128	@ 0x80
 800adca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adce:	e038      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a71      	ldr	r2, [pc, #452]	@ (800af9c <UART_SetConfig+0x908>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d130      	bne.n	800ae3c <UART_SetConfig+0x7a8>
 800adda:	4b6f      	ldr	r3, [pc, #444]	@ (800af98 <UART_SetConfig+0x904>)
 800addc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adde:	f003 0307 	and.w	r3, r3, #7
 800ade2:	2b05      	cmp	r3, #5
 800ade4:	d826      	bhi.n	800ae34 <UART_SetConfig+0x7a0>
 800ade6:	a201      	add	r2, pc, #4	@ (adr r2, 800adec <UART_SetConfig+0x758>)
 800ade8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adec:	0800ae05 	.word	0x0800ae05
 800adf0:	0800ae0d 	.word	0x0800ae0d
 800adf4:	0800ae15 	.word	0x0800ae15
 800adf8:	0800ae1d 	.word	0x0800ae1d
 800adfc:	0800ae25 	.word	0x0800ae25
 800ae00:	0800ae2d 	.word	0x0800ae2d
 800ae04:	2302      	movs	r3, #2
 800ae06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae0a:	e01a      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800ae0c:	2304      	movs	r3, #4
 800ae0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae12:	e016      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800ae14:	2308      	movs	r3, #8
 800ae16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae1a:	e012      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800ae1c:	2310      	movs	r3, #16
 800ae1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae22:	e00e      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800ae24:	2320      	movs	r3, #32
 800ae26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae2a:	e00a      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800ae2c:	2340      	movs	r3, #64	@ 0x40
 800ae2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae32:	e006      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800ae34:	2380      	movs	r3, #128	@ 0x80
 800ae36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae3a:	e002      	b.n	800ae42 <UART_SetConfig+0x7ae>
 800ae3c:	2380      	movs	r3, #128	@ 0x80
 800ae3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a55      	ldr	r2, [pc, #340]	@ (800af9c <UART_SetConfig+0x908>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	f040 80f8 	bne.w	800b03e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ae4e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ae52:	2b20      	cmp	r3, #32
 800ae54:	dc46      	bgt.n	800aee4 <UART_SetConfig+0x850>
 800ae56:	2b02      	cmp	r3, #2
 800ae58:	db75      	blt.n	800af46 <UART_SetConfig+0x8b2>
 800ae5a:	3b02      	subs	r3, #2
 800ae5c:	2b1e      	cmp	r3, #30
 800ae5e:	d872      	bhi.n	800af46 <UART_SetConfig+0x8b2>
 800ae60:	a201      	add	r2, pc, #4	@ (adr r2, 800ae68 <UART_SetConfig+0x7d4>)
 800ae62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae66:	bf00      	nop
 800ae68:	0800aeeb 	.word	0x0800aeeb
 800ae6c:	0800af47 	.word	0x0800af47
 800ae70:	0800aef3 	.word	0x0800aef3
 800ae74:	0800af47 	.word	0x0800af47
 800ae78:	0800af47 	.word	0x0800af47
 800ae7c:	0800af47 	.word	0x0800af47
 800ae80:	0800af03 	.word	0x0800af03
 800ae84:	0800af47 	.word	0x0800af47
 800ae88:	0800af47 	.word	0x0800af47
 800ae8c:	0800af47 	.word	0x0800af47
 800ae90:	0800af47 	.word	0x0800af47
 800ae94:	0800af47 	.word	0x0800af47
 800ae98:	0800af47 	.word	0x0800af47
 800ae9c:	0800af47 	.word	0x0800af47
 800aea0:	0800af13 	.word	0x0800af13
 800aea4:	0800af47 	.word	0x0800af47
 800aea8:	0800af47 	.word	0x0800af47
 800aeac:	0800af47 	.word	0x0800af47
 800aeb0:	0800af47 	.word	0x0800af47
 800aeb4:	0800af47 	.word	0x0800af47
 800aeb8:	0800af47 	.word	0x0800af47
 800aebc:	0800af47 	.word	0x0800af47
 800aec0:	0800af47 	.word	0x0800af47
 800aec4:	0800af47 	.word	0x0800af47
 800aec8:	0800af47 	.word	0x0800af47
 800aecc:	0800af47 	.word	0x0800af47
 800aed0:	0800af47 	.word	0x0800af47
 800aed4:	0800af47 	.word	0x0800af47
 800aed8:	0800af47 	.word	0x0800af47
 800aedc:	0800af47 	.word	0x0800af47
 800aee0:	0800af39 	.word	0x0800af39
 800aee4:	2b40      	cmp	r3, #64	@ 0x40
 800aee6:	d02a      	beq.n	800af3e <UART_SetConfig+0x8aa>
 800aee8:	e02d      	b.n	800af46 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800aeea:	f7fd fb9b 	bl	8008624 <HAL_RCCEx_GetD3PCLK1Freq>
 800aeee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aef0:	e02f      	b.n	800af52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aef2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7fd fbaa 	bl	8008650 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aefc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aefe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af00:	e027      	b.n	800af52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af02:	f107 0318 	add.w	r3, r7, #24
 800af06:	4618      	mov	r0, r3
 800af08:	f7fd fcf6 	bl	80088f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af10:	e01f      	b.n	800af52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af12:	4b21      	ldr	r3, [pc, #132]	@ (800af98 <UART_SetConfig+0x904>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f003 0320 	and.w	r3, r3, #32
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d009      	beq.n	800af32 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af1e:	4b1e      	ldr	r3, [pc, #120]	@ (800af98 <UART_SetConfig+0x904>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	08db      	lsrs	r3, r3, #3
 800af24:	f003 0303 	and.w	r3, r3, #3
 800af28:	4a1d      	ldr	r2, [pc, #116]	@ (800afa0 <UART_SetConfig+0x90c>)
 800af2a:	fa22 f303 	lsr.w	r3, r2, r3
 800af2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af30:	e00f      	b.n	800af52 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800af32:	4b1b      	ldr	r3, [pc, #108]	@ (800afa0 <UART_SetConfig+0x90c>)
 800af34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af36:	e00c      	b.n	800af52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af38:	4b1a      	ldr	r3, [pc, #104]	@ (800afa4 <UART_SetConfig+0x910>)
 800af3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af3c:	e009      	b.n	800af52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af44:	e005      	b.n	800af52 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800af46:	2300      	movs	r3, #0
 800af48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800af4a:	2301      	movs	r3, #1
 800af4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800af50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800af52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af54:	2b00      	cmp	r3, #0
 800af56:	f000 81ee 	beq.w	800b336 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af5e:	4a12      	ldr	r2, [pc, #72]	@ (800afa8 <UART_SetConfig+0x914>)
 800af60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af64:	461a      	mov	r2, r3
 800af66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af68:	fbb3 f3f2 	udiv	r3, r3, r2
 800af6c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	685a      	ldr	r2, [r3, #4]
 800af72:	4613      	mov	r3, r2
 800af74:	005b      	lsls	r3, r3, #1
 800af76:	4413      	add	r3, r2
 800af78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d305      	bcc.n	800af8a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af86:	429a      	cmp	r2, r3
 800af88:	d910      	bls.n	800afac <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800af8a:	2301      	movs	r3, #1
 800af8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800af90:	e1d1      	b.n	800b336 <UART_SetConfig+0xca2>
 800af92:	bf00      	nop
 800af94:	40011c00 	.word	0x40011c00
 800af98:	58024400 	.word	0x58024400
 800af9c:	58000c00 	.word	0x58000c00
 800afa0:	03d09000 	.word	0x03d09000
 800afa4:	003d0900 	.word	0x003d0900
 800afa8:	0800c600 	.word	0x0800c600
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afae:	2200      	movs	r2, #0
 800afb0:	60bb      	str	r3, [r7, #8]
 800afb2:	60fa      	str	r2, [r7, #12]
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afb8:	4ac0      	ldr	r2, [pc, #768]	@ (800b2bc <UART_SetConfig+0xc28>)
 800afba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afbe:	b29b      	uxth	r3, r3
 800afc0:	2200      	movs	r2, #0
 800afc2:	603b      	str	r3, [r7, #0]
 800afc4:	607a      	str	r2, [r7, #4]
 800afc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800afce:	f7f5 f9f7 	bl	80003c0 <__aeabi_uldivmod>
 800afd2:	4602      	mov	r2, r0
 800afd4:	460b      	mov	r3, r1
 800afd6:	4610      	mov	r0, r2
 800afd8:	4619      	mov	r1, r3
 800afda:	f04f 0200 	mov.w	r2, #0
 800afde:	f04f 0300 	mov.w	r3, #0
 800afe2:	020b      	lsls	r3, r1, #8
 800afe4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800afe8:	0202      	lsls	r2, r0, #8
 800afea:	6979      	ldr	r1, [r7, #20]
 800afec:	6849      	ldr	r1, [r1, #4]
 800afee:	0849      	lsrs	r1, r1, #1
 800aff0:	2000      	movs	r0, #0
 800aff2:	460c      	mov	r4, r1
 800aff4:	4605      	mov	r5, r0
 800aff6:	eb12 0804 	adds.w	r8, r2, r4
 800affa:	eb43 0905 	adc.w	r9, r3, r5
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	469a      	mov	sl, r3
 800b006:	4693      	mov	fp, r2
 800b008:	4652      	mov	r2, sl
 800b00a:	465b      	mov	r3, fp
 800b00c:	4640      	mov	r0, r8
 800b00e:	4649      	mov	r1, r9
 800b010:	f7f5 f9d6 	bl	80003c0 <__aeabi_uldivmod>
 800b014:	4602      	mov	r2, r0
 800b016:	460b      	mov	r3, r1
 800b018:	4613      	mov	r3, r2
 800b01a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b01c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b01e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b022:	d308      	bcc.n	800b036 <UART_SetConfig+0x9a2>
 800b024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b026:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b02a:	d204      	bcs.n	800b036 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b032:	60da      	str	r2, [r3, #12]
 800b034:	e17f      	b.n	800b336 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b036:	2301      	movs	r3, #1
 800b038:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b03c:	e17b      	b.n	800b336 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	69db      	ldr	r3, [r3, #28]
 800b042:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b046:	f040 80bd 	bne.w	800b1c4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b04a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b04e:	2b20      	cmp	r3, #32
 800b050:	dc48      	bgt.n	800b0e4 <UART_SetConfig+0xa50>
 800b052:	2b00      	cmp	r3, #0
 800b054:	db7b      	blt.n	800b14e <UART_SetConfig+0xaba>
 800b056:	2b20      	cmp	r3, #32
 800b058:	d879      	bhi.n	800b14e <UART_SetConfig+0xaba>
 800b05a:	a201      	add	r2, pc, #4	@ (adr r2, 800b060 <UART_SetConfig+0x9cc>)
 800b05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b060:	0800b0eb 	.word	0x0800b0eb
 800b064:	0800b0f3 	.word	0x0800b0f3
 800b068:	0800b14f 	.word	0x0800b14f
 800b06c:	0800b14f 	.word	0x0800b14f
 800b070:	0800b0fb 	.word	0x0800b0fb
 800b074:	0800b14f 	.word	0x0800b14f
 800b078:	0800b14f 	.word	0x0800b14f
 800b07c:	0800b14f 	.word	0x0800b14f
 800b080:	0800b10b 	.word	0x0800b10b
 800b084:	0800b14f 	.word	0x0800b14f
 800b088:	0800b14f 	.word	0x0800b14f
 800b08c:	0800b14f 	.word	0x0800b14f
 800b090:	0800b14f 	.word	0x0800b14f
 800b094:	0800b14f 	.word	0x0800b14f
 800b098:	0800b14f 	.word	0x0800b14f
 800b09c:	0800b14f 	.word	0x0800b14f
 800b0a0:	0800b11b 	.word	0x0800b11b
 800b0a4:	0800b14f 	.word	0x0800b14f
 800b0a8:	0800b14f 	.word	0x0800b14f
 800b0ac:	0800b14f 	.word	0x0800b14f
 800b0b0:	0800b14f 	.word	0x0800b14f
 800b0b4:	0800b14f 	.word	0x0800b14f
 800b0b8:	0800b14f 	.word	0x0800b14f
 800b0bc:	0800b14f 	.word	0x0800b14f
 800b0c0:	0800b14f 	.word	0x0800b14f
 800b0c4:	0800b14f 	.word	0x0800b14f
 800b0c8:	0800b14f 	.word	0x0800b14f
 800b0cc:	0800b14f 	.word	0x0800b14f
 800b0d0:	0800b14f 	.word	0x0800b14f
 800b0d4:	0800b14f 	.word	0x0800b14f
 800b0d8:	0800b14f 	.word	0x0800b14f
 800b0dc:	0800b14f 	.word	0x0800b14f
 800b0e0:	0800b141 	.word	0x0800b141
 800b0e4:	2b40      	cmp	r3, #64	@ 0x40
 800b0e6:	d02e      	beq.n	800b146 <UART_SetConfig+0xab2>
 800b0e8:	e031      	b.n	800b14e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0ea:	f7fb fbfd 	bl	80068e8 <HAL_RCC_GetPCLK1Freq>
 800b0ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b0f0:	e033      	b.n	800b15a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b0f2:	f7fb fc0f 	bl	8006914 <HAL_RCC_GetPCLK2Freq>
 800b0f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b0f8:	e02f      	b.n	800b15a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7fd faa6 	bl	8008650 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b108:	e027      	b.n	800b15a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b10a:	f107 0318 	add.w	r3, r7, #24
 800b10e:	4618      	mov	r0, r3
 800b110:	f7fd fbf2 	bl	80088f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b118:	e01f      	b.n	800b15a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b11a:	4b69      	ldr	r3, [pc, #420]	@ (800b2c0 <UART_SetConfig+0xc2c>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f003 0320 	and.w	r3, r3, #32
 800b122:	2b00      	cmp	r3, #0
 800b124:	d009      	beq.n	800b13a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b126:	4b66      	ldr	r3, [pc, #408]	@ (800b2c0 <UART_SetConfig+0xc2c>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	08db      	lsrs	r3, r3, #3
 800b12c:	f003 0303 	and.w	r3, r3, #3
 800b130:	4a64      	ldr	r2, [pc, #400]	@ (800b2c4 <UART_SetConfig+0xc30>)
 800b132:	fa22 f303 	lsr.w	r3, r2, r3
 800b136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b138:	e00f      	b.n	800b15a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b13a:	4b62      	ldr	r3, [pc, #392]	@ (800b2c4 <UART_SetConfig+0xc30>)
 800b13c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b13e:	e00c      	b.n	800b15a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b140:	4b61      	ldr	r3, [pc, #388]	@ (800b2c8 <UART_SetConfig+0xc34>)
 800b142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b144:	e009      	b.n	800b15a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b146:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b14a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b14c:	e005      	b.n	800b15a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b14e:	2300      	movs	r3, #0
 800b150:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b152:	2301      	movs	r3, #1
 800b154:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b158:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b15a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	f000 80ea 	beq.w	800b336 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b166:	4a55      	ldr	r2, [pc, #340]	@ (800b2bc <UART_SetConfig+0xc28>)
 800b168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b16c:	461a      	mov	r2, r3
 800b16e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b170:	fbb3 f3f2 	udiv	r3, r3, r2
 800b174:	005a      	lsls	r2, r3, #1
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	085b      	lsrs	r3, r3, #1
 800b17c:	441a      	add	r2, r3
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	fbb2 f3f3 	udiv	r3, r2, r3
 800b186:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b18a:	2b0f      	cmp	r3, #15
 800b18c:	d916      	bls.n	800b1bc <UART_SetConfig+0xb28>
 800b18e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b194:	d212      	bcs.n	800b1bc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b198:	b29b      	uxth	r3, r3
 800b19a:	f023 030f 	bic.w	r3, r3, #15
 800b19e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1a2:	085b      	lsrs	r3, r3, #1
 800b1a4:	b29b      	uxth	r3, r3
 800b1a6:	f003 0307 	and.w	r3, r3, #7
 800b1aa:	b29a      	uxth	r2, r3
 800b1ac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b1b8:	60da      	str	r2, [r3, #12]
 800b1ba:	e0bc      	b.n	800b336 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b1c2:	e0b8      	b.n	800b336 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b1c4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b1c8:	2b20      	cmp	r3, #32
 800b1ca:	dc4b      	bgt.n	800b264 <UART_SetConfig+0xbd0>
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	f2c0 8087 	blt.w	800b2e0 <UART_SetConfig+0xc4c>
 800b1d2:	2b20      	cmp	r3, #32
 800b1d4:	f200 8084 	bhi.w	800b2e0 <UART_SetConfig+0xc4c>
 800b1d8:	a201      	add	r2, pc, #4	@ (adr r2, 800b1e0 <UART_SetConfig+0xb4c>)
 800b1da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1de:	bf00      	nop
 800b1e0:	0800b26b 	.word	0x0800b26b
 800b1e4:	0800b273 	.word	0x0800b273
 800b1e8:	0800b2e1 	.word	0x0800b2e1
 800b1ec:	0800b2e1 	.word	0x0800b2e1
 800b1f0:	0800b27b 	.word	0x0800b27b
 800b1f4:	0800b2e1 	.word	0x0800b2e1
 800b1f8:	0800b2e1 	.word	0x0800b2e1
 800b1fc:	0800b2e1 	.word	0x0800b2e1
 800b200:	0800b28b 	.word	0x0800b28b
 800b204:	0800b2e1 	.word	0x0800b2e1
 800b208:	0800b2e1 	.word	0x0800b2e1
 800b20c:	0800b2e1 	.word	0x0800b2e1
 800b210:	0800b2e1 	.word	0x0800b2e1
 800b214:	0800b2e1 	.word	0x0800b2e1
 800b218:	0800b2e1 	.word	0x0800b2e1
 800b21c:	0800b2e1 	.word	0x0800b2e1
 800b220:	0800b29b 	.word	0x0800b29b
 800b224:	0800b2e1 	.word	0x0800b2e1
 800b228:	0800b2e1 	.word	0x0800b2e1
 800b22c:	0800b2e1 	.word	0x0800b2e1
 800b230:	0800b2e1 	.word	0x0800b2e1
 800b234:	0800b2e1 	.word	0x0800b2e1
 800b238:	0800b2e1 	.word	0x0800b2e1
 800b23c:	0800b2e1 	.word	0x0800b2e1
 800b240:	0800b2e1 	.word	0x0800b2e1
 800b244:	0800b2e1 	.word	0x0800b2e1
 800b248:	0800b2e1 	.word	0x0800b2e1
 800b24c:	0800b2e1 	.word	0x0800b2e1
 800b250:	0800b2e1 	.word	0x0800b2e1
 800b254:	0800b2e1 	.word	0x0800b2e1
 800b258:	0800b2e1 	.word	0x0800b2e1
 800b25c:	0800b2e1 	.word	0x0800b2e1
 800b260:	0800b2d3 	.word	0x0800b2d3
 800b264:	2b40      	cmp	r3, #64	@ 0x40
 800b266:	d037      	beq.n	800b2d8 <UART_SetConfig+0xc44>
 800b268:	e03a      	b.n	800b2e0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b26a:	f7fb fb3d 	bl	80068e8 <HAL_RCC_GetPCLK1Freq>
 800b26e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b270:	e03c      	b.n	800b2ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b272:	f7fb fb4f 	bl	8006914 <HAL_RCC_GetPCLK2Freq>
 800b276:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b278:	e038      	b.n	800b2ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b27a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b27e:	4618      	mov	r0, r3
 800b280:	f7fd f9e6 	bl	8008650 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b288:	e030      	b.n	800b2ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b28a:	f107 0318 	add.w	r3, r7, #24
 800b28e:	4618      	mov	r0, r3
 800b290:	f7fd fb32 	bl	80088f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b294:	69fb      	ldr	r3, [r7, #28]
 800b296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b298:	e028      	b.n	800b2ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b29a:	4b09      	ldr	r3, [pc, #36]	@ (800b2c0 <UART_SetConfig+0xc2c>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f003 0320 	and.w	r3, r3, #32
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d012      	beq.n	800b2cc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b2a6:	4b06      	ldr	r3, [pc, #24]	@ (800b2c0 <UART_SetConfig+0xc2c>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	08db      	lsrs	r3, r3, #3
 800b2ac:	f003 0303 	and.w	r3, r3, #3
 800b2b0:	4a04      	ldr	r2, [pc, #16]	@ (800b2c4 <UART_SetConfig+0xc30>)
 800b2b2:	fa22 f303 	lsr.w	r3, r2, r3
 800b2b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b2b8:	e018      	b.n	800b2ec <UART_SetConfig+0xc58>
 800b2ba:	bf00      	nop
 800b2bc:	0800c600 	.word	0x0800c600
 800b2c0:	58024400 	.word	0x58024400
 800b2c4:	03d09000 	.word	0x03d09000
 800b2c8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b2cc:	4b24      	ldr	r3, [pc, #144]	@ (800b360 <UART_SetConfig+0xccc>)
 800b2ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2d0:	e00c      	b.n	800b2ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b2d2:	4b24      	ldr	r3, [pc, #144]	@ (800b364 <UART_SetConfig+0xcd0>)
 800b2d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2d6:	e009      	b.n	800b2ec <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2de:	e005      	b.n	800b2ec <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b2ea:	bf00      	nop
    }

    if (pclk != 0U)
 800b2ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d021      	beq.n	800b336 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2f6:	4a1c      	ldr	r2, [pc, #112]	@ (800b368 <UART_SetConfig+0xcd4>)
 800b2f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b300:	fbb3 f2f2 	udiv	r2, r3, r2
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	085b      	lsrs	r3, r3, #1
 800b30a:	441a      	add	r2, r3
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	fbb2 f3f3 	udiv	r3, r2, r3
 800b314:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b318:	2b0f      	cmp	r3, #15
 800b31a:	d909      	bls.n	800b330 <UART_SetConfig+0xc9c>
 800b31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b31e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b322:	d205      	bcs.n	800b330 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b326:	b29a      	uxth	r2, r3
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	60da      	str	r2, [r3, #12]
 800b32e:	e002      	b.n	800b336 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b330:	2301      	movs	r3, #1
 800b332:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	2201      	movs	r2, #1
 800b33a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	2201      	movs	r2, #1
 800b342:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	2200      	movs	r2, #0
 800b34a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	2200      	movs	r2, #0
 800b350:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b352:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b356:	4618      	mov	r0, r3
 800b358:	3748      	adds	r7, #72	@ 0x48
 800b35a:	46bd      	mov	sp, r7
 800b35c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b360:	03d09000 	.word	0x03d09000
 800b364:	003d0900 	.word	0x003d0900
 800b368:	0800c600 	.word	0x0800c600

0800b36c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b378:	f003 0308 	and.w	r3, r3, #8
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d00a      	beq.n	800b396 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	430a      	orrs	r2, r1
 800b394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b39a:	f003 0301 	and.w	r3, r3, #1
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d00a      	beq.n	800b3b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	430a      	orrs	r2, r1
 800b3b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3bc:	f003 0302 	and.w	r3, r3, #2
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00a      	beq.n	800b3da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	430a      	orrs	r2, r1
 800b3d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3de:	f003 0304 	and.w	r3, r3, #4
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d00a      	beq.n	800b3fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	430a      	orrs	r2, r1
 800b3fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b400:	f003 0310 	and.w	r3, r3, #16
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00a      	beq.n	800b41e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	430a      	orrs	r2, r1
 800b41c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b422:	f003 0320 	and.w	r3, r3, #32
 800b426:	2b00      	cmp	r3, #0
 800b428:	d00a      	beq.n	800b440 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	689b      	ldr	r3, [r3, #8]
 800b430:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	430a      	orrs	r2, r1
 800b43e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d01a      	beq.n	800b482 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	685b      	ldr	r3, [r3, #4]
 800b452:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	430a      	orrs	r2, r1
 800b460:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b466:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b46a:	d10a      	bne.n	800b482 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	430a      	orrs	r2, r1
 800b480:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00a      	beq.n	800b4a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	430a      	orrs	r2, r1
 800b4a2:	605a      	str	r2, [r3, #4]
  }
}
 800b4a4:	bf00      	nop
 800b4a6:	370c      	adds	r7, #12
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr

0800b4b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b098      	sub	sp, #96	@ 0x60
 800b4b4:	af02      	add	r7, sp, #8
 800b4b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b4c0:	f7f6 fe08 	bl	80020d4 <HAL_GetTick>
 800b4c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f003 0308 	and.w	r3, r3, #8
 800b4d0:	2b08      	cmp	r3, #8
 800b4d2:	d12f      	bne.n	800b534 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b4d8:	9300      	str	r3, [sp, #0]
 800b4da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4dc:	2200      	movs	r2, #0
 800b4de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 f88e 	bl	800b604 <UART_WaitOnFlagUntilTimeout>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d022      	beq.n	800b534 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4f6:	e853 3f00 	ldrex	r3, [r3]
 800b4fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b4fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b502:	653b      	str	r3, [r7, #80]	@ 0x50
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	461a      	mov	r2, r3
 800b50a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b50c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b50e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b510:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b512:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b514:	e841 2300 	strex	r3, r2, [r1]
 800b518:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b51a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d1e6      	bne.n	800b4ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2220      	movs	r2, #32
 800b524:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2200      	movs	r2, #0
 800b52c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b530:	2303      	movs	r3, #3
 800b532:	e063      	b.n	800b5fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f003 0304 	and.w	r3, r3, #4
 800b53e:	2b04      	cmp	r3, #4
 800b540:	d149      	bne.n	800b5d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b542:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b546:	9300      	str	r3, [sp, #0]
 800b548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b54a:	2200      	movs	r2, #0
 800b54c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f000 f857 	bl	800b604 <UART_WaitOnFlagUntilTimeout>
 800b556:	4603      	mov	r3, r0
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d03c      	beq.n	800b5d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b564:	e853 3f00 	ldrex	r3, [r3]
 800b568:	623b      	str	r3, [r7, #32]
   return(result);
 800b56a:	6a3b      	ldr	r3, [r7, #32]
 800b56c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b570:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	461a      	mov	r2, r3
 800b578:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b57a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b57c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b57e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b580:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b582:	e841 2300 	strex	r3, r2, [r1]
 800b586:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d1e6      	bne.n	800b55c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	3308      	adds	r3, #8
 800b594:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	e853 3f00 	ldrex	r3, [r3]
 800b59c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	f023 0301 	bic.w	r3, r3, #1
 800b5a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	3308      	adds	r3, #8
 800b5ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b5ae:	61fa      	str	r2, [r7, #28]
 800b5b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5b2:	69b9      	ldr	r1, [r7, #24]
 800b5b4:	69fa      	ldr	r2, [r7, #28]
 800b5b6:	e841 2300 	strex	r3, r2, [r1]
 800b5ba:	617b      	str	r3, [r7, #20]
   return(result);
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d1e5      	bne.n	800b58e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2220      	movs	r2, #32
 800b5c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5d2:	2303      	movs	r3, #3
 800b5d4:	e012      	b.n	800b5fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2220      	movs	r2, #32
 800b5da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2220      	movs	r2, #32
 800b5e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b5fa:	2300      	movs	r3, #0
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3758      	adds	r7, #88	@ 0x58
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	60f8      	str	r0, [r7, #12]
 800b60c:	60b9      	str	r1, [r7, #8]
 800b60e:	603b      	str	r3, [r7, #0]
 800b610:	4613      	mov	r3, r2
 800b612:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b614:	e04f      	b.n	800b6b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b616:	69bb      	ldr	r3, [r7, #24]
 800b618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b61c:	d04b      	beq.n	800b6b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b61e:	f7f6 fd59 	bl	80020d4 <HAL_GetTick>
 800b622:	4602      	mov	r2, r0
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	1ad3      	subs	r3, r2, r3
 800b628:	69ba      	ldr	r2, [r7, #24]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d302      	bcc.n	800b634 <UART_WaitOnFlagUntilTimeout+0x30>
 800b62e:	69bb      	ldr	r3, [r7, #24]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d101      	bne.n	800b638 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b634:	2303      	movs	r3, #3
 800b636:	e04e      	b.n	800b6d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f003 0304 	and.w	r3, r3, #4
 800b642:	2b00      	cmp	r3, #0
 800b644:	d037      	beq.n	800b6b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	2b80      	cmp	r3, #128	@ 0x80
 800b64a:	d034      	beq.n	800b6b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	2b40      	cmp	r3, #64	@ 0x40
 800b650:	d031      	beq.n	800b6b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	69db      	ldr	r3, [r3, #28]
 800b658:	f003 0308 	and.w	r3, r3, #8
 800b65c:	2b08      	cmp	r3, #8
 800b65e:	d110      	bne.n	800b682 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	2208      	movs	r2, #8
 800b666:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b668:	68f8      	ldr	r0, [r7, #12]
 800b66a:	f000 f839 	bl	800b6e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2208      	movs	r2, #8
 800b672:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2200      	movs	r2, #0
 800b67a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b67e:	2301      	movs	r3, #1
 800b680:	e029      	b.n	800b6d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	69db      	ldr	r3, [r3, #28]
 800b688:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b68c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b690:	d111      	bne.n	800b6b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b69a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	f000 f81f 	bl	800b6e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2220      	movs	r2, #32
 800b6a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b6b2:	2303      	movs	r3, #3
 800b6b4:	e00f      	b.n	800b6d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	69da      	ldr	r2, [r3, #28]
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	4013      	ands	r3, r2
 800b6c0:	68ba      	ldr	r2, [r7, #8]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	bf0c      	ite	eq
 800b6c6:	2301      	moveq	r3, #1
 800b6c8:	2300      	movne	r3, #0
 800b6ca:	b2db      	uxtb	r3, r3
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	79fb      	ldrb	r3, [r7, #7]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d0a0      	beq.n	800b616 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b6d4:	2300      	movs	r3, #0
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
	...

0800b6e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b095      	sub	sp, #84	@ 0x54
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6f0:	e853 3f00 	ldrex	r3, [r3]
 800b6f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b6fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	461a      	mov	r2, r3
 800b704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b706:	643b      	str	r3, [r7, #64]	@ 0x40
 800b708:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b70a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b70c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b70e:	e841 2300 	strex	r3, r2, [r1]
 800b712:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b716:	2b00      	cmp	r3, #0
 800b718:	d1e6      	bne.n	800b6e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	3308      	adds	r3, #8
 800b720:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b722:	6a3b      	ldr	r3, [r7, #32]
 800b724:	e853 3f00 	ldrex	r3, [r3]
 800b728:	61fb      	str	r3, [r7, #28]
   return(result);
 800b72a:	69fa      	ldr	r2, [r7, #28]
 800b72c:	4b1e      	ldr	r3, [pc, #120]	@ (800b7a8 <UART_EndRxTransfer+0xc8>)
 800b72e:	4013      	ands	r3, r2
 800b730:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	3308      	adds	r3, #8
 800b738:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b73a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b73c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b73e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b740:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b742:	e841 2300 	strex	r3, r2, [r1]
 800b746:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d1e5      	bne.n	800b71a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b752:	2b01      	cmp	r3, #1
 800b754:	d118      	bne.n	800b788 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	e853 3f00 	ldrex	r3, [r3]
 800b762:	60bb      	str	r3, [r7, #8]
   return(result);
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	f023 0310 	bic.w	r3, r3, #16
 800b76a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	461a      	mov	r2, r3
 800b772:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b774:	61bb      	str	r3, [r7, #24]
 800b776:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b778:	6979      	ldr	r1, [r7, #20]
 800b77a:	69ba      	ldr	r2, [r7, #24]
 800b77c:	e841 2300 	strex	r3, r2, [r1]
 800b780:	613b      	str	r3, [r7, #16]
   return(result);
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d1e6      	bne.n	800b756 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2220      	movs	r2, #32
 800b78c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2200      	movs	r2, #0
 800b794:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2200      	movs	r2, #0
 800b79a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b79c:	bf00      	nop
 800b79e:	3754      	adds	r7, #84	@ 0x54
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr
 800b7a8:	effffffe 	.word	0xeffffffe

0800b7ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b085      	sub	sp, #20
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	d101      	bne.n	800b7c2 <HAL_UARTEx_DisableFifoMode+0x16>
 800b7be:	2302      	movs	r3, #2
 800b7c0:	e027      	b.n	800b812 <HAL_UARTEx_DisableFifoMode+0x66>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2224      	movs	r2, #36	@ 0x24
 800b7ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f022 0201 	bic.w	r2, r2, #1
 800b7e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b7f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	68fa      	ldr	r2, [r7, #12]
 800b7fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2220      	movs	r2, #32
 800b804:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2200      	movs	r2, #0
 800b80c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b810:	2300      	movs	r3, #0
}
 800b812:	4618      	mov	r0, r3
 800b814:	3714      	adds	r7, #20
 800b816:	46bd      	mov	sp, r7
 800b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81c:	4770      	bx	lr

0800b81e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b81e:	b580      	push	{r7, lr}
 800b820:	b084      	sub	sp, #16
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
 800b826:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b82e:	2b01      	cmp	r3, #1
 800b830:	d101      	bne.n	800b836 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b832:	2302      	movs	r3, #2
 800b834:	e02d      	b.n	800b892 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2201      	movs	r2, #1
 800b83a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2224      	movs	r2, #36	@ 0x24
 800b842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f022 0201 	bic.w	r2, r2, #1
 800b85c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	689b      	ldr	r3, [r3, #8]
 800b864:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	683a      	ldr	r2, [r7, #0]
 800b86e:	430a      	orrs	r2, r1
 800b870:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f000 f850 	bl	800b918 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	68fa      	ldr	r2, [r7, #12]
 800b87e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2220      	movs	r2, #32
 800b884:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2200      	movs	r2, #0
 800b88c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b890:	2300      	movs	r3, #0
}
 800b892:	4618      	mov	r0, r3
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}

0800b89a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b084      	sub	sp, #16
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
 800b8a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	d101      	bne.n	800b8b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b8ae:	2302      	movs	r3, #2
 800b8b0:	e02d      	b.n	800b90e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2224      	movs	r2, #36	@ 0x24
 800b8be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f022 0201 	bic.w	r2, r2, #1
 800b8d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	689b      	ldr	r3, [r3, #8]
 800b8e0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	683a      	ldr	r2, [r7, #0]
 800b8ea:	430a      	orrs	r2, r1
 800b8ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f000 f812 	bl	800b918 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	68fa      	ldr	r2, [r7, #12]
 800b8fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2220      	movs	r2, #32
 800b900:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2200      	movs	r2, #0
 800b908:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b90c:	2300      	movs	r3, #0
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3710      	adds	r7, #16
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
	...

0800b918 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b918:	b480      	push	{r7}
 800b91a:	b085      	sub	sp, #20
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b924:	2b00      	cmp	r3, #0
 800b926:	d108      	bne.n	800b93a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2201      	movs	r2, #1
 800b92c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2201      	movs	r2, #1
 800b934:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b938:	e031      	b.n	800b99e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b93a:	2310      	movs	r3, #16
 800b93c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b93e:	2310      	movs	r3, #16
 800b940:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	689b      	ldr	r3, [r3, #8]
 800b948:	0e5b      	lsrs	r3, r3, #25
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	f003 0307 	and.w	r3, r3, #7
 800b950:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	0f5b      	lsrs	r3, r3, #29
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	f003 0307 	and.w	r3, r3, #7
 800b960:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b962:	7bbb      	ldrb	r3, [r7, #14]
 800b964:	7b3a      	ldrb	r2, [r7, #12]
 800b966:	4911      	ldr	r1, [pc, #68]	@ (800b9ac <UARTEx_SetNbDataToProcess+0x94>)
 800b968:	5c8a      	ldrb	r2, [r1, r2]
 800b96a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b96e:	7b3a      	ldrb	r2, [r7, #12]
 800b970:	490f      	ldr	r1, [pc, #60]	@ (800b9b0 <UARTEx_SetNbDataToProcess+0x98>)
 800b972:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b974:	fb93 f3f2 	sdiv	r3, r3, r2
 800b978:	b29a      	uxth	r2, r3
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b980:	7bfb      	ldrb	r3, [r7, #15]
 800b982:	7b7a      	ldrb	r2, [r7, #13]
 800b984:	4909      	ldr	r1, [pc, #36]	@ (800b9ac <UARTEx_SetNbDataToProcess+0x94>)
 800b986:	5c8a      	ldrb	r2, [r1, r2]
 800b988:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b98c:	7b7a      	ldrb	r2, [r7, #13]
 800b98e:	4908      	ldr	r1, [pc, #32]	@ (800b9b0 <UARTEx_SetNbDataToProcess+0x98>)
 800b990:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b992:	fb93 f3f2 	sdiv	r3, r3, r2
 800b996:	b29a      	uxth	r2, r3
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b99e:	bf00      	nop
 800b9a0:	3714      	adds	r7, #20
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr
 800b9aa:	bf00      	nop
 800b9ac:	0800c618 	.word	0x0800c618
 800b9b0:	0800c620 	.word	0x0800c620

0800b9b4 <siprintf>:
 800b9b4:	b40e      	push	{r1, r2, r3}
 800b9b6:	b500      	push	{lr}
 800b9b8:	b09c      	sub	sp, #112	@ 0x70
 800b9ba:	ab1d      	add	r3, sp, #116	@ 0x74
 800b9bc:	9002      	str	r0, [sp, #8]
 800b9be:	9006      	str	r0, [sp, #24]
 800b9c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b9c4:	4809      	ldr	r0, [pc, #36]	@ (800b9ec <siprintf+0x38>)
 800b9c6:	9107      	str	r1, [sp, #28]
 800b9c8:	9104      	str	r1, [sp, #16]
 800b9ca:	4909      	ldr	r1, [pc, #36]	@ (800b9f0 <siprintf+0x3c>)
 800b9cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9d0:	9105      	str	r1, [sp, #20]
 800b9d2:	6800      	ldr	r0, [r0, #0]
 800b9d4:	9301      	str	r3, [sp, #4]
 800b9d6:	a902      	add	r1, sp, #8
 800b9d8:	f000 f9a2 	bl	800bd20 <_svfiprintf_r>
 800b9dc:	9b02      	ldr	r3, [sp, #8]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	701a      	strb	r2, [r3, #0]
 800b9e2:	b01c      	add	sp, #112	@ 0x70
 800b9e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9e8:	b003      	add	sp, #12
 800b9ea:	4770      	bx	lr
 800b9ec:	24000020 	.word	0x24000020
 800b9f0:	ffff0208 	.word	0xffff0208

0800b9f4 <memset>:
 800b9f4:	4402      	add	r2, r0
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d100      	bne.n	800b9fe <memset+0xa>
 800b9fc:	4770      	bx	lr
 800b9fe:	f803 1b01 	strb.w	r1, [r3], #1
 800ba02:	e7f9      	b.n	800b9f8 <memset+0x4>

0800ba04 <__errno>:
 800ba04:	4b01      	ldr	r3, [pc, #4]	@ (800ba0c <__errno+0x8>)
 800ba06:	6818      	ldr	r0, [r3, #0]
 800ba08:	4770      	bx	lr
 800ba0a:	bf00      	nop
 800ba0c:	24000020 	.word	0x24000020

0800ba10 <__libc_init_array>:
 800ba10:	b570      	push	{r4, r5, r6, lr}
 800ba12:	4d0d      	ldr	r5, [pc, #52]	@ (800ba48 <__libc_init_array+0x38>)
 800ba14:	4c0d      	ldr	r4, [pc, #52]	@ (800ba4c <__libc_init_array+0x3c>)
 800ba16:	1b64      	subs	r4, r4, r5
 800ba18:	10a4      	asrs	r4, r4, #2
 800ba1a:	2600      	movs	r6, #0
 800ba1c:	42a6      	cmp	r6, r4
 800ba1e:	d109      	bne.n	800ba34 <__libc_init_array+0x24>
 800ba20:	4d0b      	ldr	r5, [pc, #44]	@ (800ba50 <__libc_init_array+0x40>)
 800ba22:	4c0c      	ldr	r4, [pc, #48]	@ (800ba54 <__libc_init_array+0x44>)
 800ba24:	f000 fc66 	bl	800c2f4 <_init>
 800ba28:	1b64      	subs	r4, r4, r5
 800ba2a:	10a4      	asrs	r4, r4, #2
 800ba2c:	2600      	movs	r6, #0
 800ba2e:	42a6      	cmp	r6, r4
 800ba30:	d105      	bne.n	800ba3e <__libc_init_array+0x2e>
 800ba32:	bd70      	pop	{r4, r5, r6, pc}
 800ba34:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba38:	4798      	blx	r3
 800ba3a:	3601      	adds	r6, #1
 800ba3c:	e7ee      	b.n	800ba1c <__libc_init_array+0xc>
 800ba3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba42:	4798      	blx	r3
 800ba44:	3601      	adds	r6, #1
 800ba46:	e7f2      	b.n	800ba2e <__libc_init_array+0x1e>
 800ba48:	0800c664 	.word	0x0800c664
 800ba4c:	0800c664 	.word	0x0800c664
 800ba50:	0800c664 	.word	0x0800c664
 800ba54:	0800c668 	.word	0x0800c668

0800ba58 <__retarget_lock_acquire_recursive>:
 800ba58:	4770      	bx	lr

0800ba5a <__retarget_lock_release_recursive>:
 800ba5a:	4770      	bx	lr

0800ba5c <memcpy>:
 800ba5c:	440a      	add	r2, r1
 800ba5e:	4291      	cmp	r1, r2
 800ba60:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba64:	d100      	bne.n	800ba68 <memcpy+0xc>
 800ba66:	4770      	bx	lr
 800ba68:	b510      	push	{r4, lr}
 800ba6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba72:	4291      	cmp	r1, r2
 800ba74:	d1f9      	bne.n	800ba6a <memcpy+0xe>
 800ba76:	bd10      	pop	{r4, pc}

0800ba78 <_free_r>:
 800ba78:	b538      	push	{r3, r4, r5, lr}
 800ba7a:	4605      	mov	r5, r0
 800ba7c:	2900      	cmp	r1, #0
 800ba7e:	d041      	beq.n	800bb04 <_free_r+0x8c>
 800ba80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba84:	1f0c      	subs	r4, r1, #4
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	bfb8      	it	lt
 800ba8a:	18e4      	addlt	r4, r4, r3
 800ba8c:	f000 f8e0 	bl	800bc50 <__malloc_lock>
 800ba90:	4a1d      	ldr	r2, [pc, #116]	@ (800bb08 <_free_r+0x90>)
 800ba92:	6813      	ldr	r3, [r2, #0]
 800ba94:	b933      	cbnz	r3, 800baa4 <_free_r+0x2c>
 800ba96:	6063      	str	r3, [r4, #4]
 800ba98:	6014      	str	r4, [r2, #0]
 800ba9a:	4628      	mov	r0, r5
 800ba9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800baa0:	f000 b8dc 	b.w	800bc5c <__malloc_unlock>
 800baa4:	42a3      	cmp	r3, r4
 800baa6:	d908      	bls.n	800baba <_free_r+0x42>
 800baa8:	6820      	ldr	r0, [r4, #0]
 800baaa:	1821      	adds	r1, r4, r0
 800baac:	428b      	cmp	r3, r1
 800baae:	bf01      	itttt	eq
 800bab0:	6819      	ldreq	r1, [r3, #0]
 800bab2:	685b      	ldreq	r3, [r3, #4]
 800bab4:	1809      	addeq	r1, r1, r0
 800bab6:	6021      	streq	r1, [r4, #0]
 800bab8:	e7ed      	b.n	800ba96 <_free_r+0x1e>
 800baba:	461a      	mov	r2, r3
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	b10b      	cbz	r3, 800bac4 <_free_r+0x4c>
 800bac0:	42a3      	cmp	r3, r4
 800bac2:	d9fa      	bls.n	800baba <_free_r+0x42>
 800bac4:	6811      	ldr	r1, [r2, #0]
 800bac6:	1850      	adds	r0, r2, r1
 800bac8:	42a0      	cmp	r0, r4
 800baca:	d10b      	bne.n	800bae4 <_free_r+0x6c>
 800bacc:	6820      	ldr	r0, [r4, #0]
 800bace:	4401      	add	r1, r0
 800bad0:	1850      	adds	r0, r2, r1
 800bad2:	4283      	cmp	r3, r0
 800bad4:	6011      	str	r1, [r2, #0]
 800bad6:	d1e0      	bne.n	800ba9a <_free_r+0x22>
 800bad8:	6818      	ldr	r0, [r3, #0]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	6053      	str	r3, [r2, #4]
 800bade:	4408      	add	r0, r1
 800bae0:	6010      	str	r0, [r2, #0]
 800bae2:	e7da      	b.n	800ba9a <_free_r+0x22>
 800bae4:	d902      	bls.n	800baec <_free_r+0x74>
 800bae6:	230c      	movs	r3, #12
 800bae8:	602b      	str	r3, [r5, #0]
 800baea:	e7d6      	b.n	800ba9a <_free_r+0x22>
 800baec:	6820      	ldr	r0, [r4, #0]
 800baee:	1821      	adds	r1, r4, r0
 800baf0:	428b      	cmp	r3, r1
 800baf2:	bf04      	itt	eq
 800baf4:	6819      	ldreq	r1, [r3, #0]
 800baf6:	685b      	ldreq	r3, [r3, #4]
 800baf8:	6063      	str	r3, [r4, #4]
 800bafa:	bf04      	itt	eq
 800bafc:	1809      	addeq	r1, r1, r0
 800bafe:	6021      	streq	r1, [r4, #0]
 800bb00:	6054      	str	r4, [r2, #4]
 800bb02:	e7ca      	b.n	800ba9a <_free_r+0x22>
 800bb04:	bd38      	pop	{r3, r4, r5, pc}
 800bb06:	bf00      	nop
 800bb08:	240006fc 	.word	0x240006fc

0800bb0c <sbrk_aligned>:
 800bb0c:	b570      	push	{r4, r5, r6, lr}
 800bb0e:	4e0f      	ldr	r6, [pc, #60]	@ (800bb4c <sbrk_aligned+0x40>)
 800bb10:	460c      	mov	r4, r1
 800bb12:	6831      	ldr	r1, [r6, #0]
 800bb14:	4605      	mov	r5, r0
 800bb16:	b911      	cbnz	r1, 800bb1e <sbrk_aligned+0x12>
 800bb18:	f000 fba6 	bl	800c268 <_sbrk_r>
 800bb1c:	6030      	str	r0, [r6, #0]
 800bb1e:	4621      	mov	r1, r4
 800bb20:	4628      	mov	r0, r5
 800bb22:	f000 fba1 	bl	800c268 <_sbrk_r>
 800bb26:	1c43      	adds	r3, r0, #1
 800bb28:	d103      	bne.n	800bb32 <sbrk_aligned+0x26>
 800bb2a:	f04f 34ff 	mov.w	r4, #4294967295
 800bb2e:	4620      	mov	r0, r4
 800bb30:	bd70      	pop	{r4, r5, r6, pc}
 800bb32:	1cc4      	adds	r4, r0, #3
 800bb34:	f024 0403 	bic.w	r4, r4, #3
 800bb38:	42a0      	cmp	r0, r4
 800bb3a:	d0f8      	beq.n	800bb2e <sbrk_aligned+0x22>
 800bb3c:	1a21      	subs	r1, r4, r0
 800bb3e:	4628      	mov	r0, r5
 800bb40:	f000 fb92 	bl	800c268 <_sbrk_r>
 800bb44:	3001      	adds	r0, #1
 800bb46:	d1f2      	bne.n	800bb2e <sbrk_aligned+0x22>
 800bb48:	e7ef      	b.n	800bb2a <sbrk_aligned+0x1e>
 800bb4a:	bf00      	nop
 800bb4c:	240006f8 	.word	0x240006f8

0800bb50 <_malloc_r>:
 800bb50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb54:	1ccd      	adds	r5, r1, #3
 800bb56:	f025 0503 	bic.w	r5, r5, #3
 800bb5a:	3508      	adds	r5, #8
 800bb5c:	2d0c      	cmp	r5, #12
 800bb5e:	bf38      	it	cc
 800bb60:	250c      	movcc	r5, #12
 800bb62:	2d00      	cmp	r5, #0
 800bb64:	4606      	mov	r6, r0
 800bb66:	db01      	blt.n	800bb6c <_malloc_r+0x1c>
 800bb68:	42a9      	cmp	r1, r5
 800bb6a:	d904      	bls.n	800bb76 <_malloc_r+0x26>
 800bb6c:	230c      	movs	r3, #12
 800bb6e:	6033      	str	r3, [r6, #0]
 800bb70:	2000      	movs	r0, #0
 800bb72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bc4c <_malloc_r+0xfc>
 800bb7a:	f000 f869 	bl	800bc50 <__malloc_lock>
 800bb7e:	f8d8 3000 	ldr.w	r3, [r8]
 800bb82:	461c      	mov	r4, r3
 800bb84:	bb44      	cbnz	r4, 800bbd8 <_malloc_r+0x88>
 800bb86:	4629      	mov	r1, r5
 800bb88:	4630      	mov	r0, r6
 800bb8a:	f7ff ffbf 	bl	800bb0c <sbrk_aligned>
 800bb8e:	1c43      	adds	r3, r0, #1
 800bb90:	4604      	mov	r4, r0
 800bb92:	d158      	bne.n	800bc46 <_malloc_r+0xf6>
 800bb94:	f8d8 4000 	ldr.w	r4, [r8]
 800bb98:	4627      	mov	r7, r4
 800bb9a:	2f00      	cmp	r7, #0
 800bb9c:	d143      	bne.n	800bc26 <_malloc_r+0xd6>
 800bb9e:	2c00      	cmp	r4, #0
 800bba0:	d04b      	beq.n	800bc3a <_malloc_r+0xea>
 800bba2:	6823      	ldr	r3, [r4, #0]
 800bba4:	4639      	mov	r1, r7
 800bba6:	4630      	mov	r0, r6
 800bba8:	eb04 0903 	add.w	r9, r4, r3
 800bbac:	f000 fb5c 	bl	800c268 <_sbrk_r>
 800bbb0:	4581      	cmp	r9, r0
 800bbb2:	d142      	bne.n	800bc3a <_malloc_r+0xea>
 800bbb4:	6821      	ldr	r1, [r4, #0]
 800bbb6:	1a6d      	subs	r5, r5, r1
 800bbb8:	4629      	mov	r1, r5
 800bbba:	4630      	mov	r0, r6
 800bbbc:	f7ff ffa6 	bl	800bb0c <sbrk_aligned>
 800bbc0:	3001      	adds	r0, #1
 800bbc2:	d03a      	beq.n	800bc3a <_malloc_r+0xea>
 800bbc4:	6823      	ldr	r3, [r4, #0]
 800bbc6:	442b      	add	r3, r5
 800bbc8:	6023      	str	r3, [r4, #0]
 800bbca:	f8d8 3000 	ldr.w	r3, [r8]
 800bbce:	685a      	ldr	r2, [r3, #4]
 800bbd0:	bb62      	cbnz	r2, 800bc2c <_malloc_r+0xdc>
 800bbd2:	f8c8 7000 	str.w	r7, [r8]
 800bbd6:	e00f      	b.n	800bbf8 <_malloc_r+0xa8>
 800bbd8:	6822      	ldr	r2, [r4, #0]
 800bbda:	1b52      	subs	r2, r2, r5
 800bbdc:	d420      	bmi.n	800bc20 <_malloc_r+0xd0>
 800bbde:	2a0b      	cmp	r2, #11
 800bbe0:	d917      	bls.n	800bc12 <_malloc_r+0xc2>
 800bbe2:	1961      	adds	r1, r4, r5
 800bbe4:	42a3      	cmp	r3, r4
 800bbe6:	6025      	str	r5, [r4, #0]
 800bbe8:	bf18      	it	ne
 800bbea:	6059      	strne	r1, [r3, #4]
 800bbec:	6863      	ldr	r3, [r4, #4]
 800bbee:	bf08      	it	eq
 800bbf0:	f8c8 1000 	streq.w	r1, [r8]
 800bbf4:	5162      	str	r2, [r4, r5]
 800bbf6:	604b      	str	r3, [r1, #4]
 800bbf8:	4630      	mov	r0, r6
 800bbfa:	f000 f82f 	bl	800bc5c <__malloc_unlock>
 800bbfe:	f104 000b 	add.w	r0, r4, #11
 800bc02:	1d23      	adds	r3, r4, #4
 800bc04:	f020 0007 	bic.w	r0, r0, #7
 800bc08:	1ac2      	subs	r2, r0, r3
 800bc0a:	bf1c      	itt	ne
 800bc0c:	1a1b      	subne	r3, r3, r0
 800bc0e:	50a3      	strne	r3, [r4, r2]
 800bc10:	e7af      	b.n	800bb72 <_malloc_r+0x22>
 800bc12:	6862      	ldr	r2, [r4, #4]
 800bc14:	42a3      	cmp	r3, r4
 800bc16:	bf0c      	ite	eq
 800bc18:	f8c8 2000 	streq.w	r2, [r8]
 800bc1c:	605a      	strne	r2, [r3, #4]
 800bc1e:	e7eb      	b.n	800bbf8 <_malloc_r+0xa8>
 800bc20:	4623      	mov	r3, r4
 800bc22:	6864      	ldr	r4, [r4, #4]
 800bc24:	e7ae      	b.n	800bb84 <_malloc_r+0x34>
 800bc26:	463c      	mov	r4, r7
 800bc28:	687f      	ldr	r7, [r7, #4]
 800bc2a:	e7b6      	b.n	800bb9a <_malloc_r+0x4a>
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	42a3      	cmp	r3, r4
 800bc32:	d1fb      	bne.n	800bc2c <_malloc_r+0xdc>
 800bc34:	2300      	movs	r3, #0
 800bc36:	6053      	str	r3, [r2, #4]
 800bc38:	e7de      	b.n	800bbf8 <_malloc_r+0xa8>
 800bc3a:	230c      	movs	r3, #12
 800bc3c:	6033      	str	r3, [r6, #0]
 800bc3e:	4630      	mov	r0, r6
 800bc40:	f000 f80c 	bl	800bc5c <__malloc_unlock>
 800bc44:	e794      	b.n	800bb70 <_malloc_r+0x20>
 800bc46:	6005      	str	r5, [r0, #0]
 800bc48:	e7d6      	b.n	800bbf8 <_malloc_r+0xa8>
 800bc4a:	bf00      	nop
 800bc4c:	240006fc 	.word	0x240006fc

0800bc50 <__malloc_lock>:
 800bc50:	4801      	ldr	r0, [pc, #4]	@ (800bc58 <__malloc_lock+0x8>)
 800bc52:	f7ff bf01 	b.w	800ba58 <__retarget_lock_acquire_recursive>
 800bc56:	bf00      	nop
 800bc58:	240006f4 	.word	0x240006f4

0800bc5c <__malloc_unlock>:
 800bc5c:	4801      	ldr	r0, [pc, #4]	@ (800bc64 <__malloc_unlock+0x8>)
 800bc5e:	f7ff befc 	b.w	800ba5a <__retarget_lock_release_recursive>
 800bc62:	bf00      	nop
 800bc64:	240006f4 	.word	0x240006f4

0800bc68 <__ssputs_r>:
 800bc68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc6c:	688e      	ldr	r6, [r1, #8]
 800bc6e:	461f      	mov	r7, r3
 800bc70:	42be      	cmp	r6, r7
 800bc72:	680b      	ldr	r3, [r1, #0]
 800bc74:	4682      	mov	sl, r0
 800bc76:	460c      	mov	r4, r1
 800bc78:	4690      	mov	r8, r2
 800bc7a:	d82d      	bhi.n	800bcd8 <__ssputs_r+0x70>
 800bc7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bc84:	d026      	beq.n	800bcd4 <__ssputs_r+0x6c>
 800bc86:	6965      	ldr	r5, [r4, #20]
 800bc88:	6909      	ldr	r1, [r1, #16]
 800bc8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc8e:	eba3 0901 	sub.w	r9, r3, r1
 800bc92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc96:	1c7b      	adds	r3, r7, #1
 800bc98:	444b      	add	r3, r9
 800bc9a:	106d      	asrs	r5, r5, #1
 800bc9c:	429d      	cmp	r5, r3
 800bc9e:	bf38      	it	cc
 800bca0:	461d      	movcc	r5, r3
 800bca2:	0553      	lsls	r3, r2, #21
 800bca4:	d527      	bpl.n	800bcf6 <__ssputs_r+0x8e>
 800bca6:	4629      	mov	r1, r5
 800bca8:	f7ff ff52 	bl	800bb50 <_malloc_r>
 800bcac:	4606      	mov	r6, r0
 800bcae:	b360      	cbz	r0, 800bd0a <__ssputs_r+0xa2>
 800bcb0:	6921      	ldr	r1, [r4, #16]
 800bcb2:	464a      	mov	r2, r9
 800bcb4:	f7ff fed2 	bl	800ba5c <memcpy>
 800bcb8:	89a3      	ldrh	r3, [r4, #12]
 800bcba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bcbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcc2:	81a3      	strh	r3, [r4, #12]
 800bcc4:	6126      	str	r6, [r4, #16]
 800bcc6:	6165      	str	r5, [r4, #20]
 800bcc8:	444e      	add	r6, r9
 800bcca:	eba5 0509 	sub.w	r5, r5, r9
 800bcce:	6026      	str	r6, [r4, #0]
 800bcd0:	60a5      	str	r5, [r4, #8]
 800bcd2:	463e      	mov	r6, r7
 800bcd4:	42be      	cmp	r6, r7
 800bcd6:	d900      	bls.n	800bcda <__ssputs_r+0x72>
 800bcd8:	463e      	mov	r6, r7
 800bcda:	6820      	ldr	r0, [r4, #0]
 800bcdc:	4632      	mov	r2, r6
 800bcde:	4641      	mov	r1, r8
 800bce0:	f000 faa8 	bl	800c234 <memmove>
 800bce4:	68a3      	ldr	r3, [r4, #8]
 800bce6:	1b9b      	subs	r3, r3, r6
 800bce8:	60a3      	str	r3, [r4, #8]
 800bcea:	6823      	ldr	r3, [r4, #0]
 800bcec:	4433      	add	r3, r6
 800bcee:	6023      	str	r3, [r4, #0]
 800bcf0:	2000      	movs	r0, #0
 800bcf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcf6:	462a      	mov	r2, r5
 800bcf8:	f000 fac6 	bl	800c288 <_realloc_r>
 800bcfc:	4606      	mov	r6, r0
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	d1e0      	bne.n	800bcc4 <__ssputs_r+0x5c>
 800bd02:	6921      	ldr	r1, [r4, #16]
 800bd04:	4650      	mov	r0, sl
 800bd06:	f7ff feb7 	bl	800ba78 <_free_r>
 800bd0a:	230c      	movs	r3, #12
 800bd0c:	f8ca 3000 	str.w	r3, [sl]
 800bd10:	89a3      	ldrh	r3, [r4, #12]
 800bd12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd16:	81a3      	strh	r3, [r4, #12]
 800bd18:	f04f 30ff 	mov.w	r0, #4294967295
 800bd1c:	e7e9      	b.n	800bcf2 <__ssputs_r+0x8a>
	...

0800bd20 <_svfiprintf_r>:
 800bd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd24:	4698      	mov	r8, r3
 800bd26:	898b      	ldrh	r3, [r1, #12]
 800bd28:	061b      	lsls	r3, r3, #24
 800bd2a:	b09d      	sub	sp, #116	@ 0x74
 800bd2c:	4607      	mov	r7, r0
 800bd2e:	460d      	mov	r5, r1
 800bd30:	4614      	mov	r4, r2
 800bd32:	d510      	bpl.n	800bd56 <_svfiprintf_r+0x36>
 800bd34:	690b      	ldr	r3, [r1, #16]
 800bd36:	b973      	cbnz	r3, 800bd56 <_svfiprintf_r+0x36>
 800bd38:	2140      	movs	r1, #64	@ 0x40
 800bd3a:	f7ff ff09 	bl	800bb50 <_malloc_r>
 800bd3e:	6028      	str	r0, [r5, #0]
 800bd40:	6128      	str	r0, [r5, #16]
 800bd42:	b930      	cbnz	r0, 800bd52 <_svfiprintf_r+0x32>
 800bd44:	230c      	movs	r3, #12
 800bd46:	603b      	str	r3, [r7, #0]
 800bd48:	f04f 30ff 	mov.w	r0, #4294967295
 800bd4c:	b01d      	add	sp, #116	@ 0x74
 800bd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd52:	2340      	movs	r3, #64	@ 0x40
 800bd54:	616b      	str	r3, [r5, #20]
 800bd56:	2300      	movs	r3, #0
 800bd58:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd5a:	2320      	movs	r3, #32
 800bd5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd60:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd64:	2330      	movs	r3, #48	@ 0x30
 800bd66:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bf04 <_svfiprintf_r+0x1e4>
 800bd6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd6e:	f04f 0901 	mov.w	r9, #1
 800bd72:	4623      	mov	r3, r4
 800bd74:	469a      	mov	sl, r3
 800bd76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd7a:	b10a      	cbz	r2, 800bd80 <_svfiprintf_r+0x60>
 800bd7c:	2a25      	cmp	r2, #37	@ 0x25
 800bd7e:	d1f9      	bne.n	800bd74 <_svfiprintf_r+0x54>
 800bd80:	ebba 0b04 	subs.w	fp, sl, r4
 800bd84:	d00b      	beq.n	800bd9e <_svfiprintf_r+0x7e>
 800bd86:	465b      	mov	r3, fp
 800bd88:	4622      	mov	r2, r4
 800bd8a:	4629      	mov	r1, r5
 800bd8c:	4638      	mov	r0, r7
 800bd8e:	f7ff ff6b 	bl	800bc68 <__ssputs_r>
 800bd92:	3001      	adds	r0, #1
 800bd94:	f000 80a7 	beq.w	800bee6 <_svfiprintf_r+0x1c6>
 800bd98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd9a:	445a      	add	r2, fp
 800bd9c:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd9e:	f89a 3000 	ldrb.w	r3, [sl]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	f000 809f 	beq.w	800bee6 <_svfiprintf_r+0x1c6>
 800bda8:	2300      	movs	r3, #0
 800bdaa:	f04f 32ff 	mov.w	r2, #4294967295
 800bdae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdb2:	f10a 0a01 	add.w	sl, sl, #1
 800bdb6:	9304      	str	r3, [sp, #16]
 800bdb8:	9307      	str	r3, [sp, #28]
 800bdba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bdbe:	931a      	str	r3, [sp, #104]	@ 0x68
 800bdc0:	4654      	mov	r4, sl
 800bdc2:	2205      	movs	r2, #5
 800bdc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdc8:	484e      	ldr	r0, [pc, #312]	@ (800bf04 <_svfiprintf_r+0x1e4>)
 800bdca:	f7f4 faa9 	bl	8000320 <memchr>
 800bdce:	9a04      	ldr	r2, [sp, #16]
 800bdd0:	b9d8      	cbnz	r0, 800be0a <_svfiprintf_r+0xea>
 800bdd2:	06d0      	lsls	r0, r2, #27
 800bdd4:	bf44      	itt	mi
 800bdd6:	2320      	movmi	r3, #32
 800bdd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bddc:	0711      	lsls	r1, r2, #28
 800bdde:	bf44      	itt	mi
 800bde0:	232b      	movmi	r3, #43	@ 0x2b
 800bde2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bde6:	f89a 3000 	ldrb.w	r3, [sl]
 800bdea:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdec:	d015      	beq.n	800be1a <_svfiprintf_r+0xfa>
 800bdee:	9a07      	ldr	r2, [sp, #28]
 800bdf0:	4654      	mov	r4, sl
 800bdf2:	2000      	movs	r0, #0
 800bdf4:	f04f 0c0a 	mov.w	ip, #10
 800bdf8:	4621      	mov	r1, r4
 800bdfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdfe:	3b30      	subs	r3, #48	@ 0x30
 800be00:	2b09      	cmp	r3, #9
 800be02:	d94b      	bls.n	800be9c <_svfiprintf_r+0x17c>
 800be04:	b1b0      	cbz	r0, 800be34 <_svfiprintf_r+0x114>
 800be06:	9207      	str	r2, [sp, #28]
 800be08:	e014      	b.n	800be34 <_svfiprintf_r+0x114>
 800be0a:	eba0 0308 	sub.w	r3, r0, r8
 800be0e:	fa09 f303 	lsl.w	r3, r9, r3
 800be12:	4313      	orrs	r3, r2
 800be14:	9304      	str	r3, [sp, #16]
 800be16:	46a2      	mov	sl, r4
 800be18:	e7d2      	b.n	800bdc0 <_svfiprintf_r+0xa0>
 800be1a:	9b03      	ldr	r3, [sp, #12]
 800be1c:	1d19      	adds	r1, r3, #4
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	9103      	str	r1, [sp, #12]
 800be22:	2b00      	cmp	r3, #0
 800be24:	bfbb      	ittet	lt
 800be26:	425b      	neglt	r3, r3
 800be28:	f042 0202 	orrlt.w	r2, r2, #2
 800be2c:	9307      	strge	r3, [sp, #28]
 800be2e:	9307      	strlt	r3, [sp, #28]
 800be30:	bfb8      	it	lt
 800be32:	9204      	strlt	r2, [sp, #16]
 800be34:	7823      	ldrb	r3, [r4, #0]
 800be36:	2b2e      	cmp	r3, #46	@ 0x2e
 800be38:	d10a      	bne.n	800be50 <_svfiprintf_r+0x130>
 800be3a:	7863      	ldrb	r3, [r4, #1]
 800be3c:	2b2a      	cmp	r3, #42	@ 0x2a
 800be3e:	d132      	bne.n	800bea6 <_svfiprintf_r+0x186>
 800be40:	9b03      	ldr	r3, [sp, #12]
 800be42:	1d1a      	adds	r2, r3, #4
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	9203      	str	r2, [sp, #12]
 800be48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be4c:	3402      	adds	r4, #2
 800be4e:	9305      	str	r3, [sp, #20]
 800be50:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bf14 <_svfiprintf_r+0x1f4>
 800be54:	7821      	ldrb	r1, [r4, #0]
 800be56:	2203      	movs	r2, #3
 800be58:	4650      	mov	r0, sl
 800be5a:	f7f4 fa61 	bl	8000320 <memchr>
 800be5e:	b138      	cbz	r0, 800be70 <_svfiprintf_r+0x150>
 800be60:	9b04      	ldr	r3, [sp, #16]
 800be62:	eba0 000a 	sub.w	r0, r0, sl
 800be66:	2240      	movs	r2, #64	@ 0x40
 800be68:	4082      	lsls	r2, r0
 800be6a:	4313      	orrs	r3, r2
 800be6c:	3401      	adds	r4, #1
 800be6e:	9304      	str	r3, [sp, #16]
 800be70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be74:	4824      	ldr	r0, [pc, #144]	@ (800bf08 <_svfiprintf_r+0x1e8>)
 800be76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be7a:	2206      	movs	r2, #6
 800be7c:	f7f4 fa50 	bl	8000320 <memchr>
 800be80:	2800      	cmp	r0, #0
 800be82:	d036      	beq.n	800bef2 <_svfiprintf_r+0x1d2>
 800be84:	4b21      	ldr	r3, [pc, #132]	@ (800bf0c <_svfiprintf_r+0x1ec>)
 800be86:	bb1b      	cbnz	r3, 800bed0 <_svfiprintf_r+0x1b0>
 800be88:	9b03      	ldr	r3, [sp, #12]
 800be8a:	3307      	adds	r3, #7
 800be8c:	f023 0307 	bic.w	r3, r3, #7
 800be90:	3308      	adds	r3, #8
 800be92:	9303      	str	r3, [sp, #12]
 800be94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be96:	4433      	add	r3, r6
 800be98:	9309      	str	r3, [sp, #36]	@ 0x24
 800be9a:	e76a      	b.n	800bd72 <_svfiprintf_r+0x52>
 800be9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bea0:	460c      	mov	r4, r1
 800bea2:	2001      	movs	r0, #1
 800bea4:	e7a8      	b.n	800bdf8 <_svfiprintf_r+0xd8>
 800bea6:	2300      	movs	r3, #0
 800bea8:	3401      	adds	r4, #1
 800beaa:	9305      	str	r3, [sp, #20]
 800beac:	4619      	mov	r1, r3
 800beae:	f04f 0c0a 	mov.w	ip, #10
 800beb2:	4620      	mov	r0, r4
 800beb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800beb8:	3a30      	subs	r2, #48	@ 0x30
 800beba:	2a09      	cmp	r2, #9
 800bebc:	d903      	bls.n	800bec6 <_svfiprintf_r+0x1a6>
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d0c6      	beq.n	800be50 <_svfiprintf_r+0x130>
 800bec2:	9105      	str	r1, [sp, #20]
 800bec4:	e7c4      	b.n	800be50 <_svfiprintf_r+0x130>
 800bec6:	fb0c 2101 	mla	r1, ip, r1, r2
 800beca:	4604      	mov	r4, r0
 800becc:	2301      	movs	r3, #1
 800bece:	e7f0      	b.n	800beb2 <_svfiprintf_r+0x192>
 800bed0:	ab03      	add	r3, sp, #12
 800bed2:	9300      	str	r3, [sp, #0]
 800bed4:	462a      	mov	r2, r5
 800bed6:	4b0e      	ldr	r3, [pc, #56]	@ (800bf10 <_svfiprintf_r+0x1f0>)
 800bed8:	a904      	add	r1, sp, #16
 800beda:	4638      	mov	r0, r7
 800bedc:	f3af 8000 	nop.w
 800bee0:	1c42      	adds	r2, r0, #1
 800bee2:	4606      	mov	r6, r0
 800bee4:	d1d6      	bne.n	800be94 <_svfiprintf_r+0x174>
 800bee6:	89ab      	ldrh	r3, [r5, #12]
 800bee8:	065b      	lsls	r3, r3, #25
 800beea:	f53f af2d 	bmi.w	800bd48 <_svfiprintf_r+0x28>
 800beee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bef0:	e72c      	b.n	800bd4c <_svfiprintf_r+0x2c>
 800bef2:	ab03      	add	r3, sp, #12
 800bef4:	9300      	str	r3, [sp, #0]
 800bef6:	462a      	mov	r2, r5
 800bef8:	4b05      	ldr	r3, [pc, #20]	@ (800bf10 <_svfiprintf_r+0x1f0>)
 800befa:	a904      	add	r1, sp, #16
 800befc:	4638      	mov	r0, r7
 800befe:	f000 f879 	bl	800bff4 <_printf_i>
 800bf02:	e7ed      	b.n	800bee0 <_svfiprintf_r+0x1c0>
 800bf04:	0800c628 	.word	0x0800c628
 800bf08:	0800c632 	.word	0x0800c632
 800bf0c:	00000000 	.word	0x00000000
 800bf10:	0800bc69 	.word	0x0800bc69
 800bf14:	0800c62e 	.word	0x0800c62e

0800bf18 <_printf_common>:
 800bf18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf1c:	4616      	mov	r6, r2
 800bf1e:	4698      	mov	r8, r3
 800bf20:	688a      	ldr	r2, [r1, #8]
 800bf22:	690b      	ldr	r3, [r1, #16]
 800bf24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	bfb8      	it	lt
 800bf2c:	4613      	movlt	r3, r2
 800bf2e:	6033      	str	r3, [r6, #0]
 800bf30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bf34:	4607      	mov	r7, r0
 800bf36:	460c      	mov	r4, r1
 800bf38:	b10a      	cbz	r2, 800bf3e <_printf_common+0x26>
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	6033      	str	r3, [r6, #0]
 800bf3e:	6823      	ldr	r3, [r4, #0]
 800bf40:	0699      	lsls	r1, r3, #26
 800bf42:	bf42      	ittt	mi
 800bf44:	6833      	ldrmi	r3, [r6, #0]
 800bf46:	3302      	addmi	r3, #2
 800bf48:	6033      	strmi	r3, [r6, #0]
 800bf4a:	6825      	ldr	r5, [r4, #0]
 800bf4c:	f015 0506 	ands.w	r5, r5, #6
 800bf50:	d106      	bne.n	800bf60 <_printf_common+0x48>
 800bf52:	f104 0a19 	add.w	sl, r4, #25
 800bf56:	68e3      	ldr	r3, [r4, #12]
 800bf58:	6832      	ldr	r2, [r6, #0]
 800bf5a:	1a9b      	subs	r3, r3, r2
 800bf5c:	42ab      	cmp	r3, r5
 800bf5e:	dc26      	bgt.n	800bfae <_printf_common+0x96>
 800bf60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bf64:	6822      	ldr	r2, [r4, #0]
 800bf66:	3b00      	subs	r3, #0
 800bf68:	bf18      	it	ne
 800bf6a:	2301      	movne	r3, #1
 800bf6c:	0692      	lsls	r2, r2, #26
 800bf6e:	d42b      	bmi.n	800bfc8 <_printf_common+0xb0>
 800bf70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bf74:	4641      	mov	r1, r8
 800bf76:	4638      	mov	r0, r7
 800bf78:	47c8      	blx	r9
 800bf7a:	3001      	adds	r0, #1
 800bf7c:	d01e      	beq.n	800bfbc <_printf_common+0xa4>
 800bf7e:	6823      	ldr	r3, [r4, #0]
 800bf80:	6922      	ldr	r2, [r4, #16]
 800bf82:	f003 0306 	and.w	r3, r3, #6
 800bf86:	2b04      	cmp	r3, #4
 800bf88:	bf02      	ittt	eq
 800bf8a:	68e5      	ldreq	r5, [r4, #12]
 800bf8c:	6833      	ldreq	r3, [r6, #0]
 800bf8e:	1aed      	subeq	r5, r5, r3
 800bf90:	68a3      	ldr	r3, [r4, #8]
 800bf92:	bf0c      	ite	eq
 800bf94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf98:	2500      	movne	r5, #0
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	bfc4      	itt	gt
 800bf9e:	1a9b      	subgt	r3, r3, r2
 800bfa0:	18ed      	addgt	r5, r5, r3
 800bfa2:	2600      	movs	r6, #0
 800bfa4:	341a      	adds	r4, #26
 800bfa6:	42b5      	cmp	r5, r6
 800bfa8:	d11a      	bne.n	800bfe0 <_printf_common+0xc8>
 800bfaa:	2000      	movs	r0, #0
 800bfac:	e008      	b.n	800bfc0 <_printf_common+0xa8>
 800bfae:	2301      	movs	r3, #1
 800bfb0:	4652      	mov	r2, sl
 800bfb2:	4641      	mov	r1, r8
 800bfb4:	4638      	mov	r0, r7
 800bfb6:	47c8      	blx	r9
 800bfb8:	3001      	adds	r0, #1
 800bfba:	d103      	bne.n	800bfc4 <_printf_common+0xac>
 800bfbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bfc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfc4:	3501      	adds	r5, #1
 800bfc6:	e7c6      	b.n	800bf56 <_printf_common+0x3e>
 800bfc8:	18e1      	adds	r1, r4, r3
 800bfca:	1c5a      	adds	r2, r3, #1
 800bfcc:	2030      	movs	r0, #48	@ 0x30
 800bfce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bfd2:	4422      	add	r2, r4
 800bfd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bfd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bfdc:	3302      	adds	r3, #2
 800bfde:	e7c7      	b.n	800bf70 <_printf_common+0x58>
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	4622      	mov	r2, r4
 800bfe4:	4641      	mov	r1, r8
 800bfe6:	4638      	mov	r0, r7
 800bfe8:	47c8      	blx	r9
 800bfea:	3001      	adds	r0, #1
 800bfec:	d0e6      	beq.n	800bfbc <_printf_common+0xa4>
 800bfee:	3601      	adds	r6, #1
 800bff0:	e7d9      	b.n	800bfa6 <_printf_common+0x8e>
	...

0800bff4 <_printf_i>:
 800bff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bff8:	7e0f      	ldrb	r7, [r1, #24]
 800bffa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bffc:	2f78      	cmp	r7, #120	@ 0x78
 800bffe:	4691      	mov	r9, r2
 800c000:	4680      	mov	r8, r0
 800c002:	460c      	mov	r4, r1
 800c004:	469a      	mov	sl, r3
 800c006:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c00a:	d807      	bhi.n	800c01c <_printf_i+0x28>
 800c00c:	2f62      	cmp	r7, #98	@ 0x62
 800c00e:	d80a      	bhi.n	800c026 <_printf_i+0x32>
 800c010:	2f00      	cmp	r7, #0
 800c012:	f000 80d2 	beq.w	800c1ba <_printf_i+0x1c6>
 800c016:	2f58      	cmp	r7, #88	@ 0x58
 800c018:	f000 80b9 	beq.w	800c18e <_printf_i+0x19a>
 800c01c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c020:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c024:	e03a      	b.n	800c09c <_printf_i+0xa8>
 800c026:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c02a:	2b15      	cmp	r3, #21
 800c02c:	d8f6      	bhi.n	800c01c <_printf_i+0x28>
 800c02e:	a101      	add	r1, pc, #4	@ (adr r1, 800c034 <_printf_i+0x40>)
 800c030:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c034:	0800c08d 	.word	0x0800c08d
 800c038:	0800c0a1 	.word	0x0800c0a1
 800c03c:	0800c01d 	.word	0x0800c01d
 800c040:	0800c01d 	.word	0x0800c01d
 800c044:	0800c01d 	.word	0x0800c01d
 800c048:	0800c01d 	.word	0x0800c01d
 800c04c:	0800c0a1 	.word	0x0800c0a1
 800c050:	0800c01d 	.word	0x0800c01d
 800c054:	0800c01d 	.word	0x0800c01d
 800c058:	0800c01d 	.word	0x0800c01d
 800c05c:	0800c01d 	.word	0x0800c01d
 800c060:	0800c1a1 	.word	0x0800c1a1
 800c064:	0800c0cb 	.word	0x0800c0cb
 800c068:	0800c15b 	.word	0x0800c15b
 800c06c:	0800c01d 	.word	0x0800c01d
 800c070:	0800c01d 	.word	0x0800c01d
 800c074:	0800c1c3 	.word	0x0800c1c3
 800c078:	0800c01d 	.word	0x0800c01d
 800c07c:	0800c0cb 	.word	0x0800c0cb
 800c080:	0800c01d 	.word	0x0800c01d
 800c084:	0800c01d 	.word	0x0800c01d
 800c088:	0800c163 	.word	0x0800c163
 800c08c:	6833      	ldr	r3, [r6, #0]
 800c08e:	1d1a      	adds	r2, r3, #4
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	6032      	str	r2, [r6, #0]
 800c094:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c098:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c09c:	2301      	movs	r3, #1
 800c09e:	e09d      	b.n	800c1dc <_printf_i+0x1e8>
 800c0a0:	6833      	ldr	r3, [r6, #0]
 800c0a2:	6820      	ldr	r0, [r4, #0]
 800c0a4:	1d19      	adds	r1, r3, #4
 800c0a6:	6031      	str	r1, [r6, #0]
 800c0a8:	0606      	lsls	r6, r0, #24
 800c0aa:	d501      	bpl.n	800c0b0 <_printf_i+0xbc>
 800c0ac:	681d      	ldr	r5, [r3, #0]
 800c0ae:	e003      	b.n	800c0b8 <_printf_i+0xc4>
 800c0b0:	0645      	lsls	r5, r0, #25
 800c0b2:	d5fb      	bpl.n	800c0ac <_printf_i+0xb8>
 800c0b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c0b8:	2d00      	cmp	r5, #0
 800c0ba:	da03      	bge.n	800c0c4 <_printf_i+0xd0>
 800c0bc:	232d      	movs	r3, #45	@ 0x2d
 800c0be:	426d      	negs	r5, r5
 800c0c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0c4:	4859      	ldr	r0, [pc, #356]	@ (800c22c <_printf_i+0x238>)
 800c0c6:	230a      	movs	r3, #10
 800c0c8:	e011      	b.n	800c0ee <_printf_i+0xfa>
 800c0ca:	6821      	ldr	r1, [r4, #0]
 800c0cc:	6833      	ldr	r3, [r6, #0]
 800c0ce:	0608      	lsls	r0, r1, #24
 800c0d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800c0d4:	d402      	bmi.n	800c0dc <_printf_i+0xe8>
 800c0d6:	0649      	lsls	r1, r1, #25
 800c0d8:	bf48      	it	mi
 800c0da:	b2ad      	uxthmi	r5, r5
 800c0dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800c0de:	4853      	ldr	r0, [pc, #332]	@ (800c22c <_printf_i+0x238>)
 800c0e0:	6033      	str	r3, [r6, #0]
 800c0e2:	bf14      	ite	ne
 800c0e4:	230a      	movne	r3, #10
 800c0e6:	2308      	moveq	r3, #8
 800c0e8:	2100      	movs	r1, #0
 800c0ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c0ee:	6866      	ldr	r6, [r4, #4]
 800c0f0:	60a6      	str	r6, [r4, #8]
 800c0f2:	2e00      	cmp	r6, #0
 800c0f4:	bfa2      	ittt	ge
 800c0f6:	6821      	ldrge	r1, [r4, #0]
 800c0f8:	f021 0104 	bicge.w	r1, r1, #4
 800c0fc:	6021      	strge	r1, [r4, #0]
 800c0fe:	b90d      	cbnz	r5, 800c104 <_printf_i+0x110>
 800c100:	2e00      	cmp	r6, #0
 800c102:	d04b      	beq.n	800c19c <_printf_i+0x1a8>
 800c104:	4616      	mov	r6, r2
 800c106:	fbb5 f1f3 	udiv	r1, r5, r3
 800c10a:	fb03 5711 	mls	r7, r3, r1, r5
 800c10e:	5dc7      	ldrb	r7, [r0, r7]
 800c110:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c114:	462f      	mov	r7, r5
 800c116:	42bb      	cmp	r3, r7
 800c118:	460d      	mov	r5, r1
 800c11a:	d9f4      	bls.n	800c106 <_printf_i+0x112>
 800c11c:	2b08      	cmp	r3, #8
 800c11e:	d10b      	bne.n	800c138 <_printf_i+0x144>
 800c120:	6823      	ldr	r3, [r4, #0]
 800c122:	07df      	lsls	r7, r3, #31
 800c124:	d508      	bpl.n	800c138 <_printf_i+0x144>
 800c126:	6923      	ldr	r3, [r4, #16]
 800c128:	6861      	ldr	r1, [r4, #4]
 800c12a:	4299      	cmp	r1, r3
 800c12c:	bfde      	ittt	le
 800c12e:	2330      	movle	r3, #48	@ 0x30
 800c130:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c134:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c138:	1b92      	subs	r2, r2, r6
 800c13a:	6122      	str	r2, [r4, #16]
 800c13c:	f8cd a000 	str.w	sl, [sp]
 800c140:	464b      	mov	r3, r9
 800c142:	aa03      	add	r2, sp, #12
 800c144:	4621      	mov	r1, r4
 800c146:	4640      	mov	r0, r8
 800c148:	f7ff fee6 	bl	800bf18 <_printf_common>
 800c14c:	3001      	adds	r0, #1
 800c14e:	d14a      	bne.n	800c1e6 <_printf_i+0x1f2>
 800c150:	f04f 30ff 	mov.w	r0, #4294967295
 800c154:	b004      	add	sp, #16
 800c156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c15a:	6823      	ldr	r3, [r4, #0]
 800c15c:	f043 0320 	orr.w	r3, r3, #32
 800c160:	6023      	str	r3, [r4, #0]
 800c162:	4833      	ldr	r0, [pc, #204]	@ (800c230 <_printf_i+0x23c>)
 800c164:	2778      	movs	r7, #120	@ 0x78
 800c166:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c16a:	6823      	ldr	r3, [r4, #0]
 800c16c:	6831      	ldr	r1, [r6, #0]
 800c16e:	061f      	lsls	r7, r3, #24
 800c170:	f851 5b04 	ldr.w	r5, [r1], #4
 800c174:	d402      	bmi.n	800c17c <_printf_i+0x188>
 800c176:	065f      	lsls	r7, r3, #25
 800c178:	bf48      	it	mi
 800c17a:	b2ad      	uxthmi	r5, r5
 800c17c:	6031      	str	r1, [r6, #0]
 800c17e:	07d9      	lsls	r1, r3, #31
 800c180:	bf44      	itt	mi
 800c182:	f043 0320 	orrmi.w	r3, r3, #32
 800c186:	6023      	strmi	r3, [r4, #0]
 800c188:	b11d      	cbz	r5, 800c192 <_printf_i+0x19e>
 800c18a:	2310      	movs	r3, #16
 800c18c:	e7ac      	b.n	800c0e8 <_printf_i+0xf4>
 800c18e:	4827      	ldr	r0, [pc, #156]	@ (800c22c <_printf_i+0x238>)
 800c190:	e7e9      	b.n	800c166 <_printf_i+0x172>
 800c192:	6823      	ldr	r3, [r4, #0]
 800c194:	f023 0320 	bic.w	r3, r3, #32
 800c198:	6023      	str	r3, [r4, #0]
 800c19a:	e7f6      	b.n	800c18a <_printf_i+0x196>
 800c19c:	4616      	mov	r6, r2
 800c19e:	e7bd      	b.n	800c11c <_printf_i+0x128>
 800c1a0:	6833      	ldr	r3, [r6, #0]
 800c1a2:	6825      	ldr	r5, [r4, #0]
 800c1a4:	6961      	ldr	r1, [r4, #20]
 800c1a6:	1d18      	adds	r0, r3, #4
 800c1a8:	6030      	str	r0, [r6, #0]
 800c1aa:	062e      	lsls	r6, r5, #24
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	d501      	bpl.n	800c1b4 <_printf_i+0x1c0>
 800c1b0:	6019      	str	r1, [r3, #0]
 800c1b2:	e002      	b.n	800c1ba <_printf_i+0x1c6>
 800c1b4:	0668      	lsls	r0, r5, #25
 800c1b6:	d5fb      	bpl.n	800c1b0 <_printf_i+0x1bc>
 800c1b8:	8019      	strh	r1, [r3, #0]
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	6123      	str	r3, [r4, #16]
 800c1be:	4616      	mov	r6, r2
 800c1c0:	e7bc      	b.n	800c13c <_printf_i+0x148>
 800c1c2:	6833      	ldr	r3, [r6, #0]
 800c1c4:	1d1a      	adds	r2, r3, #4
 800c1c6:	6032      	str	r2, [r6, #0]
 800c1c8:	681e      	ldr	r6, [r3, #0]
 800c1ca:	6862      	ldr	r2, [r4, #4]
 800c1cc:	2100      	movs	r1, #0
 800c1ce:	4630      	mov	r0, r6
 800c1d0:	f7f4 f8a6 	bl	8000320 <memchr>
 800c1d4:	b108      	cbz	r0, 800c1da <_printf_i+0x1e6>
 800c1d6:	1b80      	subs	r0, r0, r6
 800c1d8:	6060      	str	r0, [r4, #4]
 800c1da:	6863      	ldr	r3, [r4, #4]
 800c1dc:	6123      	str	r3, [r4, #16]
 800c1de:	2300      	movs	r3, #0
 800c1e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1e4:	e7aa      	b.n	800c13c <_printf_i+0x148>
 800c1e6:	6923      	ldr	r3, [r4, #16]
 800c1e8:	4632      	mov	r2, r6
 800c1ea:	4649      	mov	r1, r9
 800c1ec:	4640      	mov	r0, r8
 800c1ee:	47d0      	blx	sl
 800c1f0:	3001      	adds	r0, #1
 800c1f2:	d0ad      	beq.n	800c150 <_printf_i+0x15c>
 800c1f4:	6823      	ldr	r3, [r4, #0]
 800c1f6:	079b      	lsls	r3, r3, #30
 800c1f8:	d413      	bmi.n	800c222 <_printf_i+0x22e>
 800c1fa:	68e0      	ldr	r0, [r4, #12]
 800c1fc:	9b03      	ldr	r3, [sp, #12]
 800c1fe:	4298      	cmp	r0, r3
 800c200:	bfb8      	it	lt
 800c202:	4618      	movlt	r0, r3
 800c204:	e7a6      	b.n	800c154 <_printf_i+0x160>
 800c206:	2301      	movs	r3, #1
 800c208:	4632      	mov	r2, r6
 800c20a:	4649      	mov	r1, r9
 800c20c:	4640      	mov	r0, r8
 800c20e:	47d0      	blx	sl
 800c210:	3001      	adds	r0, #1
 800c212:	d09d      	beq.n	800c150 <_printf_i+0x15c>
 800c214:	3501      	adds	r5, #1
 800c216:	68e3      	ldr	r3, [r4, #12]
 800c218:	9903      	ldr	r1, [sp, #12]
 800c21a:	1a5b      	subs	r3, r3, r1
 800c21c:	42ab      	cmp	r3, r5
 800c21e:	dcf2      	bgt.n	800c206 <_printf_i+0x212>
 800c220:	e7eb      	b.n	800c1fa <_printf_i+0x206>
 800c222:	2500      	movs	r5, #0
 800c224:	f104 0619 	add.w	r6, r4, #25
 800c228:	e7f5      	b.n	800c216 <_printf_i+0x222>
 800c22a:	bf00      	nop
 800c22c:	0800c639 	.word	0x0800c639
 800c230:	0800c64a 	.word	0x0800c64a

0800c234 <memmove>:
 800c234:	4288      	cmp	r0, r1
 800c236:	b510      	push	{r4, lr}
 800c238:	eb01 0402 	add.w	r4, r1, r2
 800c23c:	d902      	bls.n	800c244 <memmove+0x10>
 800c23e:	4284      	cmp	r4, r0
 800c240:	4623      	mov	r3, r4
 800c242:	d807      	bhi.n	800c254 <memmove+0x20>
 800c244:	1e43      	subs	r3, r0, #1
 800c246:	42a1      	cmp	r1, r4
 800c248:	d008      	beq.n	800c25c <memmove+0x28>
 800c24a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c24e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c252:	e7f8      	b.n	800c246 <memmove+0x12>
 800c254:	4402      	add	r2, r0
 800c256:	4601      	mov	r1, r0
 800c258:	428a      	cmp	r2, r1
 800c25a:	d100      	bne.n	800c25e <memmove+0x2a>
 800c25c:	bd10      	pop	{r4, pc}
 800c25e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c262:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c266:	e7f7      	b.n	800c258 <memmove+0x24>

0800c268 <_sbrk_r>:
 800c268:	b538      	push	{r3, r4, r5, lr}
 800c26a:	4d06      	ldr	r5, [pc, #24]	@ (800c284 <_sbrk_r+0x1c>)
 800c26c:	2300      	movs	r3, #0
 800c26e:	4604      	mov	r4, r0
 800c270:	4608      	mov	r0, r1
 800c272:	602b      	str	r3, [r5, #0]
 800c274:	f7f5 fdd0 	bl	8001e18 <_sbrk>
 800c278:	1c43      	adds	r3, r0, #1
 800c27a:	d102      	bne.n	800c282 <_sbrk_r+0x1a>
 800c27c:	682b      	ldr	r3, [r5, #0]
 800c27e:	b103      	cbz	r3, 800c282 <_sbrk_r+0x1a>
 800c280:	6023      	str	r3, [r4, #0]
 800c282:	bd38      	pop	{r3, r4, r5, pc}
 800c284:	240006f0 	.word	0x240006f0

0800c288 <_realloc_r>:
 800c288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c28c:	4680      	mov	r8, r0
 800c28e:	4615      	mov	r5, r2
 800c290:	460c      	mov	r4, r1
 800c292:	b921      	cbnz	r1, 800c29e <_realloc_r+0x16>
 800c294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c298:	4611      	mov	r1, r2
 800c29a:	f7ff bc59 	b.w	800bb50 <_malloc_r>
 800c29e:	b92a      	cbnz	r2, 800c2ac <_realloc_r+0x24>
 800c2a0:	f7ff fbea 	bl	800ba78 <_free_r>
 800c2a4:	2400      	movs	r4, #0
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2ac:	f000 f81a 	bl	800c2e4 <_malloc_usable_size_r>
 800c2b0:	4285      	cmp	r5, r0
 800c2b2:	4606      	mov	r6, r0
 800c2b4:	d802      	bhi.n	800c2bc <_realloc_r+0x34>
 800c2b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c2ba:	d8f4      	bhi.n	800c2a6 <_realloc_r+0x1e>
 800c2bc:	4629      	mov	r1, r5
 800c2be:	4640      	mov	r0, r8
 800c2c0:	f7ff fc46 	bl	800bb50 <_malloc_r>
 800c2c4:	4607      	mov	r7, r0
 800c2c6:	2800      	cmp	r0, #0
 800c2c8:	d0ec      	beq.n	800c2a4 <_realloc_r+0x1c>
 800c2ca:	42b5      	cmp	r5, r6
 800c2cc:	462a      	mov	r2, r5
 800c2ce:	4621      	mov	r1, r4
 800c2d0:	bf28      	it	cs
 800c2d2:	4632      	movcs	r2, r6
 800c2d4:	f7ff fbc2 	bl	800ba5c <memcpy>
 800c2d8:	4621      	mov	r1, r4
 800c2da:	4640      	mov	r0, r8
 800c2dc:	f7ff fbcc 	bl	800ba78 <_free_r>
 800c2e0:	463c      	mov	r4, r7
 800c2e2:	e7e0      	b.n	800c2a6 <_realloc_r+0x1e>

0800c2e4 <_malloc_usable_size_r>:
 800c2e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2e8:	1f18      	subs	r0, r3, #4
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	bfbc      	itt	lt
 800c2ee:	580b      	ldrlt	r3, [r1, r0]
 800c2f0:	18c0      	addlt	r0, r0, r3
 800c2f2:	4770      	bx	lr

0800c2f4 <_init>:
 800c2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f6:	bf00      	nop
 800c2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2fa:	bc08      	pop	{r3}
 800c2fc:	469e      	mov	lr, r3
 800c2fe:	4770      	bx	lr

0800c300 <_fini>:
 800c300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c302:	bf00      	nop
 800c304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c306:	bc08      	pop	{r3}
 800c308:	469e      	mov	lr, r3
 800c30a:	4770      	bx	lr
